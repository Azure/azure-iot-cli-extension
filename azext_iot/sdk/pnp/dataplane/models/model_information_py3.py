# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ModelInformation(Model):
    """Model Metadata.

    :param comment: Gets or sets comments value in the model.
    :type comment: str
    :param description: Gets or sets description about the model.
    :type description: str
    :param display_name: Gets or sets display Name of the model.
    :type display_name: str
    :param model_id: Gets or sets model Identifier.
    :type model_id: str
    :param model_name: Gets or sets model Name.
    :type model_name: str
    :param version: Gets or sets modelVersion of the model.
    :type version: str
    :param model_type: Gets or sets model Definition Type. Possible values
     include: 'Interface', 'Undetermined'
    :type model_type: str or ~pnp.models.enum
    :param publisher_id: Gets or sets aad Tenant Id of the model publisher.
    :type publisher_id: str
    :param publisher_name: Gets or sets aad Tenant Name of the model
     publisher.
    :type publisher_name: str
    :param created_by: Gets or sets the identity of the user who created the
     model.
    :type created_by: str
    :param created_date: Gets or sets created Date and Time of the model.
    :type created_date: datetime
    :param updated_date: Gets or sets updated date and time of the model.
    :type updated_date: datetime
    :param model_state: Gets or sets the state of the model. - Created or
     Listed. Possible values include: 'Created', 'Listed'
    :type model_state: str or ~pnp.models.enum
    :param _etag: Gets or sets the e tag.
    :type _etag: str
    :param count_of_components: Gets or sets the number of components.
    :type count_of_components: int
    :param count_of_commands: Gets or sets the number of commands.
    :type count_of_commands: int
    :param count_of_telemetries: Gets or sets the number of telemetries.
    :type count_of_telemetries: int
    :param count_of_properties: Gets or sets the number of properties.
    :type count_of_properties: int
    :param count_of_relationships: Gets or sets the number of relationships.
    :type count_of_relationships: int
    :param count_of_extends: Gets or sets the number of extends.
    :type count_of_extends: int
    :param count_of_schemas: Gets or sets the number of schemas.
    :type count_of_schemas: int
    """

    _attribute_map = {
        'comment': {'key': 'comment', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'model_id': {'key': 'modelId', 'type': 'str'},
        'model_name': {'key': 'modelName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'model_type': {'key': 'modelType', 'type': 'str'},
        'publisher_id': {'key': 'publisherId', 'type': 'str'},
        'publisher_name': {'key': 'publisherName', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_date': {'key': 'createdDate', 'type': 'iso-8601'},
        'updated_date': {'key': 'updatedDate', 'type': 'iso-8601'},
        'model_state': {'key': 'modelState', 'type': 'str'},
        '_etag': {'key': '_etag', 'type': 'str'},
        'count_of_components': {'key': 'countOfComponents', 'type': 'int'},
        'count_of_commands': {'key': 'countOfCommands', 'type': 'int'},
        'count_of_telemetries': {'key': 'countOfTelemetries', 'type': 'int'},
        'count_of_properties': {'key': 'countOfProperties', 'type': 'int'},
        'count_of_relationships': {'key': 'countOfRelationships', 'type': 'int'},
        'count_of_extends': {'key': 'countOfExtends', 'type': 'int'},
        'count_of_schemas': {'key': 'countOfSchemas', 'type': 'int'},
    }

    def __init__(self, *, comment: str=None, description: str=None, display_name: str=None, model_id: str=None, model_name: str=None, version: str=None, model_type=None, publisher_id: str=None, publisher_name: str=None, created_by: str=None, created_date=None, updated_date=None, model_state=None, _etag: str=None, count_of_components: int=None, count_of_commands: int=None, count_of_telemetries: int=None, count_of_properties: int=None, count_of_relationships: int=None, count_of_extends: int=None, count_of_schemas: int=None, **kwargs) -> None:
        super(ModelInformation, self).__init__(**kwargs)
        self.comment = comment
        self.description = description
        self.display_name = display_name
        self.model_id = model_id
        self.model_name = model_name
        self.version = version
        self.model_type = model_type
        self.publisher_id = publisher_id
        self.publisher_name = publisher_name
        self.created_by = created_by
        self.created_date = created_date
        self.updated_date = updated_date
        self.model_state = model_state
        self._etag = _etag
        self.count_of_components = count_of_components
        self.count_of_commands = count_of_commands
        self.count_of_telemetries = count_of_telemetries
        self.count_of_properties = count_of_properties
        self.count_of_relationships = count_of_relationships
        self.count_of_extends = count_of_extends
        self.count_of_schemas = count_of_schemas
