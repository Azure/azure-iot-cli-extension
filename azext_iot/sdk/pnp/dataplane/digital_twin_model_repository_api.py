# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError
import uuid
from . import models
from azext_iot.constants import USER_AGENT


class DigitalTwinModelRepositoryApiConfiguration(AzureConfiguration):
    """Configuration for DigitalTwinModelRepositoryApi
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = 'http://localhost'

        super(DigitalTwinModelRepositoryApiConfiguration, self).__init__(base_url)

        self.add_user_agent('digitaltwinmodelrepositoryapi/{}'.format(VERSION))
        self.add_user_agent(USER_AGENT)  # @c-ryan-k

        self.credentials = credentials


class DigitalTwinModelRepositoryApi(SDKClient):
    """DigitalTwinModelRepositoryApi

    :ivar config: Configuration for client.
    :vartype config: DigitalTwinModelRepositoryApiConfiguration

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        self.config = DigitalTwinModelRepositoryApiConfiguration(credentials, base_url)
        super(DigitalTwinModelRepositoryApi, self).__init__(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '2020-05-01-preview'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def get_model_async(
            self, model_id, expand=None, x_ms_client_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Gets a Digital Twin model definition for the given digital twin model
        Id.

        :param model_id: Digital Twin model Id e.g.:
         dtmi:com:contoso:temperaturesensor;1.
        :type model_id: str
        :param expand: Gets or sets a value indicating whether indicates
         whether to expand the modelï¿½s referenced definitions inline or not.
        :type expand: bool
        :param x_ms_client_request_id: Gets or sets optional. Provides a
         client-generated value that is recorded in the logs. Using this header
         is highly recommended for correlating client-side activities with
         requests received by the server.
        :type x_ms_client_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.get_model_async.metadata['url']
        path_format_arguments = {
            'modelId': self._serialize.url("model_id", model_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['expand'] = self._serialize.query("expand", expand, 'bool')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/ld+json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 401, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('str', response)
        if response.status_code == 401:
            deserialized = self._deserialize('ServiceError', response)
        if response.status_code == 404:
            deserialized = self._deserialize('ServiceError', response)
        if response.status_code == 500:
            deserialized = self._deserialize('ServiceError', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_model_async.metadata = {'url': '/models/{modelId}'}

    def create_or_update_async(
            self, model_id, json_ld_model=None, if_match=None, update_metadata=None, x_ms_model_state=None, x_ms_client_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Creates a Digital Twin model or updates meta data properties of a
        Digital Twin model.

        :param model_id: Digital Twin model Id e.g.:
         dtmi:com:contoso:temperaturesensor;1.
        :type model_id: str
        :param json_ld_model: Model definition in Digital Twin Definition
         Language (DTDL) format.
        :type json_ld_model: object
        :param if_match: Gets or sets model definition in Digital Twin
         Definition Language (DTDL) format.
        :type if_match: str
        :param update_metadata: Gets or sets a value indicating whether used
         to modify metadata properties supplied in the Header.
        :type update_metadata: bool
        :param x_ms_model_state: Gets or sets model Lifecycle state. Possible
         values include: 'Created', 'Listed'
        :type x_ms_model_state: str
        :param x_ms_client_request_id: Gets or sets optional. Provides a
         client-generated value that is recorded in the logs. Using this header
         is highly recommended for correlating client-side activities with
         requests received by the server.
        :type x_ms_client_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.create_or_update_async.metadata['url']
        path_format_arguments = {
            'modelId': self._serialize.url("model_id", model_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if update_metadata is not None:
            query_parameters['update-metadata'] = self._serialize.query("update_metadata", update_metadata, 'bool')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if if_match is not None:
            header_parameters['if-match'] = self._serialize.header("if_match", if_match, 'str')
        if x_ms_model_state is not None:
            header_parameters['x-ms-model-state'] = self._serialize.header("x_ms_model_state", x_ms_model_state, 'str')
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        if json_ld_model is not None:
            body_content = self._serialize.body(json_ld_model, 'object')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 201, 401, 404, 409, 412, 415, 428, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('str', response)
        if response.status_code == 201:
            deserialized = self._deserialize('str', response)
        if response.status_code == 401:
            deserialized = self._deserialize('ServiceError', response)
        if response.status_code == 404:
            deserialized = self._deserialize('ServiceError', response)
        if response.status_code == 409:
            deserialized = self._deserialize('ServiceError', response)
        if response.status_code == 412:
            deserialized = self._deserialize('ServiceError', response)
        if response.status_code == 415:
            deserialized = self._deserialize('ServiceError', response)
        if response.status_code == 428:
            deserialized = self._deserialize('ServiceError', response)
        if response.status_code == 500:
            deserialized = self._deserialize('ServiceError', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_or_update_async.metadata = {'url': '/models/{modelId}'}

    def search_models_async(
            self, model_search_options=None, x_ms_page_size=None, x_ms_show_shared_models_only=None, x_ms_continuation_token=None, x_ms_client_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Queries Model repository for Digital Twin models matching search
        options.

        :param model_search_options: Gets or sets model Search Options.
        :type model_search_options: ~pnp.models.ModelSearchOptions
        :param x_ms_page_size: Gets or sets when specified, it ensures that
         paged results are returned. If not specified, default value is 50.
        :type x_ms_page_size: int
        :param x_ms_show_shared_models_only: Gets or sets a value indicating
         whether [show shared models].
        :type x_ms_show_shared_models_only: bool
        :param x_ms_continuation_token: Gets or sets when there are more
         results than a page size, server responds with a continuation token.
         Supply this token to retrieve next set of page results.
        :type x_ms_continuation_token: str
        :param x_ms_client_request_id: Gets or sets optional. Provides a
         client-generated value that is recorded in the logs. Using this header
         is highly recommended for correlating client-side activities with
         requests received by the server.
        :type x_ms_client_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.search_models_async.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/ld+json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if x_ms_page_size is not None:
            header_parameters['x-ms-page-size'] = self._serialize.header("x_ms_page_size", x_ms_page_size, 'int')
        if x_ms_show_shared_models_only is not None:
            header_parameters['x-ms-show-shared-models-only'] = self._serialize.header("x_ms_show_shared_models_only", x_ms_show_shared_models_only, 'bool')
        if x_ms_continuation_token is not None:
            header_parameters['x-ms-continuation-token'] = self._serialize.header("x_ms_continuation_token", x_ms_continuation_token, 'str')
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        if model_search_options is not None:
            body_content = self._serialize.body(model_search_options, 'ModelSearchOptions')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[ModelInformation]', response)
        if response.status_code == 404:
            deserialized = self._deserialize('ServiceError', response)
        if response.status_code == 500:
            deserialized = self._deserialize('ServiceError', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    search_models_async.metadata = {'url': '/models/search'}

    def are_valid_models(
            self, json_ld_models=None, x_ms_client_request_id=None, validate_dependencies=None, custom_headers=None, raw=False, **operation_config):
        """Validates the models according to the DTDL spec.

        :param json_ld_models: The json ld models.
        :type json_ld_models: list[object]
        :param x_ms_client_request_id: Gets or sets optional. Provides a
         client-generated value that is recorded in the logs. Using this header
         is highly recommended for correlating client-side activities with
         requests received by the server.
        :type x_ms_client_request_id: str
        :param validate_dependencies: Gets or sets a value indicating whether
         [validate dependencies].
        :type validate_dependencies: bool
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.are_valid_models.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if validate_dependencies is not None:
            query_parameters['validateDependencies'] = self._serialize.query("validate_dependencies", validate_dependencies, 'bool')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        if json_ld_models is not None:
            body_content = self._serialize.body(json_ld_models, '[object]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('str', response)
        if response.status_code == 400:
            deserialized = self._deserialize('ServiceError', response)
        if response.status_code == 500:
            deserialized = self._deserialize('ServiceError', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    are_valid_models.metadata = {'url': '/models/validate'}
