# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError
from . import models
from azext_iot.constants import USER_AGENT


class DigitalTwinRepositoryServiceConfiguration(Configuration):
    """Configuration for DigitalTwinRepositoryService
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        if not base_url:
            base_url = 'http://localhost'

        super(DigitalTwinRepositoryServiceConfiguration, self).__init__(base_url)
        self.add_user_agent('digitaltwinrepositoryservice/{}'.format(VERSION))
        self.add_user_agent(USER_AGENT)


class DigitalTwinRepositoryService(SDKClient):
    """DigitalTwin Model Repository Service.

    :ivar config: Configuration for client.
    :vartype config: DigitalTwinRepositoryServiceConfiguration

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        self.config = DigitalTwinRepositoryServiceConfiguration(base_url)
        super(DigitalTwinRepositoryService, self).__init__(None, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = 'v1'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def get_model(
            self, model_id, api_version, repository_id=None, x_ms_client_request_id=None, expand=False, custom_headers=None, raw=False, **operation_config):
        """Returns a DigitalTwin model object for the given \"id\".\r\nIf
        \"expand\" is present in the query parameters and \"id\" is for a
        capability model then it returns\r\nthe capability model with expanded
        interface definitions.

        :param model_id: Model id Ex:
         <example>urn:contoso:com:temparaturesensor:1</example>
        :type model_id: str
        :param api_version: Version of the Api. Must be 2019-07-01-preview
        :type api_version: str
        :param repository_id: To access private repo, repositoryId is the repo
         id. To access global repo, caller should not specify this value.
        :type repository_id: str
        :param x_ms_client_request_id: Optional. Provides a client-generated
         opaque value that is recorded in the logs. Using this header is highly
         recommended for correlating client-side activities with requests
         received by the server.
        :type x_ms_client_request_id: str
        :param expand: Indicates whether to expand the capability model's
         interface definitions inline or not. This query parameter ONLY applies
         to Capability model.
        :type expand: bool
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_model.metadata['url']
        path_format_arguments = {
            'modelId': self._serialize.url("model_id", model_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if repository_id is not None:
            query_parameters['repositoryId'] = self._serialize.query("repository_id", repository_id, 'str')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if expand is not None:
            query_parameters['expand'] = self._serialize.query("expand", expand, 'bool')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/ld+json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None
        header_dict = {}

        if response.status_code == 200:
            deserialized = self._deserialize('{object}', response)
            header_dict = {
                'x-ms-request-id': 'str',
                'ETag': 'str',
                'x-ms-model-id': 'str',
                'x-ms-model-publisher-id': 'str',
                'x-ms-model-publisher-name': 'str',
                'x-ms-model-createdon': 'iso-8601',
                'x-ms-model-lastupdated': 'iso-8601',
            }

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            client_raw_response.add_headers(header_dict)
            return client_raw_response

        return deserialized
    get_model.metadata = {'url': '/models/{modelId}'}

    def create_or_update_model(
            self, model_id, api_version, content, repository_id=None, x_ms_client_request_id=None, if_match=None, custom_headers=None, raw=False, **operation_config):
        """Creates or updates the DigitalTwin Model in the repository.

        :param model_id: Model id Ex:
         <example>urn:contoso:TemparatureSensor:1</example>
        :type model_id: str
        :param api_version: Version of the Api. Must be 2019-07-01-preview
        :type api_version: str
        :param content: Model definition in Digital Twin Definition Language
         format.
        :type content: object
        :param repository_id: To access private repo, repositoryId is the repo
         id\\r\\nTo access global repo, caller should not specify this value.
        :type repository_id: str
        :param x_ms_client_request_id: Optional. Provides a client-generated
         opaque value that is recorded in the logs. Using this header is highly
         recommended for correlating client-side activities with requests
         received by the server.
        :type x_ms_client_request_id: str
        :param if_match: Used to make operation conditional for optimistic
         concurrency. That is, the document is updated only if the specified
         etag matches the current version in the database. The value should be
         set to the etag value of the resource.
        :type if_match: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_or_update_model.metadata['url']
        path_format_arguments = {
            'modelId': self._serialize.url("model_id", model_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if repository_id is not None:
            query_parameters['repositoryId'] = self._serialize.query("repository_id", repository_id, 'str')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str')
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')

        # Construct body
        body_content = self._serialize.body(content, 'object')
        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201, 204, 412]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            client_raw_response.add_headers({
                'x-ms-request-id': 'str',
                'ETag': 'str',
            })
            return client_raw_response
    create_or_update_model.metadata = {'url': '/models/{modelId}'}

    def delete_model(
            self, model_id, repository_id, api_version, x_ms_client_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Deletes a digital twin model from the repository.

        :param model_id: Model id Ex:
         <example>urn:contoso:com:temparaturesensor:1</example>
        :type model_id: str
        :param repository_id: To access private repo, repositoryId is the repo
         id. Delete is not allowed for public repository.
        :type repository_id: str
        :param api_version: Version of the Api. Must be 2019-07-01-preview
        :type api_version: str
        :param x_ms_client_request_id: Optional. Provides a client-generated
         opaque value that is recorded in the logs. Using this header is highly
         recommended for correlating client-side activities with requests
         received by the server.
        :type x_ms_client_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_model.metadata['url']
        path_format_arguments = {
            'modelId': self._serialize.url("model_id", model_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['repositoryId'] = self._serialize.query("repository_id", repository_id, 'str')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            client_raw_response.add_headers({
                'x-ms-request-id': 'str',
            })
            return client_raw_response
    delete_model.metadata = {'url': '/models/{modelId}'}

    def search(
            self, search_options, api_version, repository_id=None, x_ms_client_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Searches pnp models for given search options.
        It searches in the "Description, DisplayName, Comment and Id" metadata.

        :param search_options: Set SearchOption.searchKeyword to search models
         with the keyword.
         Set the "SearchOptions.modelFilterType" to restrict to a type of
         DigitalTwin model (Ex: Interface or CapabilityModel).
         Default it returns all the models.
        :type search_options:
         ~digitaltwinmodelrepositoryservice.models.SearchOptions
        :param api_version: Version of the Api. Must be 2019-07-01-preview
        :type api_version: str
        :param repository_id: To access private repo, repositoryId is the repo
         id.\\r\\nDelete is not allowed for public repository.
        :type repository_id: str
        :param x_ms_client_request_id: Optional. Provides a client-generated
         opaque value that is recorded in the logs. Using this header is highly
         recommended for correlating client-side activities with requests
         received by the server..
        :type x_ms_client_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SearchResponse or ClientRawResponse if raw=true
        :rtype: ~digitaltwinmodelrepositoryservice.models.SearchResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.search.metadata['url']

        # Construct parameters
        query_parameters = {}
        if repository_id is not None:
            query_parameters['repositoryId'] = self._serialize.query("repository_id", repository_id, 'str')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str')

        # Construct body
        body_content = self._serialize.body(search_options, 'SearchOptions')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None
        header_dict = {}

        if response.status_code == 200:
            deserialized = self._deserialize('SearchResponse', response)
            header_dict = {
                'x-ms-request-id': 'str',
            }

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            client_raw_response.add_headers(header_dict)
            return client_raw_response

        return deserialized
    search.metadata = {'url': '/models/search'}
