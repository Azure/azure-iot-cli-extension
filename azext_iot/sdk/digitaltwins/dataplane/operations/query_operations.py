# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse

from .. import models


class QueryOperations(object):
    """QueryOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar api_version: The API version to use for the request. Constant value: "2020-10-31".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.api_version = "2020-10-31"

        self.config = config

    def query_twins(
            self, query=None, continuation_token=None, query_query_twins_options=None, custom_headers=None, raw=False, **operation_config):
        """Executes a query that allows traversing relationships and filtering by
        property values.
        Status codes:
        * 200 OK
        * 400 Bad Request
        * BadRequest - The continuation token is invalid.
        * SqlQueryError - The query contains some errors.
        * 429 Too Many Requests
        * QuotaReachedError - The maximum query rate limit has been reached.

        :param query: The query to execute. This value is ignored if a
         continuation token is provided.
        :type query: str
        :param continuation_token: A token which is used to retrieve the next
         set of results from a previous query.
        :type continuation_token: str
        :param query_query_twins_options: Additional parameters for the
         operation
        :type query_query_twins_options:
         ~digitaltwins.models.QueryQueryTwinsOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: QueryResult or ClientRawResponse if raw=true
        :rtype: ~digitaltwins.models.QueryResult or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<digitaltwins.models.ErrorResponseException>`
        """
        traceparent = None
        if query_query_twins_options is not None:
            traceparent = query_query_twins_options.traceparent
        tracestate = None
        if query_query_twins_options is not None:
            tracestate = query_query_twins_options.tracestate
        max_items_per_page = None
        if query_query_twins_options is not None:
            max_items_per_page = query_query_twins_options.max_items_per_page
        query_specification = models.QuerySpecification(query=query, continuation_token=continuation_token)

        # Construct URL
        url = self.query_twins.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')
        if traceparent is not None:
            header_parameters['traceparent'] = self._serialize.header("traceparent", traceparent, 'str')
        if tracestate is not None:
            header_parameters['tracestate'] = self._serialize.header("tracestate", tracestate, 'str')
        if max_items_per_page is not None:
            header_parameters['max-items-per-page'] = self._serialize.header("max_items_per_page", max_items_per_page, 'int')

        # Construct body
        body_content = self._serialize.body(query_specification, 'QuerySpecification')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None
        header_dict = {}

        if response.status_code == 200:
            deserialized = self._deserialize('QueryResult', response)
            header_dict = {
                'query-charge': 'float',
            }

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            client_raw_response.add_headers(header_dict)
            return client_raw_response

        return deserialized
    query_twins.metadata = {'url': '/query'}
