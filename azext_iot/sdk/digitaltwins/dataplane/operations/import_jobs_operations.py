# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse

from .. import models


class ImportJobsOperations(object):
    """ImportJobsOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar api_version: The requested API version. Constant value: "2021-06-30-preview".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.api_version = "2021-06-30-preview"

        self.config = config

    def list(
            self, import_jobs_list_options=None, custom_headers=None, raw=False, **operation_config):
        """Retrieves all bulk import jobs.
        Status codes:
        * 200 OK.

        :param import_jobs_list_options: Additional parameters for the
         operation
        :type import_jobs_list_options:
         ~dataplane.models.ImportJobsListOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of BulkImportJob
        :rtype:
         ~dataplane.models.BulkImportJobPaged[~dataplane.models.BulkImportJob]
        :raises:
         :class:`ErrorResponseException<dataplane.models.ErrorResponseException>`
        """
        max_items_per_page = None
        if import_jobs_list_options is not None:
            max_items_per_page = import_jobs_list_options.max_items_per_page
        traceparent = None
        if import_jobs_list_options is not None:
            traceparent = import_jobs_list_options.traceparent
        tracestate = None
        if import_jobs_list_options is not None:
            tracestate = import_jobs_list_options.tracestate

        def internal_paging(next_link=None, raw=False):

            if not next_link:
                # Construct URL
                url = self.list.metadata['url']

                # Construct parameters
                query_parameters = {}
                query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Content-Type'] = 'application/json; charset=utf-8'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')
            if max_items_per_page is not None:
                header_parameters['max-items-per-page'] = self._serialize.header("max_items_per_page", max_items_per_page, 'int')
            if traceparent is not None:
                header_parameters['traceparent'] = self._serialize.header("traceparent", traceparent, 'str')
            if tracestate is not None:
                header_parameters['tracestate'] = self._serialize.header("tracestate", tracestate, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters)
            response = self._client.send(
                request, header_parameters, stream=False, **operation_config)

            if response.status_code not in [200]:
                raise models.ErrorResponseException(self._deserialize, response)

            return response

        # Deserialize response
        deserialized = models.BulkImportJobPaged(internal_paging, self._deserialize.dependencies)

        if raw:
            header_dict = {}
            client_raw_response = models.BulkImportJobPaged(internal_paging, self._deserialize.dependencies, header_dict)
            return client_raw_response

        return deserialized
    list.metadata = {'url': '/jobs/import'}

    def put(
            self, id, import_job, import_jobs_put_options=None, custom_headers=None, raw=False, **operation_config):
        """Creates a bulk import job.
        Status codes:
        * 201 Created
        * 400 Bad Request
        * JobLimitReached - The maximum number of bulk import jobs allowed has
        been reached.
        * ValidationFailed - The bulk job request is not valid.

        :param id: The id for a bulk import job. The id is unique within bulk
         import jobs and case sensitive.
        :type id: str
        :param import_job: The bulk import job being added.
        :type import_job: ~dataplane.models.BulkImportJob
        :param import_jobs_put_options: Additional parameters for the
         operation
        :type import_jobs_put_options:
         ~dataplane.models.ImportJobsPutOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: BulkImportJob or ClientRawResponse if raw=true
        :rtype: ~dataplane.models.BulkImportJob or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<dataplane.models.ErrorResponseException>`
        """
        traceparent = None
        if import_jobs_put_options is not None:
            traceparent = import_jobs_put_options.traceparent
        tracestate = None
        if import_jobs_put_options is not None:
            tracestate = import_jobs_put_options.tracestate

        # Construct URL
        url = self.put.metadata['url']
        path_format_arguments = {
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')
        if traceparent is not None:
            header_parameters['traceparent'] = self._serialize.header("traceparent", traceparent, 'str')
        if tracestate is not None:
            header_parameters['tracestate'] = self._serialize.header("tracestate", tracestate, 'str')

        # Construct body
        body_content = self._serialize.body(import_job, 'BulkImportJob')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [201]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None
        header_dict = {}

        if response.status_code == 201:
            deserialized = self._deserialize('BulkImportJob', response)
            header_dict = {
                'operation-location': 'str',
            }

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            client_raw_response.add_headers(header_dict)
            return client_raw_response

        return deserialized
    put.metadata = {'url': '/jobs/import/{id}'}

    def get_by_id(
            self, id, import_jobs_get_by_id_options=None, custom_headers=None, raw=False, **operation_config):
        """Retrieves a bulk job.
        Status codes:
        * 200 OK
        * 404 Not Found
        * BulkJobNotFound - The bulk job was not found.

        :param id: The id for a bulk import job. The id is unique within bulk
         import jobs and case sensitive.
        :type id: str
        :param import_jobs_get_by_id_options: Additional parameters for the
         operation
        :type import_jobs_get_by_id_options:
         ~dataplane.models.ImportJobsGetByIdOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: BulkImportJob or ClientRawResponse if raw=true
        :rtype: ~dataplane.models.BulkImportJob or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<dataplane.models.ErrorResponseException>`
        """
        traceparent = None
        if import_jobs_get_by_id_options is not None:
            traceparent = import_jobs_get_by_id_options.traceparent
        tracestate = None
        if import_jobs_get_by_id_options is not None:
            tracestate = import_jobs_get_by_id_options.tracestate

        # Construct URL
        url = self.get_by_id.metadata['url']
        path_format_arguments = {
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')
        if traceparent is not None:
            header_parameters['traceparent'] = self._serialize.header("traceparent", traceparent, 'str')
        if tracestate is not None:
            header_parameters['tracestate'] = self._serialize.header("tracestate", tracestate, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('BulkImportJob', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_by_id.metadata = {'url': '/jobs/import/{id}'}

    def delete(
            self, id, import_jobs_delete_options=None, custom_headers=None, raw=False, **operation_config):
        """Deletes a bulk import job.
        Status codes:
        * 204 No Content
        .

        :param id: The id for a bulk import job. The id is unique within bulk
         import jobs and case sensitive.
        :type id: str
        :param import_jobs_delete_options: Additional parameters for the
         operation
        :type import_jobs_delete_options:
         ~dataplane.models.ImportJobsDeleteOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<dataplane.models.ErrorResponseException>`
        """
        traceparent = None
        if import_jobs_delete_options is not None:
            traceparent = import_jobs_delete_options.traceparent
        tracestate = None
        if import_jobs_delete_options is not None:
            tracestate = import_jobs_delete_options.tracestate

        # Construct URL
        url = self.delete.metadata['url']
        path_format_arguments = {
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')
        if traceparent is not None:
            header_parameters['traceparent'] = self._serialize.header("traceparent", traceparent, 'str')
        if tracestate is not None:
            header_parameters['tracestate'] = self._serialize.header("tracestate", tracestate, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [204]:
            raise models.ErrorResponseException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete.metadata = {'url': '/jobs/import/{id}'}
