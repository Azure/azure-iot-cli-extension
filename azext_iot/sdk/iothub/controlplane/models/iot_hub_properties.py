# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class IotHubProperties(Model):
    """The properties of an IoT hub.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param authorization_policies: The shared access policies you can use to
     secure a connection to the IoT hub.
    :type authorization_policies:
     list[~service.models.SharedAccessSignatureAuthorizationRule]
    :param disable_local_auth: If true, SAS tokens with Iot hub scoped SAS
     keys cannot be used for authentication.
    :type disable_local_auth: bool
    :param disable_device_sas: If true, all device(including Edge devices but
     excluding modules) scoped SAS keys cannot be used for authentication.
    :type disable_device_sas: bool
    :param disable_module_sas: If true, all module scoped SAS keys cannot be
     used for authentication.
    :type disable_module_sas: bool
    :param restrict_outbound_network_access: If true, egress from IotHub will
     be restricted to only the allowed FQDNs that are configured via
     allowedFqdnList.
    :type restrict_outbound_network_access: bool
    :param allowed_fqdn_list: List of allowed FQDNs(Fully Qualified Domain
     Name) for egress from Iot Hub.
    :type allowed_fqdn_list: list[str]
    :param public_network_access: Whether requests from Public Network are
     allowed. Possible values include: 'Enabled', 'Disabled'
    :type public_network_access: str or ~service.models.PublicNetworkAccess
    :param ip_filter_rules: The IP filter rules.
    :type ip_filter_rules: list[~service.models.IpFilterRule]
    :param network_rule_sets:
    :type network_rule_sets: ~service.models.NetworkRuleSetProperties
    :param min_tls_version: Specifies the minimum TLS version to support for
     this hub. Can be set to "1.2" to have clients that use a TLS version below
     1.2 to be rejected.
    :type min_tls_version: str
    :param private_endpoint_connections: Private endpoint connections created
     on this IotHub
    :type private_endpoint_connections:
     list[~service.models.PrivateEndpointConnection]
    :ivar provisioning_state: The provisioning state.
    :vartype provisioning_state: str
    :ivar state: The hub state.
    :vartype state: str
    :ivar host_name: The name of the host.
    :vartype host_name: str
    :param event_hub_endpoints: The Event Hub-compatible endpoint properties.
     The only possible keys to this dictionary is events. This key has to be
     present in the dictionary while making create or update calls for the IoT
     hub.
    :type event_hub_endpoints: dict[str, ~service.models.EventHubProperties]
    :param routing:
    :type routing: ~service.models.RoutingProperties
    :param storage_endpoints: The list of Azure Storage endpoints where you
     can upload files. Currently you can configure only one Azure Storage
     account and that MUST have its key as $default. Specifying more than one
     storage account causes an error to be thrown. Not specifying a value for
     this property when the enableFileUploadNotifications property is set to
     True, causes an error to be thrown.
    :type storage_endpoints: dict[str,
     ~service.models.StorageEndpointProperties]
    :param messaging_endpoints: The messaging endpoint properties for the file
     upload notification queue.
    :type messaging_endpoints: dict[str,
     ~service.models.MessagingEndpointProperties]
    :param enable_file_upload_notifications: If True, file upload
     notifications are enabled.
    :type enable_file_upload_notifications: bool
    :param cloud_to_device:
    :type cloud_to_device: ~service.models.CloudToDeviceProperties
    :param comments: IoT hub comments.
    :type comments: str
    :param device_streams: The device streams properties of iothub.
    :type device_streams: ~service.models.IotHubPropertiesDeviceStreams
    :param features: The capabilities and features enabled for the IoT hub.
     Possible values include: 'None', 'DeviceManagement'
    :type features: str or ~service.models.Capabilities
    :param encryption: The encryption properties for the IoT hub.
    :type encryption: ~service.models.EncryptionPropertiesDescription
    :ivar locations: Primary and secondary location for iot hub
    :vartype locations: list[~service.models.IotHubLocationDescription]
    :param enable_data_residency: This property when set to true, will enable
     data residency, thus, disabling disaster recovery.
    :type enable_data_residency: bool
    :param root_certificate:
    :type root_certificate: ~service.models.RootCertificateProperties
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'state': {'readonly': True},
        'host_name': {'readonly': True},
        'locations': {'readonly': True},
    }

    _attribute_map = {
        'authorization_policies': {'key': 'authorizationPolicies', 'type': '[SharedAccessSignatureAuthorizationRule]'},
        'disable_local_auth': {'key': 'disableLocalAuth', 'type': 'bool'},
        'disable_device_sas': {'key': 'disableDeviceSAS', 'type': 'bool'},
        'disable_module_sas': {'key': 'disableModuleSAS', 'type': 'bool'},
        'restrict_outbound_network_access': {'key': 'restrictOutboundNetworkAccess', 'type': 'bool'},
        'allowed_fqdn_list': {'key': 'allowedFqdnList', 'type': '[str]'},
        'public_network_access': {'key': 'publicNetworkAccess', 'type': 'str'},
        'ip_filter_rules': {'key': 'ipFilterRules', 'type': '[IpFilterRule]'},
        'network_rule_sets': {'key': 'networkRuleSets', 'type': 'NetworkRuleSetProperties'},
        'min_tls_version': {'key': 'minTlsVersion', 'type': 'str'},
        'private_endpoint_connections': {'key': 'privateEndpointConnections', 'type': '[PrivateEndpointConnection]'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'host_name': {'key': 'hostName', 'type': 'str'},
        'event_hub_endpoints': {'key': 'eventHubEndpoints', 'type': '{EventHubProperties}'},
        'routing': {'key': 'routing', 'type': 'RoutingProperties'},
        'storage_endpoints': {'key': 'storageEndpoints', 'type': '{StorageEndpointProperties}'},
        'messaging_endpoints': {'key': 'messagingEndpoints', 'type': '{MessagingEndpointProperties}'},
        'enable_file_upload_notifications': {'key': 'enableFileUploadNotifications', 'type': 'bool'},
        'cloud_to_device': {'key': 'cloudToDevice', 'type': 'CloudToDeviceProperties'},
        'comments': {'key': 'comments', 'type': 'str'},
        'device_streams': {'key': 'deviceStreams', 'type': 'IotHubPropertiesDeviceStreams'},
        'features': {'key': 'features', 'type': 'str'},
        'encryption': {'key': 'encryption', 'type': 'EncryptionPropertiesDescription'},
        'locations': {'key': 'locations', 'type': '[IotHubLocationDescription]'},
        'enable_data_residency': {'key': 'enableDataResidency', 'type': 'bool'},
        'root_certificate': {'key': 'rootCertificate', 'type': 'RootCertificateProperties'},
    }

    def __init__(self, **kwargs):
        super(IotHubProperties, self).__init__(**kwargs)
        self.authorization_policies = kwargs.get('authorization_policies', None)
        self.disable_local_auth = kwargs.get('disable_local_auth', None)
        self.disable_device_sas = kwargs.get('disable_device_sas', None)
        self.disable_module_sas = kwargs.get('disable_module_sas', None)
        self.restrict_outbound_network_access = kwargs.get('restrict_outbound_network_access', None)
        self.allowed_fqdn_list = kwargs.get('allowed_fqdn_list', None)
        self.public_network_access = kwargs.get('public_network_access', None)
        self.ip_filter_rules = kwargs.get('ip_filter_rules', None)
        self.network_rule_sets = kwargs.get('network_rule_sets', None)
        self.min_tls_version = kwargs.get('min_tls_version', None)
        self.private_endpoint_connections = kwargs.get('private_endpoint_connections', None)
        self.provisioning_state = None
        self.state = None
        self.host_name = None
        self.event_hub_endpoints = kwargs.get('event_hub_endpoints', None)
        self.routing = kwargs.get('routing', None)
        self.storage_endpoints = kwargs.get('storage_endpoints', None)
        self.messaging_endpoints = kwargs.get('messaging_endpoints', None)
        self.enable_file_upload_notifications = kwargs.get('enable_file_upload_notifications', None)
        self.cloud_to_device = kwargs.get('cloud_to_device', None)
        self.comments = kwargs.get('comments', None)
        self.device_streams = kwargs.get('device_streams', None)
        self.features = kwargs.get('features', None)
        self.encryption = kwargs.get('encryption', None)
        self.locations = None
        self.enable_data_residency = kwargs.get('enable_data_residency', None)
        self.root_certificate = kwargs.get('root_certificate', None)
