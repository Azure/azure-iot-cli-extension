# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ImportDevicesRequest(Model):
    """Use to provide parameters when requesting an import of all devices in the
    hub.

    All required parameters must be populated in order to send to Azure.

    :param input_blob_container_uri: Required. The input blob container URI.
    :type input_blob_container_uri: str
    :param output_blob_container_uri: Required. The output blob container URI.
    :type output_blob_container_uri: str
    :param input_blob_name: The blob name to be used when importing from the
     provided input blob container.
    :type input_blob_name: str
    :param output_blob_name: The blob name to use for storing the status of
     the import job.
    :type output_blob_name: str
    :param authentication_type: Specifies authentication type being used for
     connecting to the storage account. Possible values include: 'keyBased',
     'identityBased'
    :type authentication_type: str or ~service.models.AuthenticationType
    :param identity: Managed identity properties of storage endpoint for
     import devices.
    :type identity: ~service.models.ManagedIdentity
    :param include_configurations: The value indicating whether configurations
     should be imported.
    :type include_configurations: bool
    :param configurations_blob_name: The blob name to be used when importing
     configurations from the provided input blob container.
    :type configurations_blob_name: str
    """

    _validation = {
        'input_blob_container_uri': {'required': True},
        'output_blob_container_uri': {'required': True},
    }

    _attribute_map = {
        'input_blob_container_uri': {'key': 'inputBlobContainerUri', 'type': 'str'},
        'output_blob_container_uri': {'key': 'outputBlobContainerUri', 'type': 'str'},
        'input_blob_name': {'key': 'inputBlobName', 'type': 'str'},
        'output_blob_name': {'key': 'outputBlobName', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedIdentity'},
        'include_configurations': {'key': 'includeConfigurations', 'type': 'bool'},
        'configurations_blob_name': {'key': 'configurationsBlobName', 'type': 'str'},
    }

    def __init__(self, *, input_blob_container_uri: str, output_blob_container_uri: str, input_blob_name: str=None, output_blob_name: str=None, authentication_type=None, identity=None, include_configurations: bool=None, configurations_blob_name: str=None, **kwargs) -> None:
        super(ImportDevicesRequest, self).__init__(**kwargs)
        self.input_blob_container_uri = input_blob_container_uri
        self.output_blob_container_uri = output_blob_container_uri
        self.input_blob_name = input_blob_name
        self.output_blob_name = output_blob_name
        self.authentication_type = authentication_type
        self.identity = identity
        self.include_configurations = include_configurations
        self.configurations_blob_name = configurations_blob_name
