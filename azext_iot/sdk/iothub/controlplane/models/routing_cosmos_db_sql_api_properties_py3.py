# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class RoutingCosmosDBSqlApiProperties(Model):
    """The properties related to a cosmos DB sql collection endpoint.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name that identifies this endpoint. The name
     can only include alphanumeric characters, periods, underscores, hyphens
     and has a maximum length of 64 characters. The following names are
     reserved:  events, fileNotifications, $default. Endpoint names must be
     unique across endpoint types.
    :type name: str
    :param id: Id of the cosmos DB sql collection endpoint
    :type id: str
    :param subscription_id: The subscription identifier of the cosmos DB
     account.
    :type subscription_id: str
    :param resource_group: The name of the resource group of the cosmos DB
     account.
    :type resource_group: str
    :param endpoint_uri: Required. The url of the cosmos DB account. It must
     include the protocol https://
    :type endpoint_uri: str
    :param authentication_type: Method used to authenticate against the cosmos
     DB sql collection endpoint. Possible values include: 'keyBased',
     'identityBased'
    :type authentication_type: str or ~service.models.AuthenticationType
    :param identity: Managed identity properties of routing cosmos DB
     collection endpoint.
    :type identity: ~service.models.ManagedIdentity
    :param primary_key: The primary key of the cosmos DB account.
    :type primary_key: str
    :param secondary_key: The secondary key of the cosmos DB account.
    :type secondary_key: str
    :param database_name: Required. The name of the cosmos DB database in the
     cosmos DB account.
    :type database_name: str
    :param collection_name: Required. The name of the cosmos DB sql collection
     in the cosmos DB database.
    :type collection_name: str
    :param partition_key_name: The name of the partition key associated with
     this cosmos DB sql collection if one exists. This is an optional
     parameter.
    :type partition_key_name: str
    :param partition_key_template: The template for generating a synthetic
     partition key value for use with this cosmos DB sql collection. The
     template must include at least one of the following placeholders:
     {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}. Any one placeholder may be
     specified at most once, but order and non-placeholder components are
     arbitrary. This parameter is only required if PartitionKeyName is
     specified.
    :type partition_key_template: str
    """

    _validation = {
        'name': {'required': True, 'pattern': r'^[A-Za-z0-9-._]{1,64}$'},
        'endpoint_uri': {'required': True},
        'database_name': {'required': True},
        'collection_name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'endpoint_uri': {'key': 'endpointUri', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedIdentity'},
        'primary_key': {'key': 'primaryKey', 'type': 'str'},
        'secondary_key': {'key': 'secondaryKey', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'collection_name': {'key': 'collectionName', 'type': 'str'},
        'partition_key_name': {'key': 'partitionKeyName', 'type': 'str'},
        'partition_key_template': {'key': 'partitionKeyTemplate', 'type': 'str'},
    }

    def __init__(self, *, name: str, endpoint_uri: str, database_name: str, collection_name: str, id: str=None, subscription_id: str=None, resource_group: str=None, authentication_type=None, identity=None, primary_key: str=None, secondary_key: str=None, partition_key_name: str=None, partition_key_template: str=None, **kwargs) -> None:
        super(RoutingCosmosDBSqlApiProperties, self).__init__(**kwargs)
        self.name = name
        self.id = id
        self.subscription_id = subscription_id
        self.resource_group = resource_group
        self.endpoint_uri = endpoint_uri
        self.authentication_type = authentication_type
        self.identity = identity
        self.primary_key = primary_key
        self.secondary_key = secondary_key
        self.database_name = database_name
        self.collection_name = collection_name
        self.partition_key_name = partition_key_name
        self.partition_key_template = partition_key_template
