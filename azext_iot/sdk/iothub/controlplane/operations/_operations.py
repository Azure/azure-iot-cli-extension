# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, Iterable, List, Optional, TypeVar, Union, cast, overload
from urllib.parse import parse_qs, urljoin, urlparse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .._serialization import Serializer
from .._vendor import _format_url_section

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_operations_list_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.Devices/operations"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_get_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_create_or_update_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    if_match = kwargs.pop("if_match", _headers.pop("If-Match", None))  # type: Optional[str]
    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if if_match is not None:
        _headers["If-Match"] = _SERIALIZER.header("if_match", if_match, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_update_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_delete_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_list_by_subscription_request(subscription_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_list_by_resource_group_request(
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_get_stats_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubStats"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_get_valid_skus_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/skus"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_list_event_hub_consumer_groups_request(
    resource_group_name: str, resource_name: str, event_hub_endpoint_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "eventHubEndpointName": _SERIALIZER.url("event_hub_endpoint_name", event_hub_endpoint_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_get_event_hub_consumer_group_request(
    resource_group_name: str,
    resource_name: str,
    event_hub_endpoint_name: str,
    name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "eventHubEndpointName": _SERIALIZER.url("event_hub_endpoint_name", event_hub_endpoint_name, "str"),
        "name": _SERIALIZER.url("name", name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_create_event_hub_consumer_group_request(
    resource_group_name: str,
    resource_name: str,
    event_hub_endpoint_name: str,
    name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "eventHubEndpointName": _SERIALIZER.url("event_hub_endpoint_name", event_hub_endpoint_name, "str"),
        "name": _SERIALIZER.url("name", name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_delete_event_hub_consumer_group_request(
    resource_group_name: str,
    resource_name: str,
    event_hub_endpoint_name: str,
    name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "eventHubEndpointName": _SERIALIZER.url("event_hub_endpoint_name", event_hub_endpoint_name, "str"),
        "name": _SERIALIZER.url("name", name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_list_jobs_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_get_job_request(
    resource_group_name: str, resource_name: str, job_id: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs/{jobId}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "jobId": _SERIALIZER.url("job_id", job_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_get_quota_metrics_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/quotaMetrics"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_get_endpoint_health_request(
    resource_group_name: str, iot_hub_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routingEndpointsHealth"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "iotHubName": _SERIALIZER.url("iot_hub_name", iot_hub_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_check_name_availability_request(subscription_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_test_all_routes_request(
    iot_hub_name: str, resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testall"  # pylint: disable=line-too-long
    path_format_arguments = {
        "iotHubName": _SERIALIZER.url("iot_hub_name", iot_hub_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_test_route_request(
    iot_hub_name: str, resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testnew"  # pylint: disable=line-too-long
    path_format_arguments = {
        "iotHubName": _SERIALIZER.url("iot_hub_name", iot_hub_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_list_keys_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_get_keys_for_key_name_request(
    resource_group_name: str, resource_name: str, key_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "keyName": _SERIALIZER.url("key_name", key_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_export_devices_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_resource_import_devices_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_resource_provider_common_get_subscription_quota_request(subscription_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/usages"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_certificates_list_by_iot_hub_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_certificates_get_request(
    resource_group_name: str, resource_name: str, certificate_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "certificateName": _SERIALIZER.url(
            "certificate_name", certificate_name, "str", pattern=r"^[A-Za-z0-9-._]{1,64}$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_certificates_create_or_update_request(
    resource_group_name: str, resource_name: str, certificate_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    if_match = kwargs.pop("if_match", _headers.pop("If-Match", None))  # type: Optional[str]
    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "certificateName": _SERIALIZER.url(
            "certificate_name", certificate_name, "str", pattern=r"^[A-Za-z0-9-._]{1,64}$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if if_match is not None:
        _headers["If-Match"] = _SERIALIZER.header("if_match", if_match, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_certificates_delete_request(
    resource_group_name: str,
    resource_name: str,
    certificate_name: str,
    subscription_id: str,
    *,
    if_match: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "certificateName": _SERIALIZER.url(
            "certificate_name", certificate_name, "str", pattern=r"^[A-Za-z0-9-._]{1,64}$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["If-Match"] = _SERIALIZER.header("if_match", if_match, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_certificates_generate_verification_code_request(
    resource_group_name: str,
    resource_name: str,
    certificate_name: str,
    subscription_id: str,
    *,
    if_match: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/generateVerificationCode"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "certificateName": _SERIALIZER.url(
            "certificate_name", certificate_name, "str", pattern=r"^[A-Za-z0-9-._]{1,64}$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["If-Match"] = _SERIALIZER.header("if_match", if_match, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_certificates_verify_request(
    resource_group_name: str, resource_name: str, certificate_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    if_match = kwargs.pop("if_match")  # type: str
    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/verify"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "certificateName": _SERIALIZER.url(
            "certificate_name", certificate_name, "str", pattern=r"^[A-Za-z0-9-._]{1,64}$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["If-Match"] = _SERIALIZER.header("if_match", if_match, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_iot_hub_manual_failover_request(
    iot_hub_name: str, resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/failover"  # pylint: disable=line-too-long
    path_format_arguments = {
        "iotHubName": _SERIALIZER.url("iot_hub_name", iot_hub_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_private_link_resources_list_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateLinkResources"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_private_link_resources_get_request(
    resource_group_name: str, resource_name: str, group_id: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateLinkResources/{groupId}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "groupId": _SERIALIZER.url("group_id", group_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_private_endpoint_connections_list_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_private_endpoint_connections_get_request(
    resource_group_name: str,
    resource_name: str,
    private_endpoint_connection_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "privateEndpointConnectionName": _SERIALIZER.url(
            "private_endpoint_connection_name", private_endpoint_connection_name, "str"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_private_endpoint_connections_update_request(
    resource_group_name: str,
    resource_name: str,
    private_endpoint_connection_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "privateEndpointConnectionName": _SERIALIZER.url(
            "private_endpoint_connection_name", private_endpoint_connection_name, "str"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_private_endpoint_connections_delete_request(
    resource_group_name: str,
    resource_name: str,
    private_endpoint_connection_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-04-30-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
        "privateEndpointConnectionName": _SERIALIZER.url(
            "private_endpoint_connection_name", private_endpoint_connection_name, "str"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


class Operations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.iothub.IotHubClient`'s
        :attr:`operations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> Iterable[JSON]:
        """Lists all of the available IoT Hub REST API operations.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "display": {
                        "description": "str",  # Optional. Description of the operation.
                        "operation": "str",  # Optional. Name of the operation.
                        "provider": "str",  # Optional. Service provider: Microsoft Devices.
                        "resource": "str"  # Optional. Resource Type: IotHubs.
                    },
                    "name": "str"  # Optional. Operation name: {provider}/{resource}/{read |
                      write | action | delete}.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_operations_list_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class IotHubResourceOperations:  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.iothub.IotHubClient`'s
        :attr:`iot_hub_resource` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> JSON:
        """Get the non-security related metadata of an IoT hub.

        Get the non-security related metadata of an IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The Etag field is *not* required. If it is
                      provided in the response body, it must also be provided as a header per the
                      normal ETag convention.
                    "id": "str",  # Optional. The resource identifier.
                    "identity": {
                        "principalId": "str",  # Optional. Principal Id.
                        "tenantId": "str",  # Optional. Tenant Id.
                        "type": "str",  # Optional. The type of identity used for the
                          resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
                          created identity and a set of user assigned identities. The type 'None' will
                          remove any identities from the service. Known values are: "SystemAssigned",
                          "UserAssigned", "SystemAssigned, UserAssigned", and "None".
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                                "principalId": "str"  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                            }
                        }
                    },
                    "location": "str",  # The resource location. Required.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "allowedFqdnList": [
                            "str"  # Optional. List of allowed FQDNs(Fully Qualified
                              Domain Name) for egress from Iot Hub.
                        ],
                        "authorizationPolicies": [
                            {
                                "keyName": "str",  # The name of the shared access
                                  policy. Required.
                                "primaryKey": "str",  # Optional. The primary key.
                                "rights": "str",  # The permissions assigned to the
                                  shared access policy. Required. Known values are: "RegistryRead",
                                  "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead,
                                  RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead,
                                  DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                                  DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead,
                                  RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite,
                                  DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect",
                                  "RegistryWrite, ServiceConnect, DeviceConnect", and "RegistryRead,
                                  RegistryWrite, ServiceConnect, DeviceConnect".
                                "secondaryKey": "str"  # Optional. The secondary key.
                            }
                        ],
                        "cloudToDevice": {
                            "defaultTtlAsIso8601": "1 day, 0:00:00",  # Optional. The
                              default time to live for cloud-to-device messages in the device queue.
                              See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            "feedback": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration for the feedback queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message on the feedback
                                  queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            },
                            "maxDeliveryCount": 0  # Optional. The max delivery count for
                              cloud-to-device messages in the device queue. See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                        },
                        "comments": "str",  # Optional. IoT hub comments.
                        "deviceStreams": {
                            "streamingEndpoints": [
                                "str"  # Optional. List of Device Streams Endpoints.
                            ]
                        },
                        "disableDeviceSAS": bool,  # Optional. If true, all device(including
                          Edge devices but excluding modules) scoped SAS keys cannot be used for
                          authentication.
                        "disableLocalAuth": bool,  # Optional. If true, SAS tokens with Iot
                          hub scoped SAS keys cannot be used for authentication.
                        "disableModuleSAS": bool,  # Optional. If true, all module scoped SAS
                          keys cannot be used for authentication.
                        "enableDataResidency": bool,  # Optional. This property when set to
                          true, will enable data residency, thus, disabling disaster recovery.
                        "enableFileUploadNotifications": bool,  # Optional. If True, file
                          upload notifications are enabled.
                        "encryption": {
                            "keySource": "str",  # Optional. The source of the key.
                            "keyVaultProperties": [
                                {
                                    "identity": {
                                        "userAssignedIdentity": "str"  #
                                          Optional. The user assigned identity.
                                    },
                                    "keyIdentifier": "str"  # Optional. The
                                      identifier of the key.
                                }
                            ]
                        },
                        "eventHubEndpoints": {
                            "str": {
                                "endpoint": "str",  # Optional. The Event
                                  Hub-compatible endpoint.
                                "partitionCount": 0,  # Optional. The number of
                                  partitions for receiving device-to-cloud messages in the Event
                                  Hub-compatible endpoint. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                                "partitionIds": [
                                    "str"  # Optional. The partition ids in the
                                      Event Hub-compatible endpoint.
                                ],
                                "path": "str",  # Optional. The Event Hub-compatible
                                  name.
                                "retentionTimeInDays": 0  # Optional. The retention
                                  time for device-to-cloud messages in days. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                            }
                        },
                        "features": "str",  # Optional. The capabilities and features enabled
                          for the IoT hub. Known values are: "None" and "DeviceManagement".
                        "hostName": "str",  # Optional. The name of the host.
                        "ipFilterRules": [
                            {
                                "action": "str",  # The desired action for requests
                                  captured by this rule. Required. Known values are: "Accept" and
                                  "Reject".
                                "filterName": "str",  # The name of the IP filter
                                  rule. Required.
                                "ipMask": "str"  # A string that contains the IP
                                  address range in CIDR notation for the rule. Required.
                            }
                        ],
                        "locations": [
                            {
                                "location": "str",  # Optional. The name of the Azure
                                  region.
                                "role": "str"  # Optional. The role of the region,
                                  can be either primary or secondary. The primary region is where the
                                  IoT hub is currently provisioned. The secondary region is the Azure
                                  disaster recovery (DR) paired region and also the region where the
                                  IoT hub can failover to. Known values are: "primary" and "secondary".
                            }
                        ],
                        "messagingEndpoints": {
                            "str": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                            }
                        },
                        "minTlsVersion": "str",  # Optional. Specifies the minimum TLS
                          version to support for this hub. Can be set to "1.2" to have clients that use
                          a TLS version below 1.2 to be rejected.
                        "networkRuleSets": {
                            "applyToBuiltInEventHubEndpoint": bool,  # If True, then
                              Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub.
                              Required.
                            "defaultAction": "Deny",  # Optional. Default value is
                              "Deny". Default Action for Network Rule Set. Known values are: "Deny" and
                              "Allow".
                            "ipRules": [
                                {
                                    "action": "Allow",  # Optional. Default value
                                      is "Allow". IP Filter Action. "Allow"
                                    "filterName": "str",  # Name of the IP filter
                                      rule. Required.
                                    "ipMask": "str"  # A string that contains the
                                      IP address range in CIDR notation for the rule. Required.
                                }
                            ]
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",  # Optional. The resource identifier.
                                "name": "str",  # Optional. The resource name.
                                "properties": {
                                    "privateEndpoint": {
                                        "id": "str"  # Optional. The resource
                                          identifier.
                                    },
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",  #
                                          Optional. Actions required for a private endpoint connection.
                                        "description": "str",  # The
                                          description for the current state of a private endpoint
                                          connection. Required.
                                        "status": "str"  # The status of a
                                          private endpoint connection. Required. Known values are:
                                          "Pending", "Approved", "Rejected", and "Disconnected".
                                    }
                                },
                                "type": "str"  # Optional. The resource type.
                            }
                        ],
                        "provisioningState": "str",  # Optional. The provisioning state.
                        "publicNetworkAccess": "str",  # Optional. Whether requests from
                          Public Network are allowed. Known values are: "Enabled" and "Disabled".
                        "restrictOutboundNetworkAccess": bool,  # Optional. If true, egress
                          from IotHub will be restricted to only the allowed FQDNs that are configured
                          via allowedFqdnList.
                        "rootCertificate": {
                            "enableRootCertificateV2": bool,  # Optional. This property
                              when set to true, hub will use G2 cert; while it's set to false, hub uses
                              Baltimore Cert.
                            "lastUpdatedTimeUtc": "2020-02-20 00:00:00"  # Optional. the
                              last update time to root certificate flag.
                        },
                        "routing": {
                            "endpoints": {
                                "cosmosDBSqlCollections": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the cosmos DB
                                          sql collection endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "collectionName": "str",  # The name
                                          of the cosmos DB sql collection in the cosmos DB database.
                                          Required.
                                        "databaseName": "str",  # The name of
                                          the cosmos DB database in the cosmos DB account. Required.
                                        "endpointUri": "str",  # The url of
                                          the cosmos DB account. It must include the protocol https://.
                                          Required.
                                        "id": "str",  # Optional. Id of the
                                          cosmos DB sql collection endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "partitionKeyName": "str",  #
                                          Optional. The name of the partition key associated with this
                                          cosmos DB sql collection if one exists. This is an optional
                                          parameter.
                                        "partitionKeyTemplate": "str",  #
                                          Optional. The template for generating a synthetic partition
                                          key value for use with this cosmos DB sql collection. The
                                          template must include at least one of the following
                                          placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}.
                                          Any one placeholder may be specified at most once, but order
                                          and non-placeholder components are arbitrary. This parameter
                                          is only required if PartitionKeyName is specified.
                                        "primaryKey": "str",  # Optional. The
                                          primary key of the cosmos DB account.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the cosmos DB account.
                                        "secondaryKey": "str",  # Optional.
                                          The secondary key of the cosmos DB account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the cosmos DB account.
                                    }
                                ],
                                "eventHubs": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the event hub
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the event hub endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the event hub endpoint. It must include the
                                          protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Event hub name on the event hub namespace.
                                        "id": "str",  # Optional. Id of the
                                          event hub endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the event hub endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the event hub endpoint.
                                    }
                                ],
                                "serviceBusQueues": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          queue endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus queue
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus queue endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus namespace.
                                        "id": "str",  # Optional. Id of the
                                          service bus queue endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. The name need not
                                          be the same as the actual queue name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus queue
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus queue
                                          endpoint.
                                    }
                                ],
                                "serviceBusTopics": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          topic endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus topic
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus topic endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus topic.
                                        "id": "str",  # Optional. Id of the
                                          service bus topic endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types.  The name need
                                          not be the same as the actual topic name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus topic
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus topic
                                          endpoint.
                                    }
                                ],
                                "storageContainers": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the storage
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "batchFrequencyInSeconds": 0,  #
                                          Optional. Time interval at which blobs are written to
                                          storage. Value should be between 60 and 720 seconds. Default
                                          value is 300 seconds.
                                        "connectionString": "str",  #
                                          Optional. The connection string of the storage account.
                                        "containerName": "str",  # The name
                                          of storage container in the storage account. Required.
                                        "encoding": "str",  # Optional.
                                          Encoding that is used to serialize messages to blobs.
                                          Supported values are 'avro', 'avrodeflate', and 'JSON'.
                                          Default value is 'avro'. Known values are: "Avro",
                                          "AvroDeflate", and "JSON".
                                        "endpointUri": "str",  # Optional.
                                          The url of the storage endpoint. It must include the protocol
                                          https://.
                                        "fileNameFormat": "str",  # Optional.
                                          File name format for the blob. Default format is
                                          {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All
                                          parameters are mandatory but can be reordered.
                                        "id": "str",  # Optional. Id of the
                                          storage container endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "maxChunkSizeInBytes": 0,  #
                                          Optional. Maximum number of bytes for each blob written to
                                          storage. Value should be between 10485760(10MB) and
                                          524288000(500MB). Default value is 314572800(300MB).
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the storage account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the storage account.
                                    }
                                ]
                            },
                            "enrichments": [
                                {
                                    "endpointNames": [
                                        "str"  # The list of endpoints for
                                          which the enrichment is applied to the message. Required.
                                    ],
                                    "key": "str",  # The key or name for the
                                      enrichment property. Required.
                                    "value": "str"  # The value for the
                                      enrichment property. Required.
                                }
                            ],
                            "fallbackRoute": {
                                "condition": "str",  # Optional. The condition which
                                  is evaluated in order to apply the fallback route. If the condition
                                  is not provided it will evaluate to true by default. For grammar,
                                  See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which the
                                      messages that satisfy the condition are routed to. Currently only
                                      1 endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether the
                                  fallback route is enabled. Required.
                                "name": "str",  # Optional. The name of the route.
                                  The name can only include alphanumeric characters, periods,
                                  underscores, hyphens, has a maximum length of 64 characters, and must
                                  be unique.
                                "source": "str"  # The source to which the routing
                                  rule is to be applied to. For example, DeviceMessages. Required.
                                  Known values are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            },
                            "routes": [
                                {
                                    "condition": "str",  # Optional. The
                                      condition that is evaluated to apply the routing rule. If no
                                      condition is provided, it evaluates to true by default. For
                                      grammar, see:
                                      https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                    "endpointNames": [
                                        "str"  # The list of endpoints to
                                          which messages that satisfy the condition are routed.
                                          Currently only one endpoint is allowed. Required.
                                    ],
                                    "isEnabled": bool,  # Used to specify whether
                                      a route is enabled. Required.
                                    "name": "str",  # The name of the route. The
                                      name can only include alphanumeric characters, periods,
                                      underscores, hyphens, has a maximum length of 64 characters, and
                                      must be unique. Required.
                                    "source": "str"  # The source that the
                                      routing rule is to be applied to, such as DeviceMessages.
                                      Required. Known values are: "Invalid", "DeviceMessages",
                                      "TwinChangeEvents", "DeviceLifecycleEvents",
                                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                                }
                            ]
                        },
                        "state": "str",  # Optional. The hub state.
                        "storageEndpoints": {
                            "str": {
                                "authenticationType": "str",  # Optional. Specifies
                                  authentication type being used for connecting to the storage account.
                                  Known values are: "keyBased" and "identityBased".
                                "connectionString": "str",  # The connection string
                                  for the Azure Storage account to which files are uploaded. Required.
                                "containerName": "str",  # The name of the root
                                  container where you upload files. The container need not exist but
                                  should be creatable using the connectionString specified. Required.
                                "identity": {
                                    "userAssignedIdentity": "str"  # Optional.
                                      The user assigned identity.
                                },
                                "sasTtlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which the SAS URI generated by IoT Hub for file
                                  upload is valid. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
                            }
                        }
                    },
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_iot_hub_resource_get_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    def _create_or_update_initial(
        self,
        resource_group_name: str,
        resource_name: str,
        iot_hub_description: Union[JSON, IO],
        *,
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(iot_hub_description, (IO, bytes)):
            _content = iot_hub_description
        else:
            _json = iot_hub_description

        request = build_iot_hub_resource_create_or_update_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            if_match=if_match,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def begin_create_or_update(
        self,
        resource_group_name: str,
        resource_name: str,
        iot_hub_description: JSON,
        *,
        if_match: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create or update the metadata of an IoT hub.

        Create or update the metadata of an Iot hub. The usual pattern to modify a property is to
        retrieve the IoT hub metadata and security metadata, and then combine them with the modified
        values in a new body to update the IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param iot_hub_description: The IoT hub metadata and security metadata. Required.
        :type iot_hub_description: JSON
        :keyword if_match: ETag of the IoT Hub. Do not specify for creating a brand new IoT Hub.
         Required to update an existing IoT Hub. Default value is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                iot_hub_description = {
                    "etag": "str",  # Optional. The Etag field is *not* required. If it is
                      provided in the response body, it must also be provided as a header per the
                      normal ETag convention.
                    "id": "str",  # Optional. The resource identifier.
                    "identity": {
                        "principalId": "str",  # Optional. Principal Id.
                        "tenantId": "str",  # Optional. Tenant Id.
                        "type": "str",  # Optional. The type of identity used for the
                          resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
                          created identity and a set of user assigned identities. The type 'None' will
                          remove any identities from the service. Known values are: "SystemAssigned",
                          "UserAssigned", "SystemAssigned, UserAssigned", and "None".
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                                "principalId": "str"  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                            }
                        }
                    },
                    "location": "str",  # The resource location. Required.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "allowedFqdnList": [
                            "str"  # Optional. List of allowed FQDNs(Fully Qualified
                              Domain Name) for egress from Iot Hub.
                        ],
                        "authorizationPolicies": [
                            {
                                "keyName": "str",  # The name of the shared access
                                  policy. Required.
                                "primaryKey": "str",  # Optional. The primary key.
                                "rights": "str",  # The permissions assigned to the
                                  shared access policy. Required. Known values are: "RegistryRead",
                                  "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead,
                                  RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead,
                                  DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                                  DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead,
                                  RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite,
                                  DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect",
                                  "RegistryWrite, ServiceConnect, DeviceConnect", and "RegistryRead,
                                  RegistryWrite, ServiceConnect, DeviceConnect".
                                "secondaryKey": "str"  # Optional. The secondary key.
                            }
                        ],
                        "cloudToDevice": {
                            "defaultTtlAsIso8601": "1 day, 0:00:00",  # Optional. The
                              default time to live for cloud-to-device messages in the device queue.
                              See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            "feedback": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration for the feedback queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message on the feedback
                                  queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            },
                            "maxDeliveryCount": 0  # Optional. The max delivery count for
                              cloud-to-device messages in the device queue. See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                        },
                        "comments": "str",  # Optional. IoT hub comments.
                        "deviceStreams": {
                            "streamingEndpoints": [
                                "str"  # Optional. List of Device Streams Endpoints.
                            ]
                        },
                        "disableDeviceSAS": bool,  # Optional. If true, all device(including
                          Edge devices but excluding modules) scoped SAS keys cannot be used for
                          authentication.
                        "disableLocalAuth": bool,  # Optional. If true, SAS tokens with Iot
                          hub scoped SAS keys cannot be used for authentication.
                        "disableModuleSAS": bool,  # Optional. If true, all module scoped SAS
                          keys cannot be used for authentication.
                        "enableDataResidency": bool,  # Optional. This property when set to
                          true, will enable data residency, thus, disabling disaster recovery.
                        "enableFileUploadNotifications": bool,  # Optional. If True, file
                          upload notifications are enabled.
                        "encryption": {
                            "keySource": "str",  # Optional. The source of the key.
                            "keyVaultProperties": [
                                {
                                    "identity": {
                                        "userAssignedIdentity": "str"  #
                                          Optional. The user assigned identity.
                                    },
                                    "keyIdentifier": "str"  # Optional. The
                                      identifier of the key.
                                }
                            ]
                        },
                        "eventHubEndpoints": {
                            "str": {
                                "endpoint": "str",  # Optional. The Event
                                  Hub-compatible endpoint.
                                "partitionCount": 0,  # Optional. The number of
                                  partitions for receiving device-to-cloud messages in the Event
                                  Hub-compatible endpoint. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                                "partitionIds": [
                                    "str"  # Optional. The partition ids in the
                                      Event Hub-compatible endpoint.
                                ],
                                "path": "str",  # Optional. The Event Hub-compatible
                                  name.
                                "retentionTimeInDays": 0  # Optional. The retention
                                  time for device-to-cloud messages in days. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                            }
                        },
                        "features": "str",  # Optional. The capabilities and features enabled
                          for the IoT hub. Known values are: "None" and "DeviceManagement".
                        "hostName": "str",  # Optional. The name of the host.
                        "ipFilterRules": [
                            {
                                "action": "str",  # The desired action for requests
                                  captured by this rule. Required. Known values are: "Accept" and
                                  "Reject".
                                "filterName": "str",  # The name of the IP filter
                                  rule. Required.
                                "ipMask": "str"  # A string that contains the IP
                                  address range in CIDR notation for the rule. Required.
                            }
                        ],
                        "locations": [
                            {
                                "location": "str",  # Optional. The name of the Azure
                                  region.
                                "role": "str"  # Optional. The role of the region,
                                  can be either primary or secondary. The primary region is where the
                                  IoT hub is currently provisioned. The secondary region is the Azure
                                  disaster recovery (DR) paired region and also the region where the
                                  IoT hub can failover to. Known values are: "primary" and "secondary".
                            }
                        ],
                        "messagingEndpoints": {
                            "str": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                            }
                        },
                        "minTlsVersion": "str",  # Optional. Specifies the minimum TLS
                          version to support for this hub. Can be set to "1.2" to have clients that use
                          a TLS version below 1.2 to be rejected.
                        "networkRuleSets": {
                            "applyToBuiltInEventHubEndpoint": bool,  # If True, then
                              Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub.
                              Required.
                            "defaultAction": "Deny",  # Optional. Default value is
                              "Deny". Default Action for Network Rule Set. Known values are: "Deny" and
                              "Allow".
                            "ipRules": [
                                {
                                    "action": "Allow",  # Optional. Default value
                                      is "Allow". IP Filter Action. "Allow"
                                    "filterName": "str",  # Name of the IP filter
                                      rule. Required.
                                    "ipMask": "str"  # A string that contains the
                                      IP address range in CIDR notation for the rule. Required.
                                }
                            ]
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",  # Optional. The resource identifier.
                                "name": "str",  # Optional. The resource name.
                                "properties": {
                                    "privateEndpoint": {
                                        "id": "str"  # Optional. The resource
                                          identifier.
                                    },
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",  #
                                          Optional. Actions required for a private endpoint connection.
                                        "description": "str",  # The
                                          description for the current state of a private endpoint
                                          connection. Required.
                                        "status": "str"  # The status of a
                                          private endpoint connection. Required. Known values are:
                                          "Pending", "Approved", "Rejected", and "Disconnected".
                                    }
                                },
                                "type": "str"  # Optional. The resource type.
                            }
                        ],
                        "provisioningState": "str",  # Optional. The provisioning state.
                        "publicNetworkAccess": "str",  # Optional. Whether requests from
                          Public Network are allowed. Known values are: "Enabled" and "Disabled".
                        "restrictOutboundNetworkAccess": bool,  # Optional. If true, egress
                          from IotHub will be restricted to only the allowed FQDNs that are configured
                          via allowedFqdnList.
                        "rootCertificate": {
                            "enableRootCertificateV2": bool,  # Optional. This property
                              when set to true, hub will use G2 cert; while it's set to false, hub uses
                              Baltimore Cert.
                            "lastUpdatedTimeUtc": "2020-02-20 00:00:00"  # Optional. the
                              last update time to root certificate flag.
                        },
                        "routing": {
                            "endpoints": {
                                "cosmosDBSqlCollections": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the cosmos DB
                                          sql collection endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "collectionName": "str",  # The name
                                          of the cosmos DB sql collection in the cosmos DB database.
                                          Required.
                                        "databaseName": "str",  # The name of
                                          the cosmos DB database in the cosmos DB account. Required.
                                        "endpointUri": "str",  # The url of
                                          the cosmos DB account. It must include the protocol https://.
                                          Required.
                                        "id": "str",  # Optional. Id of the
                                          cosmos DB sql collection endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "partitionKeyName": "str",  #
                                          Optional. The name of the partition key associated with this
                                          cosmos DB sql collection if one exists. This is an optional
                                          parameter.
                                        "partitionKeyTemplate": "str",  #
                                          Optional. The template for generating a synthetic partition
                                          key value for use with this cosmos DB sql collection. The
                                          template must include at least one of the following
                                          placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}.
                                          Any one placeholder may be specified at most once, but order
                                          and non-placeholder components are arbitrary. This parameter
                                          is only required if PartitionKeyName is specified.
                                        "primaryKey": "str",  # Optional. The
                                          primary key of the cosmos DB account.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the cosmos DB account.
                                        "secondaryKey": "str",  # Optional.
                                          The secondary key of the cosmos DB account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the cosmos DB account.
                                    }
                                ],
                                "eventHubs": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the event hub
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the event hub endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the event hub endpoint. It must include the
                                          protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Event hub name on the event hub namespace.
                                        "id": "str",  # Optional. Id of the
                                          event hub endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the event hub endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the event hub endpoint.
                                    }
                                ],
                                "serviceBusQueues": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          queue endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus queue
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus queue endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus namespace.
                                        "id": "str",  # Optional. Id of the
                                          service bus queue endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. The name need not
                                          be the same as the actual queue name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus queue
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus queue
                                          endpoint.
                                    }
                                ],
                                "serviceBusTopics": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          topic endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus topic
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus topic endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus topic.
                                        "id": "str",  # Optional. Id of the
                                          service bus topic endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types.  The name need
                                          not be the same as the actual topic name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus topic
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus topic
                                          endpoint.
                                    }
                                ],
                                "storageContainers": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the storage
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "batchFrequencyInSeconds": 0,  #
                                          Optional. Time interval at which blobs are written to
                                          storage. Value should be between 60 and 720 seconds. Default
                                          value is 300 seconds.
                                        "connectionString": "str",  #
                                          Optional. The connection string of the storage account.
                                        "containerName": "str",  # The name
                                          of storage container in the storage account. Required.
                                        "encoding": "str",  # Optional.
                                          Encoding that is used to serialize messages to blobs.
                                          Supported values are 'avro', 'avrodeflate', and 'JSON'.
                                          Default value is 'avro'. Known values are: "Avro",
                                          "AvroDeflate", and "JSON".
                                        "endpointUri": "str",  # Optional.
                                          The url of the storage endpoint. It must include the protocol
                                          https://.
                                        "fileNameFormat": "str",  # Optional.
                                          File name format for the blob. Default format is
                                          {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All
                                          parameters are mandatory but can be reordered.
                                        "id": "str",  # Optional. Id of the
                                          storage container endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "maxChunkSizeInBytes": 0,  #
                                          Optional. Maximum number of bytes for each blob written to
                                          storage. Value should be between 10485760(10MB) and
                                          524288000(500MB). Default value is 314572800(300MB).
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the storage account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the storage account.
                                    }
                                ]
                            },
                            "enrichments": [
                                {
                                    "endpointNames": [
                                        "str"  # The list of endpoints for
                                          which the enrichment is applied to the message. Required.
                                    ],
                                    "key": "str",  # The key or name for the
                                      enrichment property. Required.
                                    "value": "str"  # The value for the
                                      enrichment property. Required.
                                }
                            ],
                            "fallbackRoute": {
                                "condition": "str",  # Optional. The condition which
                                  is evaluated in order to apply the fallback route. If the condition
                                  is not provided it will evaluate to true by default. For grammar,
                                  See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which the
                                      messages that satisfy the condition are routed to. Currently only
                                      1 endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether the
                                  fallback route is enabled. Required.
                                "name": "str",  # Optional. The name of the route.
                                  The name can only include alphanumeric characters, periods,
                                  underscores, hyphens, has a maximum length of 64 characters, and must
                                  be unique.
                                "source": "str"  # The source to which the routing
                                  rule is to be applied to. For example, DeviceMessages. Required.
                                  Known values are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            },
                            "routes": [
                                {
                                    "condition": "str",  # Optional. The
                                      condition that is evaluated to apply the routing rule. If no
                                      condition is provided, it evaluates to true by default. For
                                      grammar, see:
                                      https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                    "endpointNames": [
                                        "str"  # The list of endpoints to
                                          which messages that satisfy the condition are routed.
                                          Currently only one endpoint is allowed. Required.
                                    ],
                                    "isEnabled": bool,  # Used to specify whether
                                      a route is enabled. Required.
                                    "name": "str",  # The name of the route. The
                                      name can only include alphanumeric characters, periods,
                                      underscores, hyphens, has a maximum length of 64 characters, and
                                      must be unique. Required.
                                    "source": "str"  # The source that the
                                      routing rule is to be applied to, such as DeviceMessages.
                                      Required. Known values are: "Invalid", "DeviceMessages",
                                      "TwinChangeEvents", "DeviceLifecycleEvents",
                                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                                }
                            ]
                        },
                        "state": "str",  # Optional. The hub state.
                        "storageEndpoints": {
                            "str": {
                                "authenticationType": "str",  # Optional. Specifies
                                  authentication type being used for connecting to the storage account.
                                  Known values are: "keyBased" and "identityBased".
                                "connectionString": "str",  # The connection string
                                  for the Azure Storage account to which files are uploaded. Required.
                                "containerName": "str",  # The name of the root
                                  container where you upload files. The container need not exist but
                                  should be creatable using the connectionString specified. Required.
                                "identity": {
                                    "userAssignedIdentity": "str"  # Optional.
                                      The user assigned identity.
                                },
                                "sasTtlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which the SAS URI generated by IoT Hub for file
                                  upload is valid. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
                            }
                        }
                    },
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    },
                    "type": "str"  # Optional. The resource type.
                }

                # response body for status code(s): 200, 201
                response == {
                    "etag": "str",  # Optional. The Etag field is *not* required. If it is
                      provided in the response body, it must also be provided as a header per the
                      normal ETag convention.
                    "id": "str",  # Optional. The resource identifier.
                    "identity": {
                        "principalId": "str",  # Optional. Principal Id.
                        "tenantId": "str",  # Optional. Tenant Id.
                        "type": "str",  # Optional. The type of identity used for the
                          resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
                          created identity and a set of user assigned identities. The type 'None' will
                          remove any identities from the service. Known values are: "SystemAssigned",
                          "UserAssigned", "SystemAssigned, UserAssigned", and "None".
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                                "principalId": "str"  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                            }
                        }
                    },
                    "location": "str",  # The resource location. Required.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "allowedFqdnList": [
                            "str"  # Optional. List of allowed FQDNs(Fully Qualified
                              Domain Name) for egress from Iot Hub.
                        ],
                        "authorizationPolicies": [
                            {
                                "keyName": "str",  # The name of the shared access
                                  policy. Required.
                                "primaryKey": "str",  # Optional. The primary key.
                                "rights": "str",  # The permissions assigned to the
                                  shared access policy. Required. Known values are: "RegistryRead",
                                  "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead,
                                  RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead,
                                  DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                                  DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead,
                                  RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite,
                                  DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect",
                                  "RegistryWrite, ServiceConnect, DeviceConnect", and "RegistryRead,
                                  RegistryWrite, ServiceConnect, DeviceConnect".
                                "secondaryKey": "str"  # Optional. The secondary key.
                            }
                        ],
                        "cloudToDevice": {
                            "defaultTtlAsIso8601": "1 day, 0:00:00",  # Optional. The
                              default time to live for cloud-to-device messages in the device queue.
                              See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            "feedback": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration for the feedback queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message on the feedback
                                  queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            },
                            "maxDeliveryCount": 0  # Optional. The max delivery count for
                              cloud-to-device messages in the device queue. See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                        },
                        "comments": "str",  # Optional. IoT hub comments.
                        "deviceStreams": {
                            "streamingEndpoints": [
                                "str"  # Optional. List of Device Streams Endpoints.
                            ]
                        },
                        "disableDeviceSAS": bool,  # Optional. If true, all device(including
                          Edge devices but excluding modules) scoped SAS keys cannot be used for
                          authentication.
                        "disableLocalAuth": bool,  # Optional. If true, SAS tokens with Iot
                          hub scoped SAS keys cannot be used for authentication.
                        "disableModuleSAS": bool,  # Optional. If true, all module scoped SAS
                          keys cannot be used for authentication.
                        "enableDataResidency": bool,  # Optional. This property when set to
                          true, will enable data residency, thus, disabling disaster recovery.
                        "enableFileUploadNotifications": bool,  # Optional. If True, file
                          upload notifications are enabled.
                        "encryption": {
                            "keySource": "str",  # Optional. The source of the key.
                            "keyVaultProperties": [
                                {
                                    "identity": {
                                        "userAssignedIdentity": "str"  #
                                          Optional. The user assigned identity.
                                    },
                                    "keyIdentifier": "str"  # Optional. The
                                      identifier of the key.
                                }
                            ]
                        },
                        "eventHubEndpoints": {
                            "str": {
                                "endpoint": "str",  # Optional. The Event
                                  Hub-compatible endpoint.
                                "partitionCount": 0,  # Optional. The number of
                                  partitions for receiving device-to-cloud messages in the Event
                                  Hub-compatible endpoint. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                                "partitionIds": [
                                    "str"  # Optional. The partition ids in the
                                      Event Hub-compatible endpoint.
                                ],
                                "path": "str",  # Optional. The Event Hub-compatible
                                  name.
                                "retentionTimeInDays": 0  # Optional. The retention
                                  time for device-to-cloud messages in days. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                            }
                        },
                        "features": "str",  # Optional. The capabilities and features enabled
                          for the IoT hub. Known values are: "None" and "DeviceManagement".
                        "hostName": "str",  # Optional. The name of the host.
                        "ipFilterRules": [
                            {
                                "action": "str",  # The desired action for requests
                                  captured by this rule. Required. Known values are: "Accept" and
                                  "Reject".
                                "filterName": "str",  # The name of the IP filter
                                  rule. Required.
                                "ipMask": "str"  # A string that contains the IP
                                  address range in CIDR notation for the rule. Required.
                            }
                        ],
                        "locations": [
                            {
                                "location": "str",  # Optional. The name of the Azure
                                  region.
                                "role": "str"  # Optional. The role of the region,
                                  can be either primary or secondary. The primary region is where the
                                  IoT hub is currently provisioned. The secondary region is the Azure
                                  disaster recovery (DR) paired region and also the region where the
                                  IoT hub can failover to. Known values are: "primary" and "secondary".
                            }
                        ],
                        "messagingEndpoints": {
                            "str": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                            }
                        },
                        "minTlsVersion": "str",  # Optional. Specifies the minimum TLS
                          version to support for this hub. Can be set to "1.2" to have clients that use
                          a TLS version below 1.2 to be rejected.
                        "networkRuleSets": {
                            "applyToBuiltInEventHubEndpoint": bool,  # If True, then
                              Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub.
                              Required.
                            "defaultAction": "Deny",  # Optional. Default value is
                              "Deny". Default Action for Network Rule Set. Known values are: "Deny" and
                              "Allow".
                            "ipRules": [
                                {
                                    "action": "Allow",  # Optional. Default value
                                      is "Allow". IP Filter Action. "Allow"
                                    "filterName": "str",  # Name of the IP filter
                                      rule. Required.
                                    "ipMask": "str"  # A string that contains the
                                      IP address range in CIDR notation for the rule. Required.
                                }
                            ]
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",  # Optional. The resource identifier.
                                "name": "str",  # Optional. The resource name.
                                "properties": {
                                    "privateEndpoint": {
                                        "id": "str"  # Optional. The resource
                                          identifier.
                                    },
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",  #
                                          Optional. Actions required for a private endpoint connection.
                                        "description": "str",  # The
                                          description for the current state of a private endpoint
                                          connection. Required.
                                        "status": "str"  # The status of a
                                          private endpoint connection. Required. Known values are:
                                          "Pending", "Approved", "Rejected", and "Disconnected".
                                    }
                                },
                                "type": "str"  # Optional. The resource type.
                            }
                        ],
                        "provisioningState": "str",  # Optional. The provisioning state.
                        "publicNetworkAccess": "str",  # Optional. Whether requests from
                          Public Network are allowed. Known values are: "Enabled" and "Disabled".
                        "restrictOutboundNetworkAccess": bool,  # Optional. If true, egress
                          from IotHub will be restricted to only the allowed FQDNs that are configured
                          via allowedFqdnList.
                        "rootCertificate": {
                            "enableRootCertificateV2": bool,  # Optional. This property
                              when set to true, hub will use G2 cert; while it's set to false, hub uses
                              Baltimore Cert.
                            "lastUpdatedTimeUtc": "2020-02-20 00:00:00"  # Optional. the
                              last update time to root certificate flag.
                        },
                        "routing": {
                            "endpoints": {
                                "cosmosDBSqlCollections": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the cosmos DB
                                          sql collection endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "collectionName": "str",  # The name
                                          of the cosmos DB sql collection in the cosmos DB database.
                                          Required.
                                        "databaseName": "str",  # The name of
                                          the cosmos DB database in the cosmos DB account. Required.
                                        "endpointUri": "str",  # The url of
                                          the cosmos DB account. It must include the protocol https://.
                                          Required.
                                        "id": "str",  # Optional. Id of the
                                          cosmos DB sql collection endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "partitionKeyName": "str",  #
                                          Optional. The name of the partition key associated with this
                                          cosmos DB sql collection if one exists. This is an optional
                                          parameter.
                                        "partitionKeyTemplate": "str",  #
                                          Optional. The template for generating a synthetic partition
                                          key value for use with this cosmos DB sql collection. The
                                          template must include at least one of the following
                                          placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}.
                                          Any one placeholder may be specified at most once, but order
                                          and non-placeholder components are arbitrary. This parameter
                                          is only required if PartitionKeyName is specified.
                                        "primaryKey": "str",  # Optional. The
                                          primary key of the cosmos DB account.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the cosmos DB account.
                                        "secondaryKey": "str",  # Optional.
                                          The secondary key of the cosmos DB account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the cosmos DB account.
                                    }
                                ],
                                "eventHubs": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the event hub
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the event hub endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the event hub endpoint. It must include the
                                          protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Event hub name on the event hub namespace.
                                        "id": "str",  # Optional. Id of the
                                          event hub endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the event hub endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the event hub endpoint.
                                    }
                                ],
                                "serviceBusQueues": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          queue endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus queue
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus queue endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus namespace.
                                        "id": "str",  # Optional. Id of the
                                          service bus queue endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. The name need not
                                          be the same as the actual queue name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus queue
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus queue
                                          endpoint.
                                    }
                                ],
                                "serviceBusTopics": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          topic endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus topic
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus topic endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus topic.
                                        "id": "str",  # Optional. Id of the
                                          service bus topic endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types.  The name need
                                          not be the same as the actual topic name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus topic
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus topic
                                          endpoint.
                                    }
                                ],
                                "storageContainers": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the storage
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "batchFrequencyInSeconds": 0,  #
                                          Optional. Time interval at which blobs are written to
                                          storage. Value should be between 60 and 720 seconds. Default
                                          value is 300 seconds.
                                        "connectionString": "str",  #
                                          Optional. The connection string of the storage account.
                                        "containerName": "str",  # The name
                                          of storage container in the storage account. Required.
                                        "encoding": "str",  # Optional.
                                          Encoding that is used to serialize messages to blobs.
                                          Supported values are 'avro', 'avrodeflate', and 'JSON'.
                                          Default value is 'avro'. Known values are: "Avro",
                                          "AvroDeflate", and "JSON".
                                        "endpointUri": "str",  # Optional.
                                          The url of the storage endpoint. It must include the protocol
                                          https://.
                                        "fileNameFormat": "str",  # Optional.
                                          File name format for the blob. Default format is
                                          {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All
                                          parameters are mandatory but can be reordered.
                                        "id": "str",  # Optional. Id of the
                                          storage container endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "maxChunkSizeInBytes": 0,  #
                                          Optional. Maximum number of bytes for each blob written to
                                          storage. Value should be between 10485760(10MB) and
                                          524288000(500MB). Default value is 314572800(300MB).
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the storage account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the storage account.
                                    }
                                ]
                            },
                            "enrichments": [
                                {
                                    "endpointNames": [
                                        "str"  # The list of endpoints for
                                          which the enrichment is applied to the message. Required.
                                    ],
                                    "key": "str",  # The key or name for the
                                      enrichment property. Required.
                                    "value": "str"  # The value for the
                                      enrichment property. Required.
                                }
                            ],
                            "fallbackRoute": {
                                "condition": "str",  # Optional. The condition which
                                  is evaluated in order to apply the fallback route. If the condition
                                  is not provided it will evaluate to true by default. For grammar,
                                  See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which the
                                      messages that satisfy the condition are routed to. Currently only
                                      1 endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether the
                                  fallback route is enabled. Required.
                                "name": "str",  # Optional. The name of the route.
                                  The name can only include alphanumeric characters, periods,
                                  underscores, hyphens, has a maximum length of 64 characters, and must
                                  be unique.
                                "source": "str"  # The source to which the routing
                                  rule is to be applied to. For example, DeviceMessages. Required.
                                  Known values are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            },
                            "routes": [
                                {
                                    "condition": "str",  # Optional. The
                                      condition that is evaluated to apply the routing rule. If no
                                      condition is provided, it evaluates to true by default. For
                                      grammar, see:
                                      https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                    "endpointNames": [
                                        "str"  # The list of endpoints to
                                          which messages that satisfy the condition are routed.
                                          Currently only one endpoint is allowed. Required.
                                    ],
                                    "isEnabled": bool,  # Used to specify whether
                                      a route is enabled. Required.
                                    "name": "str",  # The name of the route. The
                                      name can only include alphanumeric characters, periods,
                                      underscores, hyphens, has a maximum length of 64 characters, and
                                      must be unique. Required.
                                    "source": "str"  # The source that the
                                      routing rule is to be applied to, such as DeviceMessages.
                                      Required. Known values are: "Invalid", "DeviceMessages",
                                      "TwinChangeEvents", "DeviceLifecycleEvents",
                                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                                }
                            ]
                        },
                        "state": "str",  # Optional. The hub state.
                        "storageEndpoints": {
                            "str": {
                                "authenticationType": "str",  # Optional. Specifies
                                  authentication type being used for connecting to the storage account.
                                  Known values are: "keyBased" and "identityBased".
                                "connectionString": "str",  # The connection string
                                  for the Azure Storage account to which files are uploaded. Required.
                                "containerName": "str",  # The name of the root
                                  container where you upload files. The container need not exist but
                                  should be creatable using the connectionString specified. Required.
                                "identity": {
                                    "userAssignedIdentity": "str"  # Optional.
                                      The user assigned identity.
                                },
                                "sasTtlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which the SAS URI generated by IoT Hub for file
                                  upload is valid. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
                            }
                        }
                    },
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """

    @overload
    def begin_create_or_update(
        self,
        resource_group_name: str,
        resource_name: str,
        iot_hub_description: IO,
        *,
        if_match: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create or update the metadata of an IoT hub.

        Create or update the metadata of an Iot hub. The usual pattern to modify a property is to
        retrieve the IoT hub metadata and security metadata, and then combine them with the modified
        values in a new body to update the IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param iot_hub_description: The IoT hub metadata and security metadata. Required.
        :type iot_hub_description: IO
        :keyword if_match: ETag of the IoT Hub. Do not specify for creating a brand new IoT Hub.
         Required to update an existing IoT Hub. Default value is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "etag": "str",  # Optional. The Etag field is *not* required. If it is
                      provided in the response body, it must also be provided as a header per the
                      normal ETag convention.
                    "id": "str",  # Optional. The resource identifier.
                    "identity": {
                        "principalId": "str",  # Optional. Principal Id.
                        "tenantId": "str",  # Optional. Tenant Id.
                        "type": "str",  # Optional. The type of identity used for the
                          resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
                          created identity and a set of user assigned identities. The type 'None' will
                          remove any identities from the service. Known values are: "SystemAssigned",
                          "UserAssigned", "SystemAssigned, UserAssigned", and "None".
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                                "principalId": "str"  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                            }
                        }
                    },
                    "location": "str",  # The resource location. Required.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "allowedFqdnList": [
                            "str"  # Optional. List of allowed FQDNs(Fully Qualified
                              Domain Name) for egress from Iot Hub.
                        ],
                        "authorizationPolicies": [
                            {
                                "keyName": "str",  # The name of the shared access
                                  policy. Required.
                                "primaryKey": "str",  # Optional. The primary key.
                                "rights": "str",  # The permissions assigned to the
                                  shared access policy. Required. Known values are: "RegistryRead",
                                  "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead,
                                  RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead,
                                  DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                                  DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead,
                                  RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite,
                                  DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect",
                                  "RegistryWrite, ServiceConnect, DeviceConnect", and "RegistryRead,
                                  RegistryWrite, ServiceConnect, DeviceConnect".
                                "secondaryKey": "str"  # Optional. The secondary key.
                            }
                        ],
                        "cloudToDevice": {
                            "defaultTtlAsIso8601": "1 day, 0:00:00",  # Optional. The
                              default time to live for cloud-to-device messages in the device queue.
                              See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            "feedback": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration for the feedback queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message on the feedback
                                  queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            },
                            "maxDeliveryCount": 0  # Optional. The max delivery count for
                              cloud-to-device messages in the device queue. See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                        },
                        "comments": "str",  # Optional. IoT hub comments.
                        "deviceStreams": {
                            "streamingEndpoints": [
                                "str"  # Optional. List of Device Streams Endpoints.
                            ]
                        },
                        "disableDeviceSAS": bool,  # Optional. If true, all device(including
                          Edge devices but excluding modules) scoped SAS keys cannot be used for
                          authentication.
                        "disableLocalAuth": bool,  # Optional. If true, SAS tokens with Iot
                          hub scoped SAS keys cannot be used for authentication.
                        "disableModuleSAS": bool,  # Optional. If true, all module scoped SAS
                          keys cannot be used for authentication.
                        "enableDataResidency": bool,  # Optional. This property when set to
                          true, will enable data residency, thus, disabling disaster recovery.
                        "enableFileUploadNotifications": bool,  # Optional. If True, file
                          upload notifications are enabled.
                        "encryption": {
                            "keySource": "str",  # Optional. The source of the key.
                            "keyVaultProperties": [
                                {
                                    "identity": {
                                        "userAssignedIdentity": "str"  #
                                          Optional. The user assigned identity.
                                    },
                                    "keyIdentifier": "str"  # Optional. The
                                      identifier of the key.
                                }
                            ]
                        },
                        "eventHubEndpoints": {
                            "str": {
                                "endpoint": "str",  # Optional. The Event
                                  Hub-compatible endpoint.
                                "partitionCount": 0,  # Optional. The number of
                                  partitions for receiving device-to-cloud messages in the Event
                                  Hub-compatible endpoint. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                                "partitionIds": [
                                    "str"  # Optional. The partition ids in the
                                      Event Hub-compatible endpoint.
                                ],
                                "path": "str",  # Optional. The Event Hub-compatible
                                  name.
                                "retentionTimeInDays": 0  # Optional. The retention
                                  time for device-to-cloud messages in days. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                            }
                        },
                        "features": "str",  # Optional. The capabilities and features enabled
                          for the IoT hub. Known values are: "None" and "DeviceManagement".
                        "hostName": "str",  # Optional. The name of the host.
                        "ipFilterRules": [
                            {
                                "action": "str",  # The desired action for requests
                                  captured by this rule. Required. Known values are: "Accept" and
                                  "Reject".
                                "filterName": "str",  # The name of the IP filter
                                  rule. Required.
                                "ipMask": "str"  # A string that contains the IP
                                  address range in CIDR notation for the rule. Required.
                            }
                        ],
                        "locations": [
                            {
                                "location": "str",  # Optional. The name of the Azure
                                  region.
                                "role": "str"  # Optional. The role of the region,
                                  can be either primary or secondary. The primary region is where the
                                  IoT hub is currently provisioned. The secondary region is the Azure
                                  disaster recovery (DR) paired region and also the region where the
                                  IoT hub can failover to. Known values are: "primary" and "secondary".
                            }
                        ],
                        "messagingEndpoints": {
                            "str": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                            }
                        },
                        "minTlsVersion": "str",  # Optional. Specifies the minimum TLS
                          version to support for this hub. Can be set to "1.2" to have clients that use
                          a TLS version below 1.2 to be rejected.
                        "networkRuleSets": {
                            "applyToBuiltInEventHubEndpoint": bool,  # If True, then
                              Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub.
                              Required.
                            "defaultAction": "Deny",  # Optional. Default value is
                              "Deny". Default Action for Network Rule Set. Known values are: "Deny" and
                              "Allow".
                            "ipRules": [
                                {
                                    "action": "Allow",  # Optional. Default value
                                      is "Allow". IP Filter Action. "Allow"
                                    "filterName": "str",  # Name of the IP filter
                                      rule. Required.
                                    "ipMask": "str"  # A string that contains the
                                      IP address range in CIDR notation for the rule. Required.
                                }
                            ]
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",  # Optional. The resource identifier.
                                "name": "str",  # Optional. The resource name.
                                "properties": {
                                    "privateEndpoint": {
                                        "id": "str"  # Optional. The resource
                                          identifier.
                                    },
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",  #
                                          Optional. Actions required for a private endpoint connection.
                                        "description": "str",  # The
                                          description for the current state of a private endpoint
                                          connection. Required.
                                        "status": "str"  # The status of a
                                          private endpoint connection. Required. Known values are:
                                          "Pending", "Approved", "Rejected", and "Disconnected".
                                    }
                                },
                                "type": "str"  # Optional. The resource type.
                            }
                        ],
                        "provisioningState": "str",  # Optional. The provisioning state.
                        "publicNetworkAccess": "str",  # Optional. Whether requests from
                          Public Network are allowed. Known values are: "Enabled" and "Disabled".
                        "restrictOutboundNetworkAccess": bool,  # Optional. If true, egress
                          from IotHub will be restricted to only the allowed FQDNs that are configured
                          via allowedFqdnList.
                        "rootCertificate": {
                            "enableRootCertificateV2": bool,  # Optional. This property
                              when set to true, hub will use G2 cert; while it's set to false, hub uses
                              Baltimore Cert.
                            "lastUpdatedTimeUtc": "2020-02-20 00:00:00"  # Optional. the
                              last update time to root certificate flag.
                        },
                        "routing": {
                            "endpoints": {
                                "cosmosDBSqlCollections": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the cosmos DB
                                          sql collection endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "collectionName": "str",  # The name
                                          of the cosmos DB sql collection in the cosmos DB database.
                                          Required.
                                        "databaseName": "str",  # The name of
                                          the cosmos DB database in the cosmos DB account. Required.
                                        "endpointUri": "str",  # The url of
                                          the cosmos DB account. It must include the protocol https://.
                                          Required.
                                        "id": "str",  # Optional. Id of the
                                          cosmos DB sql collection endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "partitionKeyName": "str",  #
                                          Optional. The name of the partition key associated with this
                                          cosmos DB sql collection if one exists. This is an optional
                                          parameter.
                                        "partitionKeyTemplate": "str",  #
                                          Optional. The template for generating a synthetic partition
                                          key value for use with this cosmos DB sql collection. The
                                          template must include at least one of the following
                                          placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}.
                                          Any one placeholder may be specified at most once, but order
                                          and non-placeholder components are arbitrary. This parameter
                                          is only required if PartitionKeyName is specified.
                                        "primaryKey": "str",  # Optional. The
                                          primary key of the cosmos DB account.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the cosmos DB account.
                                        "secondaryKey": "str",  # Optional.
                                          The secondary key of the cosmos DB account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the cosmos DB account.
                                    }
                                ],
                                "eventHubs": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the event hub
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the event hub endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the event hub endpoint. It must include the
                                          protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Event hub name on the event hub namespace.
                                        "id": "str",  # Optional. Id of the
                                          event hub endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the event hub endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the event hub endpoint.
                                    }
                                ],
                                "serviceBusQueues": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          queue endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus queue
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus queue endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus namespace.
                                        "id": "str",  # Optional. Id of the
                                          service bus queue endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. The name need not
                                          be the same as the actual queue name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus queue
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus queue
                                          endpoint.
                                    }
                                ],
                                "serviceBusTopics": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          topic endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus topic
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus topic endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus topic.
                                        "id": "str",  # Optional. Id of the
                                          service bus topic endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types.  The name need
                                          not be the same as the actual topic name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus topic
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus topic
                                          endpoint.
                                    }
                                ],
                                "storageContainers": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the storage
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "batchFrequencyInSeconds": 0,  #
                                          Optional. Time interval at which blobs are written to
                                          storage. Value should be between 60 and 720 seconds. Default
                                          value is 300 seconds.
                                        "connectionString": "str",  #
                                          Optional. The connection string of the storage account.
                                        "containerName": "str",  # The name
                                          of storage container in the storage account. Required.
                                        "encoding": "str",  # Optional.
                                          Encoding that is used to serialize messages to blobs.
                                          Supported values are 'avro', 'avrodeflate', and 'JSON'.
                                          Default value is 'avro'. Known values are: "Avro",
                                          "AvroDeflate", and "JSON".
                                        "endpointUri": "str",  # Optional.
                                          The url of the storage endpoint. It must include the protocol
                                          https://.
                                        "fileNameFormat": "str",  # Optional.
                                          File name format for the blob. Default format is
                                          {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All
                                          parameters are mandatory but can be reordered.
                                        "id": "str",  # Optional. Id of the
                                          storage container endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "maxChunkSizeInBytes": 0,  #
                                          Optional. Maximum number of bytes for each blob written to
                                          storage. Value should be between 10485760(10MB) and
                                          524288000(500MB). Default value is 314572800(300MB).
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the storage account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the storage account.
                                    }
                                ]
                            },
                            "enrichments": [
                                {
                                    "endpointNames": [
                                        "str"  # The list of endpoints for
                                          which the enrichment is applied to the message. Required.
                                    ],
                                    "key": "str",  # The key or name for the
                                      enrichment property. Required.
                                    "value": "str"  # The value for the
                                      enrichment property. Required.
                                }
                            ],
                            "fallbackRoute": {
                                "condition": "str",  # Optional. The condition which
                                  is evaluated in order to apply the fallback route. If the condition
                                  is not provided it will evaluate to true by default. For grammar,
                                  See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which the
                                      messages that satisfy the condition are routed to. Currently only
                                      1 endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether the
                                  fallback route is enabled. Required.
                                "name": "str",  # Optional. The name of the route.
                                  The name can only include alphanumeric characters, periods,
                                  underscores, hyphens, has a maximum length of 64 characters, and must
                                  be unique.
                                "source": "str"  # The source to which the routing
                                  rule is to be applied to. For example, DeviceMessages. Required.
                                  Known values are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            },
                            "routes": [
                                {
                                    "condition": "str",  # Optional. The
                                      condition that is evaluated to apply the routing rule. If no
                                      condition is provided, it evaluates to true by default. For
                                      grammar, see:
                                      https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                    "endpointNames": [
                                        "str"  # The list of endpoints to
                                          which messages that satisfy the condition are routed.
                                          Currently only one endpoint is allowed. Required.
                                    ],
                                    "isEnabled": bool,  # Used to specify whether
                                      a route is enabled. Required.
                                    "name": "str",  # The name of the route. The
                                      name can only include alphanumeric characters, periods,
                                      underscores, hyphens, has a maximum length of 64 characters, and
                                      must be unique. Required.
                                    "source": "str"  # The source that the
                                      routing rule is to be applied to, such as DeviceMessages.
                                      Required. Known values are: "Invalid", "DeviceMessages",
                                      "TwinChangeEvents", "DeviceLifecycleEvents",
                                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                                }
                            ]
                        },
                        "state": "str",  # Optional. The hub state.
                        "storageEndpoints": {
                            "str": {
                                "authenticationType": "str",  # Optional. Specifies
                                  authentication type being used for connecting to the storage account.
                                  Known values are: "keyBased" and "identityBased".
                                "connectionString": "str",  # The connection string
                                  for the Azure Storage account to which files are uploaded. Required.
                                "containerName": "str",  # The name of the root
                                  container where you upload files. The container need not exist but
                                  should be creatable using the connectionString specified. Required.
                                "identity": {
                                    "userAssignedIdentity": "str"  # Optional.
                                      The user assigned identity.
                                },
                                "sasTtlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which the SAS URI generated by IoT Hub for file
                                  upload is valid. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
                            }
                        }
                    },
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """

    @distributed_trace
    def begin_create_or_update(
        self,
        resource_group_name: str,
        resource_name: str,
        iot_hub_description: Union[JSON, IO],
        *,
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create or update the metadata of an IoT hub.

        Create or update the metadata of an Iot hub. The usual pattern to modify a property is to
        retrieve the IoT hub metadata and security metadata, and then combine them with the modified
        values in a new body to update the IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param iot_hub_description: The IoT hub metadata and security metadata. Is either a model type
         or a IO type. Required.
        :type iot_hub_description: JSON or IO
        :keyword if_match: ETag of the IoT Hub. Do not specify for creating a brand new IoT Hub.
         Required to update an existing IoT Hub. Default value is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "etag": "str",  # Optional. The Etag field is *not* required. If it is
                      provided in the response body, it must also be provided as a header per the
                      normal ETag convention.
                    "id": "str",  # Optional. The resource identifier.
                    "identity": {
                        "principalId": "str",  # Optional. Principal Id.
                        "tenantId": "str",  # Optional. Tenant Id.
                        "type": "str",  # Optional. The type of identity used for the
                          resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
                          created identity and a set of user assigned identities. The type 'None' will
                          remove any identities from the service. Known values are: "SystemAssigned",
                          "UserAssigned", "SystemAssigned, UserAssigned", and "None".
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                                "principalId": "str"  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                            }
                        }
                    },
                    "location": "str",  # The resource location. Required.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "allowedFqdnList": [
                            "str"  # Optional. List of allowed FQDNs(Fully Qualified
                              Domain Name) for egress from Iot Hub.
                        ],
                        "authorizationPolicies": [
                            {
                                "keyName": "str",  # The name of the shared access
                                  policy. Required.
                                "primaryKey": "str",  # Optional. The primary key.
                                "rights": "str",  # The permissions assigned to the
                                  shared access policy. Required. Known values are: "RegistryRead",
                                  "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead,
                                  RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead,
                                  DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                                  DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead,
                                  RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite,
                                  DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect",
                                  "RegistryWrite, ServiceConnect, DeviceConnect", and "RegistryRead,
                                  RegistryWrite, ServiceConnect, DeviceConnect".
                                "secondaryKey": "str"  # Optional. The secondary key.
                            }
                        ],
                        "cloudToDevice": {
                            "defaultTtlAsIso8601": "1 day, 0:00:00",  # Optional. The
                              default time to live for cloud-to-device messages in the device queue.
                              See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            "feedback": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration for the feedback queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message on the feedback
                                  queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            },
                            "maxDeliveryCount": 0  # Optional. The max delivery count for
                              cloud-to-device messages in the device queue. See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                        },
                        "comments": "str",  # Optional. IoT hub comments.
                        "deviceStreams": {
                            "streamingEndpoints": [
                                "str"  # Optional. List of Device Streams Endpoints.
                            ]
                        },
                        "disableDeviceSAS": bool,  # Optional. If true, all device(including
                          Edge devices but excluding modules) scoped SAS keys cannot be used for
                          authentication.
                        "disableLocalAuth": bool,  # Optional. If true, SAS tokens with Iot
                          hub scoped SAS keys cannot be used for authentication.
                        "disableModuleSAS": bool,  # Optional. If true, all module scoped SAS
                          keys cannot be used for authentication.
                        "enableDataResidency": bool,  # Optional. This property when set to
                          true, will enable data residency, thus, disabling disaster recovery.
                        "enableFileUploadNotifications": bool,  # Optional. If True, file
                          upload notifications are enabled.
                        "encryption": {
                            "keySource": "str",  # Optional. The source of the key.
                            "keyVaultProperties": [
                                {
                                    "identity": {
                                        "userAssignedIdentity": "str"  #
                                          Optional. The user assigned identity.
                                    },
                                    "keyIdentifier": "str"  # Optional. The
                                      identifier of the key.
                                }
                            ]
                        },
                        "eventHubEndpoints": {
                            "str": {
                                "endpoint": "str",  # Optional. The Event
                                  Hub-compatible endpoint.
                                "partitionCount": 0,  # Optional. The number of
                                  partitions for receiving device-to-cloud messages in the Event
                                  Hub-compatible endpoint. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                                "partitionIds": [
                                    "str"  # Optional. The partition ids in the
                                      Event Hub-compatible endpoint.
                                ],
                                "path": "str",  # Optional. The Event Hub-compatible
                                  name.
                                "retentionTimeInDays": 0  # Optional. The retention
                                  time for device-to-cloud messages in days. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                            }
                        },
                        "features": "str",  # Optional. The capabilities and features enabled
                          for the IoT hub. Known values are: "None" and "DeviceManagement".
                        "hostName": "str",  # Optional. The name of the host.
                        "ipFilterRules": [
                            {
                                "action": "str",  # The desired action for requests
                                  captured by this rule. Required. Known values are: "Accept" and
                                  "Reject".
                                "filterName": "str",  # The name of the IP filter
                                  rule. Required.
                                "ipMask": "str"  # A string that contains the IP
                                  address range in CIDR notation for the rule. Required.
                            }
                        ],
                        "locations": [
                            {
                                "location": "str",  # Optional. The name of the Azure
                                  region.
                                "role": "str"  # Optional. The role of the region,
                                  can be either primary or secondary. The primary region is where the
                                  IoT hub is currently provisioned. The secondary region is the Azure
                                  disaster recovery (DR) paired region and also the region where the
                                  IoT hub can failover to. Known values are: "primary" and "secondary".
                            }
                        ],
                        "messagingEndpoints": {
                            "str": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                            }
                        },
                        "minTlsVersion": "str",  # Optional. Specifies the minimum TLS
                          version to support for this hub. Can be set to "1.2" to have clients that use
                          a TLS version below 1.2 to be rejected.
                        "networkRuleSets": {
                            "applyToBuiltInEventHubEndpoint": bool,  # If True, then
                              Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub.
                              Required.
                            "defaultAction": "Deny",  # Optional. Default value is
                              "Deny". Default Action for Network Rule Set. Known values are: "Deny" and
                              "Allow".
                            "ipRules": [
                                {
                                    "action": "Allow",  # Optional. Default value
                                      is "Allow". IP Filter Action. "Allow"
                                    "filterName": "str",  # Name of the IP filter
                                      rule. Required.
                                    "ipMask": "str"  # A string that contains the
                                      IP address range in CIDR notation for the rule. Required.
                                }
                            ]
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",  # Optional. The resource identifier.
                                "name": "str",  # Optional. The resource name.
                                "properties": {
                                    "privateEndpoint": {
                                        "id": "str"  # Optional. The resource
                                          identifier.
                                    },
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",  #
                                          Optional. Actions required for a private endpoint connection.
                                        "description": "str",  # The
                                          description for the current state of a private endpoint
                                          connection. Required.
                                        "status": "str"  # The status of a
                                          private endpoint connection. Required. Known values are:
                                          "Pending", "Approved", "Rejected", and "Disconnected".
                                    }
                                },
                                "type": "str"  # Optional. The resource type.
                            }
                        ],
                        "provisioningState": "str",  # Optional. The provisioning state.
                        "publicNetworkAccess": "str",  # Optional. Whether requests from
                          Public Network are allowed. Known values are: "Enabled" and "Disabled".
                        "restrictOutboundNetworkAccess": bool,  # Optional. If true, egress
                          from IotHub will be restricted to only the allowed FQDNs that are configured
                          via allowedFqdnList.
                        "rootCertificate": {
                            "enableRootCertificateV2": bool,  # Optional. This property
                              when set to true, hub will use G2 cert; while it's set to false, hub uses
                              Baltimore Cert.
                            "lastUpdatedTimeUtc": "2020-02-20 00:00:00"  # Optional. the
                              last update time to root certificate flag.
                        },
                        "routing": {
                            "endpoints": {
                                "cosmosDBSqlCollections": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the cosmos DB
                                          sql collection endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "collectionName": "str",  # The name
                                          of the cosmos DB sql collection in the cosmos DB database.
                                          Required.
                                        "databaseName": "str",  # The name of
                                          the cosmos DB database in the cosmos DB account. Required.
                                        "endpointUri": "str",  # The url of
                                          the cosmos DB account. It must include the protocol https://.
                                          Required.
                                        "id": "str",  # Optional. Id of the
                                          cosmos DB sql collection endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "partitionKeyName": "str",  #
                                          Optional. The name of the partition key associated with this
                                          cosmos DB sql collection if one exists. This is an optional
                                          parameter.
                                        "partitionKeyTemplate": "str",  #
                                          Optional. The template for generating a synthetic partition
                                          key value for use with this cosmos DB sql collection. The
                                          template must include at least one of the following
                                          placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}.
                                          Any one placeholder may be specified at most once, but order
                                          and non-placeholder components are arbitrary. This parameter
                                          is only required if PartitionKeyName is specified.
                                        "primaryKey": "str",  # Optional. The
                                          primary key of the cosmos DB account.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the cosmos DB account.
                                        "secondaryKey": "str",  # Optional.
                                          The secondary key of the cosmos DB account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the cosmos DB account.
                                    }
                                ],
                                "eventHubs": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the event hub
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the event hub endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the event hub endpoint. It must include the
                                          protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Event hub name on the event hub namespace.
                                        "id": "str",  # Optional. Id of the
                                          event hub endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the event hub endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the event hub endpoint.
                                    }
                                ],
                                "serviceBusQueues": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          queue endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus queue
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus queue endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus namespace.
                                        "id": "str",  # Optional. Id of the
                                          service bus queue endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. The name need not
                                          be the same as the actual queue name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus queue
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus queue
                                          endpoint.
                                    }
                                ],
                                "serviceBusTopics": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          topic endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus topic
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus topic endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus topic.
                                        "id": "str",  # Optional. Id of the
                                          service bus topic endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types.  The name need
                                          not be the same as the actual topic name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus topic
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus topic
                                          endpoint.
                                    }
                                ],
                                "storageContainers": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the storage
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "batchFrequencyInSeconds": 0,  #
                                          Optional. Time interval at which blobs are written to
                                          storage. Value should be between 60 and 720 seconds. Default
                                          value is 300 seconds.
                                        "connectionString": "str",  #
                                          Optional. The connection string of the storage account.
                                        "containerName": "str",  # The name
                                          of storage container in the storage account. Required.
                                        "encoding": "str",  # Optional.
                                          Encoding that is used to serialize messages to blobs.
                                          Supported values are 'avro', 'avrodeflate', and 'JSON'.
                                          Default value is 'avro'. Known values are: "Avro",
                                          "AvroDeflate", and "JSON".
                                        "endpointUri": "str",  # Optional.
                                          The url of the storage endpoint. It must include the protocol
                                          https://.
                                        "fileNameFormat": "str",  # Optional.
                                          File name format for the blob. Default format is
                                          {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All
                                          parameters are mandatory but can be reordered.
                                        "id": "str",  # Optional. Id of the
                                          storage container endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "maxChunkSizeInBytes": 0,  #
                                          Optional. Maximum number of bytes for each blob written to
                                          storage. Value should be between 10485760(10MB) and
                                          524288000(500MB). Default value is 314572800(300MB).
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the storage account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the storage account.
                                    }
                                ]
                            },
                            "enrichments": [
                                {
                                    "endpointNames": [
                                        "str"  # The list of endpoints for
                                          which the enrichment is applied to the message. Required.
                                    ],
                                    "key": "str",  # The key or name for the
                                      enrichment property. Required.
                                    "value": "str"  # The value for the
                                      enrichment property. Required.
                                }
                            ],
                            "fallbackRoute": {
                                "condition": "str",  # Optional. The condition which
                                  is evaluated in order to apply the fallback route. If the condition
                                  is not provided it will evaluate to true by default. For grammar,
                                  See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which the
                                      messages that satisfy the condition are routed to. Currently only
                                      1 endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether the
                                  fallback route is enabled. Required.
                                "name": "str",  # Optional. The name of the route.
                                  The name can only include alphanumeric characters, periods,
                                  underscores, hyphens, has a maximum length of 64 characters, and must
                                  be unique.
                                "source": "str"  # The source to which the routing
                                  rule is to be applied to. For example, DeviceMessages. Required.
                                  Known values are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            },
                            "routes": [
                                {
                                    "condition": "str",  # Optional. The
                                      condition that is evaluated to apply the routing rule. If no
                                      condition is provided, it evaluates to true by default. For
                                      grammar, see:
                                      https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                    "endpointNames": [
                                        "str"  # The list of endpoints to
                                          which messages that satisfy the condition are routed.
                                          Currently only one endpoint is allowed. Required.
                                    ],
                                    "isEnabled": bool,  # Used to specify whether
                                      a route is enabled. Required.
                                    "name": "str",  # The name of the route. The
                                      name can only include alphanumeric characters, periods,
                                      underscores, hyphens, has a maximum length of 64 characters, and
                                      must be unique. Required.
                                    "source": "str"  # The source that the
                                      routing rule is to be applied to, such as DeviceMessages.
                                      Required. Known values are: "Invalid", "DeviceMessages",
                                      "TwinChangeEvents", "DeviceLifecycleEvents",
                                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                                }
                            ]
                        },
                        "state": "str",  # Optional. The hub state.
                        "storageEndpoints": {
                            "str": {
                                "authenticationType": "str",  # Optional. Specifies
                                  authentication type being used for connecting to the storage account.
                                  Known values are: "keyBased" and "identityBased".
                                "connectionString": "str",  # The connection string
                                  for the Azure Storage account to which files are uploaded. Required.
                                "containerName": "str",  # The name of the root
                                  container where you upload files. The container need not exist but
                                  should be creatable using the connectionString specified. Required.
                                "identity": {
                                    "userAssignedIdentity": "str"  # Optional.
                                      The user assigned identity.
                                },
                                "sasTtlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which the SAS URI generated by IoT Hub for file
                                  upload is valid. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
                            }
                        }
                    },
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]
        polling = kwargs.pop("polling", True)  # type: Union[bool, PollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._create_or_update_initial(  # type: ignore
                resource_group_name=resource_group_name,
                resource_name=resource_name,
                iot_hub_description=iot_hub_description,
                if_match=if_match,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True:
            polling_method = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))  # type: PollingMethod
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)

    def _update_initial(
        self, resource_group_name: str, resource_name: str, iot_hub_tags: Union[JSON, IO], **kwargs: Any
    ) -> JSON:
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(iot_hub_tags, (IO, bytes)):
            _content = iot_hub_tags
        else:
            _json = iot_hub_tags

        request = build_iot_hub_resource_update_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        resource_name: str,
        iot_hub_tags: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update an existing IoT Hubs tags.

        Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method.

        :param resource_group_name: Resource group identifier. Required.
        :type resource_group_name: str
        :param resource_name: Name of iot hub to update. Required.
        :type resource_name: str
        :param iot_hub_tags: Updated tag information to set into the iot hub instance. Required.
        :type iot_hub_tags: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                iot_hub_tags = {
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The Etag field is *not* required. If it is
                      provided in the response body, it must also be provided as a header per the
                      normal ETag convention.
                    "id": "str",  # Optional. The resource identifier.
                    "identity": {
                        "principalId": "str",  # Optional. Principal Id.
                        "tenantId": "str",  # Optional. Tenant Id.
                        "type": "str",  # Optional. The type of identity used for the
                          resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
                          created identity and a set of user assigned identities. The type 'None' will
                          remove any identities from the service. Known values are: "SystemAssigned",
                          "UserAssigned", "SystemAssigned, UserAssigned", and "None".
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                                "principalId": "str"  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                            }
                        }
                    },
                    "location": "str",  # The resource location. Required.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "allowedFqdnList": [
                            "str"  # Optional. List of allowed FQDNs(Fully Qualified
                              Domain Name) for egress from Iot Hub.
                        ],
                        "authorizationPolicies": [
                            {
                                "keyName": "str",  # The name of the shared access
                                  policy. Required.
                                "primaryKey": "str",  # Optional. The primary key.
                                "rights": "str",  # The permissions assigned to the
                                  shared access policy. Required. Known values are: "RegistryRead",
                                  "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead,
                                  RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead,
                                  DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                                  DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead,
                                  RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite,
                                  DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect",
                                  "RegistryWrite, ServiceConnect, DeviceConnect", and "RegistryRead,
                                  RegistryWrite, ServiceConnect, DeviceConnect".
                                "secondaryKey": "str"  # Optional. The secondary key.
                            }
                        ],
                        "cloudToDevice": {
                            "defaultTtlAsIso8601": "1 day, 0:00:00",  # Optional. The
                              default time to live for cloud-to-device messages in the device queue.
                              See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            "feedback": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration for the feedback queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message on the feedback
                                  queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            },
                            "maxDeliveryCount": 0  # Optional. The max delivery count for
                              cloud-to-device messages in the device queue. See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                        },
                        "comments": "str",  # Optional. IoT hub comments.
                        "deviceStreams": {
                            "streamingEndpoints": [
                                "str"  # Optional. List of Device Streams Endpoints.
                            ]
                        },
                        "disableDeviceSAS": bool,  # Optional. If true, all device(including
                          Edge devices but excluding modules) scoped SAS keys cannot be used for
                          authentication.
                        "disableLocalAuth": bool,  # Optional. If true, SAS tokens with Iot
                          hub scoped SAS keys cannot be used for authentication.
                        "disableModuleSAS": bool,  # Optional. If true, all module scoped SAS
                          keys cannot be used for authentication.
                        "enableDataResidency": bool,  # Optional. This property when set to
                          true, will enable data residency, thus, disabling disaster recovery.
                        "enableFileUploadNotifications": bool,  # Optional. If True, file
                          upload notifications are enabled.
                        "encryption": {
                            "keySource": "str",  # Optional. The source of the key.
                            "keyVaultProperties": [
                                {
                                    "identity": {
                                        "userAssignedIdentity": "str"  #
                                          Optional. The user assigned identity.
                                    },
                                    "keyIdentifier": "str"  # Optional. The
                                      identifier of the key.
                                }
                            ]
                        },
                        "eventHubEndpoints": {
                            "str": {
                                "endpoint": "str",  # Optional. The Event
                                  Hub-compatible endpoint.
                                "partitionCount": 0,  # Optional. The number of
                                  partitions for receiving device-to-cloud messages in the Event
                                  Hub-compatible endpoint. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                                "partitionIds": [
                                    "str"  # Optional. The partition ids in the
                                      Event Hub-compatible endpoint.
                                ],
                                "path": "str",  # Optional. The Event Hub-compatible
                                  name.
                                "retentionTimeInDays": 0  # Optional. The retention
                                  time for device-to-cloud messages in days. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                            }
                        },
                        "features": "str",  # Optional. The capabilities and features enabled
                          for the IoT hub. Known values are: "None" and "DeviceManagement".
                        "hostName": "str",  # Optional. The name of the host.
                        "ipFilterRules": [
                            {
                                "action": "str",  # The desired action for requests
                                  captured by this rule. Required. Known values are: "Accept" and
                                  "Reject".
                                "filterName": "str",  # The name of the IP filter
                                  rule. Required.
                                "ipMask": "str"  # A string that contains the IP
                                  address range in CIDR notation for the rule. Required.
                            }
                        ],
                        "locations": [
                            {
                                "location": "str",  # Optional. The name of the Azure
                                  region.
                                "role": "str"  # Optional. The role of the region,
                                  can be either primary or secondary. The primary region is where the
                                  IoT hub is currently provisioned. The secondary region is the Azure
                                  disaster recovery (DR) paired region and also the region where the
                                  IoT hub can failover to. Known values are: "primary" and "secondary".
                            }
                        ],
                        "messagingEndpoints": {
                            "str": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                            }
                        },
                        "minTlsVersion": "str",  # Optional. Specifies the minimum TLS
                          version to support for this hub. Can be set to "1.2" to have clients that use
                          a TLS version below 1.2 to be rejected.
                        "networkRuleSets": {
                            "applyToBuiltInEventHubEndpoint": bool,  # If True, then
                              Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub.
                              Required.
                            "defaultAction": "Deny",  # Optional. Default value is
                              "Deny". Default Action for Network Rule Set. Known values are: "Deny" and
                              "Allow".
                            "ipRules": [
                                {
                                    "action": "Allow",  # Optional. Default value
                                      is "Allow". IP Filter Action. "Allow"
                                    "filterName": "str",  # Name of the IP filter
                                      rule. Required.
                                    "ipMask": "str"  # A string that contains the
                                      IP address range in CIDR notation for the rule. Required.
                                }
                            ]
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",  # Optional. The resource identifier.
                                "name": "str",  # Optional. The resource name.
                                "properties": {
                                    "privateEndpoint": {
                                        "id": "str"  # Optional. The resource
                                          identifier.
                                    },
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",  #
                                          Optional. Actions required for a private endpoint connection.
                                        "description": "str",  # The
                                          description for the current state of a private endpoint
                                          connection. Required.
                                        "status": "str"  # The status of a
                                          private endpoint connection. Required. Known values are:
                                          "Pending", "Approved", "Rejected", and "Disconnected".
                                    }
                                },
                                "type": "str"  # Optional. The resource type.
                            }
                        ],
                        "provisioningState": "str",  # Optional. The provisioning state.
                        "publicNetworkAccess": "str",  # Optional. Whether requests from
                          Public Network are allowed. Known values are: "Enabled" and "Disabled".
                        "restrictOutboundNetworkAccess": bool,  # Optional. If true, egress
                          from IotHub will be restricted to only the allowed FQDNs that are configured
                          via allowedFqdnList.
                        "rootCertificate": {
                            "enableRootCertificateV2": bool,  # Optional. This property
                              when set to true, hub will use G2 cert; while it's set to false, hub uses
                              Baltimore Cert.
                            "lastUpdatedTimeUtc": "2020-02-20 00:00:00"  # Optional. the
                              last update time to root certificate flag.
                        },
                        "routing": {
                            "endpoints": {
                                "cosmosDBSqlCollections": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the cosmos DB
                                          sql collection endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "collectionName": "str",  # The name
                                          of the cosmos DB sql collection in the cosmos DB database.
                                          Required.
                                        "databaseName": "str",  # The name of
                                          the cosmos DB database in the cosmos DB account. Required.
                                        "endpointUri": "str",  # The url of
                                          the cosmos DB account. It must include the protocol https://.
                                          Required.
                                        "id": "str",  # Optional. Id of the
                                          cosmos DB sql collection endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "partitionKeyName": "str",  #
                                          Optional. The name of the partition key associated with this
                                          cosmos DB sql collection if one exists. This is an optional
                                          parameter.
                                        "partitionKeyTemplate": "str",  #
                                          Optional. The template for generating a synthetic partition
                                          key value for use with this cosmos DB sql collection. The
                                          template must include at least one of the following
                                          placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}.
                                          Any one placeholder may be specified at most once, but order
                                          and non-placeholder components are arbitrary. This parameter
                                          is only required if PartitionKeyName is specified.
                                        "primaryKey": "str",  # Optional. The
                                          primary key of the cosmos DB account.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the cosmos DB account.
                                        "secondaryKey": "str",  # Optional.
                                          The secondary key of the cosmos DB account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the cosmos DB account.
                                    }
                                ],
                                "eventHubs": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the event hub
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the event hub endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the event hub endpoint. It must include the
                                          protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Event hub name on the event hub namespace.
                                        "id": "str",  # Optional. Id of the
                                          event hub endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the event hub endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the event hub endpoint.
                                    }
                                ],
                                "serviceBusQueues": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          queue endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus queue
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus queue endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus namespace.
                                        "id": "str",  # Optional. Id of the
                                          service bus queue endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. The name need not
                                          be the same as the actual queue name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus queue
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus queue
                                          endpoint.
                                    }
                                ],
                                "serviceBusTopics": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          topic endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus topic
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus topic endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus topic.
                                        "id": "str",  # Optional. Id of the
                                          service bus topic endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types.  The name need
                                          not be the same as the actual topic name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus topic
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus topic
                                          endpoint.
                                    }
                                ],
                                "storageContainers": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the storage
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "batchFrequencyInSeconds": 0,  #
                                          Optional. Time interval at which blobs are written to
                                          storage. Value should be between 60 and 720 seconds. Default
                                          value is 300 seconds.
                                        "connectionString": "str",  #
                                          Optional. The connection string of the storage account.
                                        "containerName": "str",  # The name
                                          of storage container in the storage account. Required.
                                        "encoding": "str",  # Optional.
                                          Encoding that is used to serialize messages to blobs.
                                          Supported values are 'avro', 'avrodeflate', and 'JSON'.
                                          Default value is 'avro'. Known values are: "Avro",
                                          "AvroDeflate", and "JSON".
                                        "endpointUri": "str",  # Optional.
                                          The url of the storage endpoint. It must include the protocol
                                          https://.
                                        "fileNameFormat": "str",  # Optional.
                                          File name format for the blob. Default format is
                                          {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All
                                          parameters are mandatory but can be reordered.
                                        "id": "str",  # Optional. Id of the
                                          storage container endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "maxChunkSizeInBytes": 0,  #
                                          Optional. Maximum number of bytes for each blob written to
                                          storage. Value should be between 10485760(10MB) and
                                          524288000(500MB). Default value is 314572800(300MB).
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the storage account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the storage account.
                                    }
                                ]
                            },
                            "enrichments": [
                                {
                                    "endpointNames": [
                                        "str"  # The list of endpoints for
                                          which the enrichment is applied to the message. Required.
                                    ],
                                    "key": "str",  # The key or name for the
                                      enrichment property. Required.
                                    "value": "str"  # The value for the
                                      enrichment property. Required.
                                }
                            ],
                            "fallbackRoute": {
                                "condition": "str",  # Optional. The condition which
                                  is evaluated in order to apply the fallback route. If the condition
                                  is not provided it will evaluate to true by default. For grammar,
                                  See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which the
                                      messages that satisfy the condition are routed to. Currently only
                                      1 endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether the
                                  fallback route is enabled. Required.
                                "name": "str",  # Optional. The name of the route.
                                  The name can only include alphanumeric characters, periods,
                                  underscores, hyphens, has a maximum length of 64 characters, and must
                                  be unique.
                                "source": "str"  # The source to which the routing
                                  rule is to be applied to. For example, DeviceMessages. Required.
                                  Known values are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            },
                            "routes": [
                                {
                                    "condition": "str",  # Optional. The
                                      condition that is evaluated to apply the routing rule. If no
                                      condition is provided, it evaluates to true by default. For
                                      grammar, see:
                                      https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                    "endpointNames": [
                                        "str"  # The list of endpoints to
                                          which messages that satisfy the condition are routed.
                                          Currently only one endpoint is allowed. Required.
                                    ],
                                    "isEnabled": bool,  # Used to specify whether
                                      a route is enabled. Required.
                                    "name": "str",  # The name of the route. The
                                      name can only include alphanumeric characters, periods,
                                      underscores, hyphens, has a maximum length of 64 characters, and
                                      must be unique. Required.
                                    "source": "str"  # The source that the
                                      routing rule is to be applied to, such as DeviceMessages.
                                      Required. Known values are: "Invalid", "DeviceMessages",
                                      "TwinChangeEvents", "DeviceLifecycleEvents",
                                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                                }
                            ]
                        },
                        "state": "str",  # Optional. The hub state.
                        "storageEndpoints": {
                            "str": {
                                "authenticationType": "str",  # Optional. Specifies
                                  authentication type being used for connecting to the storage account.
                                  Known values are: "keyBased" and "identityBased".
                                "connectionString": "str",  # The connection string
                                  for the Azure Storage account to which files are uploaded. Required.
                                "containerName": "str",  # The name of the root
                                  container where you upload files. The container need not exist but
                                  should be creatable using the connectionString specified. Required.
                                "identity": {
                                    "userAssignedIdentity": "str"  # Optional.
                                      The user assigned identity.
                                },
                                "sasTtlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which the SAS URI generated by IoT Hub for file
                                  upload is valid. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
                            }
                        }
                    },
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        resource_name: str,
        iot_hub_tags: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update an existing IoT Hubs tags.

        Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method.

        :param resource_group_name: Resource group identifier. Required.
        :type resource_group_name: str
        :param resource_name: Name of iot hub to update. Required.
        :type resource_name: str
        :param iot_hub_tags: Updated tag information to set into the iot hub instance. Required.
        :type iot_hub_tags: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The Etag field is *not* required. If it is
                      provided in the response body, it must also be provided as a header per the
                      normal ETag convention.
                    "id": "str",  # Optional. The resource identifier.
                    "identity": {
                        "principalId": "str",  # Optional. Principal Id.
                        "tenantId": "str",  # Optional. Tenant Id.
                        "type": "str",  # Optional. The type of identity used for the
                          resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
                          created identity and a set of user assigned identities. The type 'None' will
                          remove any identities from the service. Known values are: "SystemAssigned",
                          "UserAssigned", "SystemAssigned, UserAssigned", and "None".
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                                "principalId": "str"  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                            }
                        }
                    },
                    "location": "str",  # The resource location. Required.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "allowedFqdnList": [
                            "str"  # Optional. List of allowed FQDNs(Fully Qualified
                              Domain Name) for egress from Iot Hub.
                        ],
                        "authorizationPolicies": [
                            {
                                "keyName": "str",  # The name of the shared access
                                  policy. Required.
                                "primaryKey": "str",  # Optional. The primary key.
                                "rights": "str",  # The permissions assigned to the
                                  shared access policy. Required. Known values are: "RegistryRead",
                                  "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead,
                                  RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead,
                                  DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                                  DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead,
                                  RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite,
                                  DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect",
                                  "RegistryWrite, ServiceConnect, DeviceConnect", and "RegistryRead,
                                  RegistryWrite, ServiceConnect, DeviceConnect".
                                "secondaryKey": "str"  # Optional. The secondary key.
                            }
                        ],
                        "cloudToDevice": {
                            "defaultTtlAsIso8601": "1 day, 0:00:00",  # Optional. The
                              default time to live for cloud-to-device messages in the device queue.
                              See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            "feedback": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration for the feedback queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message on the feedback
                                  queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            },
                            "maxDeliveryCount": 0  # Optional. The max delivery count for
                              cloud-to-device messages in the device queue. See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                        },
                        "comments": "str",  # Optional. IoT hub comments.
                        "deviceStreams": {
                            "streamingEndpoints": [
                                "str"  # Optional. List of Device Streams Endpoints.
                            ]
                        },
                        "disableDeviceSAS": bool,  # Optional. If true, all device(including
                          Edge devices but excluding modules) scoped SAS keys cannot be used for
                          authentication.
                        "disableLocalAuth": bool,  # Optional. If true, SAS tokens with Iot
                          hub scoped SAS keys cannot be used for authentication.
                        "disableModuleSAS": bool,  # Optional. If true, all module scoped SAS
                          keys cannot be used for authentication.
                        "enableDataResidency": bool,  # Optional. This property when set to
                          true, will enable data residency, thus, disabling disaster recovery.
                        "enableFileUploadNotifications": bool,  # Optional. If True, file
                          upload notifications are enabled.
                        "encryption": {
                            "keySource": "str",  # Optional. The source of the key.
                            "keyVaultProperties": [
                                {
                                    "identity": {
                                        "userAssignedIdentity": "str"  #
                                          Optional. The user assigned identity.
                                    },
                                    "keyIdentifier": "str"  # Optional. The
                                      identifier of the key.
                                }
                            ]
                        },
                        "eventHubEndpoints": {
                            "str": {
                                "endpoint": "str",  # Optional. The Event
                                  Hub-compatible endpoint.
                                "partitionCount": 0,  # Optional. The number of
                                  partitions for receiving device-to-cloud messages in the Event
                                  Hub-compatible endpoint. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                                "partitionIds": [
                                    "str"  # Optional. The partition ids in the
                                      Event Hub-compatible endpoint.
                                ],
                                "path": "str",  # Optional. The Event Hub-compatible
                                  name.
                                "retentionTimeInDays": 0  # Optional. The retention
                                  time for device-to-cloud messages in days. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                            }
                        },
                        "features": "str",  # Optional. The capabilities and features enabled
                          for the IoT hub. Known values are: "None" and "DeviceManagement".
                        "hostName": "str",  # Optional. The name of the host.
                        "ipFilterRules": [
                            {
                                "action": "str",  # The desired action for requests
                                  captured by this rule. Required. Known values are: "Accept" and
                                  "Reject".
                                "filterName": "str",  # The name of the IP filter
                                  rule. Required.
                                "ipMask": "str"  # A string that contains the IP
                                  address range in CIDR notation for the rule. Required.
                            }
                        ],
                        "locations": [
                            {
                                "location": "str",  # Optional. The name of the Azure
                                  region.
                                "role": "str"  # Optional. The role of the region,
                                  can be either primary or secondary. The primary region is where the
                                  IoT hub is currently provisioned. The secondary region is the Azure
                                  disaster recovery (DR) paired region and also the region where the
                                  IoT hub can failover to. Known values are: "primary" and "secondary".
                            }
                        ],
                        "messagingEndpoints": {
                            "str": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                            }
                        },
                        "minTlsVersion": "str",  # Optional. Specifies the minimum TLS
                          version to support for this hub. Can be set to "1.2" to have clients that use
                          a TLS version below 1.2 to be rejected.
                        "networkRuleSets": {
                            "applyToBuiltInEventHubEndpoint": bool,  # If True, then
                              Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub.
                              Required.
                            "defaultAction": "Deny",  # Optional. Default value is
                              "Deny". Default Action for Network Rule Set. Known values are: "Deny" and
                              "Allow".
                            "ipRules": [
                                {
                                    "action": "Allow",  # Optional. Default value
                                      is "Allow". IP Filter Action. "Allow"
                                    "filterName": "str",  # Name of the IP filter
                                      rule. Required.
                                    "ipMask": "str"  # A string that contains the
                                      IP address range in CIDR notation for the rule. Required.
                                }
                            ]
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",  # Optional. The resource identifier.
                                "name": "str",  # Optional. The resource name.
                                "properties": {
                                    "privateEndpoint": {
                                        "id": "str"  # Optional. The resource
                                          identifier.
                                    },
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",  #
                                          Optional. Actions required for a private endpoint connection.
                                        "description": "str",  # The
                                          description for the current state of a private endpoint
                                          connection. Required.
                                        "status": "str"  # The status of a
                                          private endpoint connection. Required. Known values are:
                                          "Pending", "Approved", "Rejected", and "Disconnected".
                                    }
                                },
                                "type": "str"  # Optional. The resource type.
                            }
                        ],
                        "provisioningState": "str",  # Optional. The provisioning state.
                        "publicNetworkAccess": "str",  # Optional. Whether requests from
                          Public Network are allowed. Known values are: "Enabled" and "Disabled".
                        "restrictOutboundNetworkAccess": bool,  # Optional. If true, egress
                          from IotHub will be restricted to only the allowed FQDNs that are configured
                          via allowedFqdnList.
                        "rootCertificate": {
                            "enableRootCertificateV2": bool,  # Optional. This property
                              when set to true, hub will use G2 cert; while it's set to false, hub uses
                              Baltimore Cert.
                            "lastUpdatedTimeUtc": "2020-02-20 00:00:00"  # Optional. the
                              last update time to root certificate flag.
                        },
                        "routing": {
                            "endpoints": {
                                "cosmosDBSqlCollections": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the cosmos DB
                                          sql collection endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "collectionName": "str",  # The name
                                          of the cosmos DB sql collection in the cosmos DB database.
                                          Required.
                                        "databaseName": "str",  # The name of
                                          the cosmos DB database in the cosmos DB account. Required.
                                        "endpointUri": "str",  # The url of
                                          the cosmos DB account. It must include the protocol https://.
                                          Required.
                                        "id": "str",  # Optional. Id of the
                                          cosmos DB sql collection endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "partitionKeyName": "str",  #
                                          Optional. The name of the partition key associated with this
                                          cosmos DB sql collection if one exists. This is an optional
                                          parameter.
                                        "partitionKeyTemplate": "str",  #
                                          Optional. The template for generating a synthetic partition
                                          key value for use with this cosmos DB sql collection. The
                                          template must include at least one of the following
                                          placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}.
                                          Any one placeholder may be specified at most once, but order
                                          and non-placeholder components are arbitrary. This parameter
                                          is only required if PartitionKeyName is specified.
                                        "primaryKey": "str",  # Optional. The
                                          primary key of the cosmos DB account.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the cosmos DB account.
                                        "secondaryKey": "str",  # Optional.
                                          The secondary key of the cosmos DB account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the cosmos DB account.
                                    }
                                ],
                                "eventHubs": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the event hub
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the event hub endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the event hub endpoint. It must include the
                                          protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Event hub name on the event hub namespace.
                                        "id": "str",  # Optional. Id of the
                                          event hub endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the event hub endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the event hub endpoint.
                                    }
                                ],
                                "serviceBusQueues": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          queue endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus queue
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus queue endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus namespace.
                                        "id": "str",  # Optional. Id of the
                                          service bus queue endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. The name need not
                                          be the same as the actual queue name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus queue
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus queue
                                          endpoint.
                                    }
                                ],
                                "serviceBusTopics": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          topic endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus topic
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus topic endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus topic.
                                        "id": "str",  # Optional. Id of the
                                          service bus topic endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types.  The name need
                                          not be the same as the actual topic name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus topic
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus topic
                                          endpoint.
                                    }
                                ],
                                "storageContainers": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the storage
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "batchFrequencyInSeconds": 0,  #
                                          Optional. Time interval at which blobs are written to
                                          storage. Value should be between 60 and 720 seconds. Default
                                          value is 300 seconds.
                                        "connectionString": "str",  #
                                          Optional. The connection string of the storage account.
                                        "containerName": "str",  # The name
                                          of storage container in the storage account. Required.
                                        "encoding": "str",  # Optional.
                                          Encoding that is used to serialize messages to blobs.
                                          Supported values are 'avro', 'avrodeflate', and 'JSON'.
                                          Default value is 'avro'. Known values are: "Avro",
                                          "AvroDeflate", and "JSON".
                                        "endpointUri": "str",  # Optional.
                                          The url of the storage endpoint. It must include the protocol
                                          https://.
                                        "fileNameFormat": "str",  # Optional.
                                          File name format for the blob. Default format is
                                          {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All
                                          parameters are mandatory but can be reordered.
                                        "id": "str",  # Optional. Id of the
                                          storage container endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "maxChunkSizeInBytes": 0,  #
                                          Optional. Maximum number of bytes for each blob written to
                                          storage. Value should be between 10485760(10MB) and
                                          524288000(500MB). Default value is 314572800(300MB).
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the storage account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the storage account.
                                    }
                                ]
                            },
                            "enrichments": [
                                {
                                    "endpointNames": [
                                        "str"  # The list of endpoints for
                                          which the enrichment is applied to the message. Required.
                                    ],
                                    "key": "str",  # The key or name for the
                                      enrichment property. Required.
                                    "value": "str"  # The value for the
                                      enrichment property. Required.
                                }
                            ],
                            "fallbackRoute": {
                                "condition": "str",  # Optional. The condition which
                                  is evaluated in order to apply the fallback route. If the condition
                                  is not provided it will evaluate to true by default. For grammar,
                                  See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which the
                                      messages that satisfy the condition are routed to. Currently only
                                      1 endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether the
                                  fallback route is enabled. Required.
                                "name": "str",  # Optional. The name of the route.
                                  The name can only include alphanumeric characters, periods,
                                  underscores, hyphens, has a maximum length of 64 characters, and must
                                  be unique.
                                "source": "str"  # The source to which the routing
                                  rule is to be applied to. For example, DeviceMessages. Required.
                                  Known values are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            },
                            "routes": [
                                {
                                    "condition": "str",  # Optional. The
                                      condition that is evaluated to apply the routing rule. If no
                                      condition is provided, it evaluates to true by default. For
                                      grammar, see:
                                      https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                    "endpointNames": [
                                        "str"  # The list of endpoints to
                                          which messages that satisfy the condition are routed.
                                          Currently only one endpoint is allowed. Required.
                                    ],
                                    "isEnabled": bool,  # Used to specify whether
                                      a route is enabled. Required.
                                    "name": "str",  # The name of the route. The
                                      name can only include alphanumeric characters, periods,
                                      underscores, hyphens, has a maximum length of 64 characters, and
                                      must be unique. Required.
                                    "source": "str"  # The source that the
                                      routing rule is to be applied to, such as DeviceMessages.
                                      Required. Known values are: "Invalid", "DeviceMessages",
                                      "TwinChangeEvents", "DeviceLifecycleEvents",
                                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                                }
                            ]
                        },
                        "state": "str",  # Optional. The hub state.
                        "storageEndpoints": {
                            "str": {
                                "authenticationType": "str",  # Optional. Specifies
                                  authentication type being used for connecting to the storage account.
                                  Known values are: "keyBased" and "identityBased".
                                "connectionString": "str",  # The connection string
                                  for the Azure Storage account to which files are uploaded. Required.
                                "containerName": "str",  # The name of the root
                                  container where you upload files. The container need not exist but
                                  should be creatable using the connectionString specified. Required.
                                "identity": {
                                    "userAssignedIdentity": "str"  # Optional.
                                      The user assigned identity.
                                },
                                "sasTtlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which the SAS URI generated by IoT Hub for file
                                  upload is valid. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
                            }
                        }
                    },
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """

    @distributed_trace
    def begin_update(
        self, resource_group_name: str, resource_name: str, iot_hub_tags: Union[JSON, IO], **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update an existing IoT Hubs tags.

        Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method.

        :param resource_group_name: Resource group identifier. Required.
        :type resource_group_name: str
        :param resource_name: Name of iot hub to update. Required.
        :type resource_name: str
        :param iot_hub_tags: Updated tag information to set into the iot hub instance. Is either a
         model type or a IO type. Required.
        :type iot_hub_tags: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The Etag field is *not* required. If it is
                      provided in the response body, it must also be provided as a header per the
                      normal ETag convention.
                    "id": "str",  # Optional. The resource identifier.
                    "identity": {
                        "principalId": "str",  # Optional. Principal Id.
                        "tenantId": "str",  # Optional. Tenant Id.
                        "type": "str",  # Optional. The type of identity used for the
                          resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
                          created identity and a set of user assigned identities. The type 'None' will
                          remove any identities from the service. Known values are: "SystemAssigned",
                          "UserAssigned", "SystemAssigned, UserAssigned", and "None".
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                                "principalId": "str"  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                            }
                        }
                    },
                    "location": "str",  # The resource location. Required.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "allowedFqdnList": [
                            "str"  # Optional. List of allowed FQDNs(Fully Qualified
                              Domain Name) for egress from Iot Hub.
                        ],
                        "authorizationPolicies": [
                            {
                                "keyName": "str",  # The name of the shared access
                                  policy. Required.
                                "primaryKey": "str",  # Optional. The primary key.
                                "rights": "str",  # The permissions assigned to the
                                  shared access policy. Required. Known values are: "RegistryRead",
                                  "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead,
                                  RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead,
                                  DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                                  DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead,
                                  RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite,
                                  DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect",
                                  "RegistryWrite, ServiceConnect, DeviceConnect", and "RegistryRead,
                                  RegistryWrite, ServiceConnect, DeviceConnect".
                                "secondaryKey": "str"  # Optional. The secondary key.
                            }
                        ],
                        "cloudToDevice": {
                            "defaultTtlAsIso8601": "1 day, 0:00:00",  # Optional. The
                              default time to live for cloud-to-device messages in the device queue.
                              See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            "feedback": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration for the feedback queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message on the feedback
                                  queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            },
                            "maxDeliveryCount": 0  # Optional. The max delivery count for
                              cloud-to-device messages in the device queue. See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                        },
                        "comments": "str",  # Optional. IoT hub comments.
                        "deviceStreams": {
                            "streamingEndpoints": [
                                "str"  # Optional. List of Device Streams Endpoints.
                            ]
                        },
                        "disableDeviceSAS": bool,  # Optional. If true, all device(including
                          Edge devices but excluding modules) scoped SAS keys cannot be used for
                          authentication.
                        "disableLocalAuth": bool,  # Optional. If true, SAS tokens with Iot
                          hub scoped SAS keys cannot be used for authentication.
                        "disableModuleSAS": bool,  # Optional. If true, all module scoped SAS
                          keys cannot be used for authentication.
                        "enableDataResidency": bool,  # Optional. This property when set to
                          true, will enable data residency, thus, disabling disaster recovery.
                        "enableFileUploadNotifications": bool,  # Optional. If True, file
                          upload notifications are enabled.
                        "encryption": {
                            "keySource": "str",  # Optional. The source of the key.
                            "keyVaultProperties": [
                                {
                                    "identity": {
                                        "userAssignedIdentity": "str"  #
                                          Optional. The user assigned identity.
                                    },
                                    "keyIdentifier": "str"  # Optional. The
                                      identifier of the key.
                                }
                            ]
                        },
                        "eventHubEndpoints": {
                            "str": {
                                "endpoint": "str",  # Optional. The Event
                                  Hub-compatible endpoint.
                                "partitionCount": 0,  # Optional. The number of
                                  partitions for receiving device-to-cloud messages in the Event
                                  Hub-compatible endpoint. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                                "partitionIds": [
                                    "str"  # Optional. The partition ids in the
                                      Event Hub-compatible endpoint.
                                ],
                                "path": "str",  # Optional. The Event Hub-compatible
                                  name.
                                "retentionTimeInDays": 0  # Optional. The retention
                                  time for device-to-cloud messages in days. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                            }
                        },
                        "features": "str",  # Optional. The capabilities and features enabled
                          for the IoT hub. Known values are: "None" and "DeviceManagement".
                        "hostName": "str",  # Optional. The name of the host.
                        "ipFilterRules": [
                            {
                                "action": "str",  # The desired action for requests
                                  captured by this rule. Required. Known values are: "Accept" and
                                  "Reject".
                                "filterName": "str",  # The name of the IP filter
                                  rule. Required.
                                "ipMask": "str"  # A string that contains the IP
                                  address range in CIDR notation for the rule. Required.
                            }
                        ],
                        "locations": [
                            {
                                "location": "str",  # Optional. The name of the Azure
                                  region.
                                "role": "str"  # Optional. The role of the region,
                                  can be either primary or secondary. The primary region is where the
                                  IoT hub is currently provisioned. The secondary region is the Azure
                                  disaster recovery (DR) paired region and also the region where the
                                  IoT hub can failover to. Known values are: "primary" and "secondary".
                            }
                        ],
                        "messagingEndpoints": {
                            "str": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                            }
                        },
                        "minTlsVersion": "str",  # Optional. Specifies the minimum TLS
                          version to support for this hub. Can be set to "1.2" to have clients that use
                          a TLS version below 1.2 to be rejected.
                        "networkRuleSets": {
                            "applyToBuiltInEventHubEndpoint": bool,  # If True, then
                              Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub.
                              Required.
                            "defaultAction": "Deny",  # Optional. Default value is
                              "Deny". Default Action for Network Rule Set. Known values are: "Deny" and
                              "Allow".
                            "ipRules": [
                                {
                                    "action": "Allow",  # Optional. Default value
                                      is "Allow". IP Filter Action. "Allow"
                                    "filterName": "str",  # Name of the IP filter
                                      rule. Required.
                                    "ipMask": "str"  # A string that contains the
                                      IP address range in CIDR notation for the rule. Required.
                                }
                            ]
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",  # Optional. The resource identifier.
                                "name": "str",  # Optional. The resource name.
                                "properties": {
                                    "privateEndpoint": {
                                        "id": "str"  # Optional. The resource
                                          identifier.
                                    },
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",  #
                                          Optional. Actions required for a private endpoint connection.
                                        "description": "str",  # The
                                          description for the current state of a private endpoint
                                          connection. Required.
                                        "status": "str"  # The status of a
                                          private endpoint connection. Required. Known values are:
                                          "Pending", "Approved", "Rejected", and "Disconnected".
                                    }
                                },
                                "type": "str"  # Optional. The resource type.
                            }
                        ],
                        "provisioningState": "str",  # Optional. The provisioning state.
                        "publicNetworkAccess": "str",  # Optional. Whether requests from
                          Public Network are allowed. Known values are: "Enabled" and "Disabled".
                        "restrictOutboundNetworkAccess": bool,  # Optional. If true, egress
                          from IotHub will be restricted to only the allowed FQDNs that are configured
                          via allowedFqdnList.
                        "rootCertificate": {
                            "enableRootCertificateV2": bool,  # Optional. This property
                              when set to true, hub will use G2 cert; while it's set to false, hub uses
                              Baltimore Cert.
                            "lastUpdatedTimeUtc": "2020-02-20 00:00:00"  # Optional. the
                              last update time to root certificate flag.
                        },
                        "routing": {
                            "endpoints": {
                                "cosmosDBSqlCollections": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the cosmos DB
                                          sql collection endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "collectionName": "str",  # The name
                                          of the cosmos DB sql collection in the cosmos DB database.
                                          Required.
                                        "databaseName": "str",  # The name of
                                          the cosmos DB database in the cosmos DB account. Required.
                                        "endpointUri": "str",  # The url of
                                          the cosmos DB account. It must include the protocol https://.
                                          Required.
                                        "id": "str",  # Optional. Id of the
                                          cosmos DB sql collection endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "partitionKeyName": "str",  #
                                          Optional. The name of the partition key associated with this
                                          cosmos DB sql collection if one exists. This is an optional
                                          parameter.
                                        "partitionKeyTemplate": "str",  #
                                          Optional. The template for generating a synthetic partition
                                          key value for use with this cosmos DB sql collection. The
                                          template must include at least one of the following
                                          placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}.
                                          Any one placeholder may be specified at most once, but order
                                          and non-placeholder components are arbitrary. This parameter
                                          is only required if PartitionKeyName is specified.
                                        "primaryKey": "str",  # Optional. The
                                          primary key of the cosmos DB account.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the cosmos DB account.
                                        "secondaryKey": "str",  # Optional.
                                          The secondary key of the cosmos DB account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the cosmos DB account.
                                    }
                                ],
                                "eventHubs": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the event hub
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the event hub endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the event hub endpoint. It must include the
                                          protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Event hub name on the event hub namespace.
                                        "id": "str",  # Optional. Id of the
                                          event hub endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the event hub endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the event hub endpoint.
                                    }
                                ],
                                "serviceBusQueues": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          queue endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus queue
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus queue endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus namespace.
                                        "id": "str",  # Optional. Id of the
                                          service bus queue endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. The name need not
                                          be the same as the actual queue name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus queue
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus queue
                                          endpoint.
                                    }
                                ],
                                "serviceBusTopics": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          topic endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus topic
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus topic endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus topic.
                                        "id": "str",  # Optional. Id of the
                                          service bus topic endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types.  The name need
                                          not be the same as the actual topic name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus topic
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus topic
                                          endpoint.
                                    }
                                ],
                                "storageContainers": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the storage
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "batchFrequencyInSeconds": 0,  #
                                          Optional. Time interval at which blobs are written to
                                          storage. Value should be between 60 and 720 seconds. Default
                                          value is 300 seconds.
                                        "connectionString": "str",  #
                                          Optional. The connection string of the storage account.
                                        "containerName": "str",  # The name
                                          of storage container in the storage account. Required.
                                        "encoding": "str",  # Optional.
                                          Encoding that is used to serialize messages to blobs.
                                          Supported values are 'avro', 'avrodeflate', and 'JSON'.
                                          Default value is 'avro'. Known values are: "Avro",
                                          "AvroDeflate", and "JSON".
                                        "endpointUri": "str",  # Optional.
                                          The url of the storage endpoint. It must include the protocol
                                          https://.
                                        "fileNameFormat": "str",  # Optional.
                                          File name format for the blob. Default format is
                                          {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All
                                          parameters are mandatory but can be reordered.
                                        "id": "str",  # Optional. Id of the
                                          storage container endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "maxChunkSizeInBytes": 0,  #
                                          Optional. Maximum number of bytes for each blob written to
                                          storage. Value should be between 10485760(10MB) and
                                          524288000(500MB). Default value is 314572800(300MB).
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the storage account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the storage account.
                                    }
                                ]
                            },
                            "enrichments": [
                                {
                                    "endpointNames": [
                                        "str"  # The list of endpoints for
                                          which the enrichment is applied to the message. Required.
                                    ],
                                    "key": "str",  # The key or name for the
                                      enrichment property. Required.
                                    "value": "str"  # The value for the
                                      enrichment property. Required.
                                }
                            ],
                            "fallbackRoute": {
                                "condition": "str",  # Optional. The condition which
                                  is evaluated in order to apply the fallback route. If the condition
                                  is not provided it will evaluate to true by default. For grammar,
                                  See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which the
                                      messages that satisfy the condition are routed to. Currently only
                                      1 endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether the
                                  fallback route is enabled. Required.
                                "name": "str",  # Optional. The name of the route.
                                  The name can only include alphanumeric characters, periods,
                                  underscores, hyphens, has a maximum length of 64 characters, and must
                                  be unique.
                                "source": "str"  # The source to which the routing
                                  rule is to be applied to. For example, DeviceMessages. Required.
                                  Known values are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            },
                            "routes": [
                                {
                                    "condition": "str",  # Optional. The
                                      condition that is evaluated to apply the routing rule. If no
                                      condition is provided, it evaluates to true by default. For
                                      grammar, see:
                                      https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                    "endpointNames": [
                                        "str"  # The list of endpoints to
                                          which messages that satisfy the condition are routed.
                                          Currently only one endpoint is allowed. Required.
                                    ],
                                    "isEnabled": bool,  # Used to specify whether
                                      a route is enabled. Required.
                                    "name": "str",  # The name of the route. The
                                      name can only include alphanumeric characters, periods,
                                      underscores, hyphens, has a maximum length of 64 characters, and
                                      must be unique. Required.
                                    "source": "str"  # The source that the
                                      routing rule is to be applied to, such as DeviceMessages.
                                      Required. Known values are: "Invalid", "DeviceMessages",
                                      "TwinChangeEvents", "DeviceLifecycleEvents",
                                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                                }
                            ]
                        },
                        "state": "str",  # Optional. The hub state.
                        "storageEndpoints": {
                            "str": {
                                "authenticationType": "str",  # Optional. Specifies
                                  authentication type being used for connecting to the storage account.
                                  Known values are: "keyBased" and "identityBased".
                                "connectionString": "str",  # The connection string
                                  for the Azure Storage account to which files are uploaded. Required.
                                "containerName": "str",  # The name of the root
                                  container where you upload files. The container need not exist but
                                  should be creatable using the connectionString specified. Required.
                                "identity": {
                                    "userAssignedIdentity": "str"  # Optional.
                                      The user assigned identity.
                                },
                                "sasTtlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which the SAS URI generated by IoT Hub for file
                                  upload is valid. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
                            }
                        }
                    },
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]
        polling = kwargs.pop("polling", True)  # type: Union[bool, PollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._update_initial(  # type: ignore
                resource_group_name=resource_group_name,
                resource_name=resource_name,
                iot_hub_tags=iot_hub_tags,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True:
            polling_method = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))  # type: PollingMethod
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)

    def _delete_initial(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> Optional[JSON]:
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[JSON]]

        request = build_iot_hub_resource_delete_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 202:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def begin_delete(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> LROPoller[JSON]:
        """Delete an IoT hub.

        Delete an IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 202
                response == {
                    "etag": "str",  # Optional. The Etag field is *not* required. If it is
                      provided in the response body, it must also be provided as a header per the
                      normal ETag convention.
                    "id": "str",  # Optional. The resource identifier.
                    "identity": {
                        "principalId": "str",  # Optional. Principal Id.
                        "tenantId": "str",  # Optional. Tenant Id.
                        "type": "str",  # Optional. The type of identity used for the
                          resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
                          created identity and a set of user assigned identities. The type 'None' will
                          remove any identities from the service. Known values are: "SystemAssigned",
                          "UserAssigned", "SystemAssigned, UserAssigned", and "None".
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                                "principalId": "str"  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                            }
                        }
                    },
                    "location": "str",  # The resource location. Required.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "allowedFqdnList": [
                            "str"  # Optional. List of allowed FQDNs(Fully Qualified
                              Domain Name) for egress from Iot Hub.
                        ],
                        "authorizationPolicies": [
                            {
                                "keyName": "str",  # The name of the shared access
                                  policy. Required.
                                "primaryKey": "str",  # Optional. The primary key.
                                "rights": "str",  # The permissions assigned to the
                                  shared access policy. Required. Known values are: "RegistryRead",
                                  "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead,
                                  RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead,
                                  DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                                  DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead,
                                  RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite,
                                  DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect",
                                  "RegistryWrite, ServiceConnect, DeviceConnect", and "RegistryRead,
                                  RegistryWrite, ServiceConnect, DeviceConnect".
                                "secondaryKey": "str"  # Optional. The secondary key.
                            }
                        ],
                        "cloudToDevice": {
                            "defaultTtlAsIso8601": "1 day, 0:00:00",  # Optional. The
                              default time to live for cloud-to-device messages in the device queue.
                              See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            "feedback": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration for the feedback queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message on the feedback
                                  queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            },
                            "maxDeliveryCount": 0  # Optional. The max delivery count for
                              cloud-to-device messages in the device queue. See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                        },
                        "comments": "str",  # Optional. IoT hub comments.
                        "deviceStreams": {
                            "streamingEndpoints": [
                                "str"  # Optional. List of Device Streams Endpoints.
                            ]
                        },
                        "disableDeviceSAS": bool,  # Optional. If true, all device(including
                          Edge devices but excluding modules) scoped SAS keys cannot be used for
                          authentication.
                        "disableLocalAuth": bool,  # Optional. If true, SAS tokens with Iot
                          hub scoped SAS keys cannot be used for authentication.
                        "disableModuleSAS": bool,  # Optional. If true, all module scoped SAS
                          keys cannot be used for authentication.
                        "enableDataResidency": bool,  # Optional. This property when set to
                          true, will enable data residency, thus, disabling disaster recovery.
                        "enableFileUploadNotifications": bool,  # Optional. If True, file
                          upload notifications are enabled.
                        "encryption": {
                            "keySource": "str",  # Optional. The source of the key.
                            "keyVaultProperties": [
                                {
                                    "identity": {
                                        "userAssignedIdentity": "str"  #
                                          Optional. The user assigned identity.
                                    },
                                    "keyIdentifier": "str"  # Optional. The
                                      identifier of the key.
                                }
                            ]
                        },
                        "eventHubEndpoints": {
                            "str": {
                                "endpoint": "str",  # Optional. The Event
                                  Hub-compatible endpoint.
                                "partitionCount": 0,  # Optional. The number of
                                  partitions for receiving device-to-cloud messages in the Event
                                  Hub-compatible endpoint. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                                "partitionIds": [
                                    "str"  # Optional. The partition ids in the
                                      Event Hub-compatible endpoint.
                                ],
                                "path": "str",  # Optional. The Event Hub-compatible
                                  name.
                                "retentionTimeInDays": 0  # Optional. The retention
                                  time for device-to-cloud messages in days. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                            }
                        },
                        "features": "str",  # Optional. The capabilities and features enabled
                          for the IoT hub. Known values are: "None" and "DeviceManagement".
                        "hostName": "str",  # Optional. The name of the host.
                        "ipFilterRules": [
                            {
                                "action": "str",  # The desired action for requests
                                  captured by this rule. Required. Known values are: "Accept" and
                                  "Reject".
                                "filterName": "str",  # The name of the IP filter
                                  rule. Required.
                                "ipMask": "str"  # A string that contains the IP
                                  address range in CIDR notation for the rule. Required.
                            }
                        ],
                        "locations": [
                            {
                                "location": "str",  # Optional. The name of the Azure
                                  region.
                                "role": "str"  # Optional. The role of the region,
                                  can be either primary or secondary. The primary region is where the
                                  IoT hub is currently provisioned. The secondary region is the Azure
                                  disaster recovery (DR) paired region and also the region where the
                                  IoT hub can failover to. Known values are: "primary" and "secondary".
                            }
                        ],
                        "messagingEndpoints": {
                            "str": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                            }
                        },
                        "minTlsVersion": "str",  # Optional. Specifies the minimum TLS
                          version to support for this hub. Can be set to "1.2" to have clients that use
                          a TLS version below 1.2 to be rejected.
                        "networkRuleSets": {
                            "applyToBuiltInEventHubEndpoint": bool,  # If True, then
                              Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub.
                              Required.
                            "defaultAction": "Deny",  # Optional. Default value is
                              "Deny". Default Action for Network Rule Set. Known values are: "Deny" and
                              "Allow".
                            "ipRules": [
                                {
                                    "action": "Allow",  # Optional. Default value
                                      is "Allow". IP Filter Action. "Allow"
                                    "filterName": "str",  # Name of the IP filter
                                      rule. Required.
                                    "ipMask": "str"  # A string that contains the
                                      IP address range in CIDR notation for the rule. Required.
                                }
                            ]
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",  # Optional. The resource identifier.
                                "name": "str",  # Optional. The resource name.
                                "properties": {
                                    "privateEndpoint": {
                                        "id": "str"  # Optional. The resource
                                          identifier.
                                    },
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",  #
                                          Optional. Actions required for a private endpoint connection.
                                        "description": "str",  # The
                                          description for the current state of a private endpoint
                                          connection. Required.
                                        "status": "str"  # The status of a
                                          private endpoint connection. Required. Known values are:
                                          "Pending", "Approved", "Rejected", and "Disconnected".
                                    }
                                },
                                "type": "str"  # Optional. The resource type.
                            }
                        ],
                        "provisioningState": "str",  # Optional. The provisioning state.
                        "publicNetworkAccess": "str",  # Optional. Whether requests from
                          Public Network are allowed. Known values are: "Enabled" and "Disabled".
                        "restrictOutboundNetworkAccess": bool,  # Optional. If true, egress
                          from IotHub will be restricted to only the allowed FQDNs that are configured
                          via allowedFqdnList.
                        "rootCertificate": {
                            "enableRootCertificateV2": bool,  # Optional. This property
                              when set to true, hub will use G2 cert; while it's set to false, hub uses
                              Baltimore Cert.
                            "lastUpdatedTimeUtc": "2020-02-20 00:00:00"  # Optional. the
                              last update time to root certificate flag.
                        },
                        "routing": {
                            "endpoints": {
                                "cosmosDBSqlCollections": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the cosmos DB
                                          sql collection endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "collectionName": "str",  # The name
                                          of the cosmos DB sql collection in the cosmos DB database.
                                          Required.
                                        "databaseName": "str",  # The name of
                                          the cosmos DB database in the cosmos DB account. Required.
                                        "endpointUri": "str",  # The url of
                                          the cosmos DB account. It must include the protocol https://.
                                          Required.
                                        "id": "str",  # Optional. Id of the
                                          cosmos DB sql collection endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "partitionKeyName": "str",  #
                                          Optional. The name of the partition key associated with this
                                          cosmos DB sql collection if one exists. This is an optional
                                          parameter.
                                        "partitionKeyTemplate": "str",  #
                                          Optional. The template for generating a synthetic partition
                                          key value for use with this cosmos DB sql collection. The
                                          template must include at least one of the following
                                          placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}.
                                          Any one placeholder may be specified at most once, but order
                                          and non-placeholder components are arbitrary. This parameter
                                          is only required if PartitionKeyName is specified.
                                        "primaryKey": "str",  # Optional. The
                                          primary key of the cosmos DB account.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the cosmos DB account.
                                        "secondaryKey": "str",  # Optional.
                                          The secondary key of the cosmos DB account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the cosmos DB account.
                                    }
                                ],
                                "eventHubs": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the event hub
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the event hub endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the event hub endpoint. It must include the
                                          protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Event hub name on the event hub namespace.
                                        "id": "str",  # Optional. Id of the
                                          event hub endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the event hub endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the event hub endpoint.
                                    }
                                ],
                                "serviceBusQueues": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          queue endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus queue
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus queue endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus namespace.
                                        "id": "str",  # Optional. Id of the
                                          service bus queue endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. The name need not
                                          be the same as the actual queue name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus queue
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus queue
                                          endpoint.
                                    }
                                ],
                                "serviceBusTopics": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          topic endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus topic
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus topic endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus topic.
                                        "id": "str",  # Optional. Id of the
                                          service bus topic endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types.  The name need
                                          not be the same as the actual topic name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus topic
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus topic
                                          endpoint.
                                    }
                                ],
                                "storageContainers": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the storage
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "batchFrequencyInSeconds": 0,  #
                                          Optional. Time interval at which blobs are written to
                                          storage. Value should be between 60 and 720 seconds. Default
                                          value is 300 seconds.
                                        "connectionString": "str",  #
                                          Optional. The connection string of the storage account.
                                        "containerName": "str",  # The name
                                          of storage container in the storage account. Required.
                                        "encoding": "str",  # Optional.
                                          Encoding that is used to serialize messages to blobs.
                                          Supported values are 'avro', 'avrodeflate', and 'JSON'.
                                          Default value is 'avro'. Known values are: "Avro",
                                          "AvroDeflate", and "JSON".
                                        "endpointUri": "str",  # Optional.
                                          The url of the storage endpoint. It must include the protocol
                                          https://.
                                        "fileNameFormat": "str",  # Optional.
                                          File name format for the blob. Default format is
                                          {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All
                                          parameters are mandatory but can be reordered.
                                        "id": "str",  # Optional. Id of the
                                          storage container endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "maxChunkSizeInBytes": 0,  #
                                          Optional. Maximum number of bytes for each blob written to
                                          storage. Value should be between 10485760(10MB) and
                                          524288000(500MB). Default value is 314572800(300MB).
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the storage account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the storage account.
                                    }
                                ]
                            },
                            "enrichments": [
                                {
                                    "endpointNames": [
                                        "str"  # The list of endpoints for
                                          which the enrichment is applied to the message. Required.
                                    ],
                                    "key": "str",  # The key or name for the
                                      enrichment property. Required.
                                    "value": "str"  # The value for the
                                      enrichment property. Required.
                                }
                            ],
                            "fallbackRoute": {
                                "condition": "str",  # Optional. The condition which
                                  is evaluated in order to apply the fallback route. If the condition
                                  is not provided it will evaluate to true by default. For grammar,
                                  See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which the
                                      messages that satisfy the condition are routed to. Currently only
                                      1 endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether the
                                  fallback route is enabled. Required.
                                "name": "str",  # Optional. The name of the route.
                                  The name can only include alphanumeric characters, periods,
                                  underscores, hyphens, has a maximum length of 64 characters, and must
                                  be unique.
                                "source": "str"  # The source to which the routing
                                  rule is to be applied to. For example, DeviceMessages. Required.
                                  Known values are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            },
                            "routes": [
                                {
                                    "condition": "str",  # Optional. The
                                      condition that is evaluated to apply the routing rule. If no
                                      condition is provided, it evaluates to true by default. For
                                      grammar, see:
                                      https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                    "endpointNames": [
                                        "str"  # The list of endpoints to
                                          which messages that satisfy the condition are routed.
                                          Currently only one endpoint is allowed. Required.
                                    ],
                                    "isEnabled": bool,  # Used to specify whether
                                      a route is enabled. Required.
                                    "name": "str",  # The name of the route. The
                                      name can only include alphanumeric characters, periods,
                                      underscores, hyphens, has a maximum length of 64 characters, and
                                      must be unique. Required.
                                    "source": "str"  # The source that the
                                      routing rule is to be applied to, such as DeviceMessages.
                                      Required. Known values are: "Invalid", "DeviceMessages",
                                      "TwinChangeEvents", "DeviceLifecycleEvents",
                                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                                }
                            ]
                        },
                        "state": "str",  # Optional. The hub state.
                        "storageEndpoints": {
                            "str": {
                                "authenticationType": "str",  # Optional. Specifies
                                  authentication type being used for connecting to the storage account.
                                  Known values are: "keyBased" and "identityBased".
                                "connectionString": "str",  # The connection string
                                  for the Azure Storage account to which files are uploaded. Required.
                                "containerName": "str",  # The name of the root
                                  container where you upload files. The container need not exist but
                                  should be creatable using the connectionString specified. Required.
                                "identity": {
                                    "userAssignedIdentity": "str"  # Optional.
                                      The user assigned identity.
                                },
                                "sasTtlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which the SAS URI generated by IoT Hub for file
                                  upload is valid. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
                            }
                        }
                    },
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    },
                    "type": "str"  # Optional. The resource type.
                }
                # response body for status code(s): 404
                response == {
                    "code": "str",  # Optional. The error code.
                    "details": "str",  # Optional. The error details.
                    "httpStatusCode": "str",  # Optional. The HTTP status code.
                    "message": "str"  # Optional. The error message.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]
        polling = kwargs.pop("polling", True)  # type: Union[bool, PollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._delete_initial(  # type: ignore
                resource_group_name=resource_group_name,
                resource_name=resource_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True:
            polling_method = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))  # type: PollingMethod
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> Iterable[JSON]:
        """Get all the IoT hubs in a subscription.

        Get all the IoT hubs in a subscription.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The Etag field is *not* required. If it is
                      provided in the response body, it must also be provided as a header per the
                      normal ETag convention.
                    "id": "str",  # Optional. The resource identifier.
                    "identity": {
                        "principalId": "str",  # Optional. Principal Id.
                        "tenantId": "str",  # Optional. Tenant Id.
                        "type": "str",  # Optional. The type of identity used for the
                          resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
                          created identity and a set of user assigned identities. The type 'None' will
                          remove any identities from the service. Known values are: "SystemAssigned",
                          "UserAssigned", "SystemAssigned, UserAssigned", and "None".
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                                "principalId": "str"  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                            }
                        }
                    },
                    "location": "str",  # The resource location. Required.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "allowedFqdnList": [
                            "str"  # Optional. List of allowed FQDNs(Fully Qualified
                              Domain Name) for egress from Iot Hub.
                        ],
                        "authorizationPolicies": [
                            {
                                "keyName": "str",  # The name of the shared access
                                  policy. Required.
                                "primaryKey": "str",  # Optional. The primary key.
                                "rights": "str",  # The permissions assigned to the
                                  shared access policy. Required. Known values are: "RegistryRead",
                                  "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead,
                                  RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead,
                                  DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                                  DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead,
                                  RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite,
                                  DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect",
                                  "RegistryWrite, ServiceConnect, DeviceConnect", and "RegistryRead,
                                  RegistryWrite, ServiceConnect, DeviceConnect".
                                "secondaryKey": "str"  # Optional. The secondary key.
                            }
                        ],
                        "cloudToDevice": {
                            "defaultTtlAsIso8601": "1 day, 0:00:00",  # Optional. The
                              default time to live for cloud-to-device messages in the device queue.
                              See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            "feedback": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration for the feedback queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message on the feedback
                                  queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            },
                            "maxDeliveryCount": 0  # Optional. The max delivery count for
                              cloud-to-device messages in the device queue. See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                        },
                        "comments": "str",  # Optional. IoT hub comments.
                        "deviceStreams": {
                            "streamingEndpoints": [
                                "str"  # Optional. List of Device Streams Endpoints.
                            ]
                        },
                        "disableDeviceSAS": bool,  # Optional. If true, all device(including
                          Edge devices but excluding modules) scoped SAS keys cannot be used for
                          authentication.
                        "disableLocalAuth": bool,  # Optional. If true, SAS tokens with Iot
                          hub scoped SAS keys cannot be used for authentication.
                        "disableModuleSAS": bool,  # Optional. If true, all module scoped SAS
                          keys cannot be used for authentication.
                        "enableDataResidency": bool,  # Optional. This property when set to
                          true, will enable data residency, thus, disabling disaster recovery.
                        "enableFileUploadNotifications": bool,  # Optional. If True, file
                          upload notifications are enabled.
                        "encryption": {
                            "keySource": "str",  # Optional. The source of the key.
                            "keyVaultProperties": [
                                {
                                    "identity": {
                                        "userAssignedIdentity": "str"  #
                                          Optional. The user assigned identity.
                                    },
                                    "keyIdentifier": "str"  # Optional. The
                                      identifier of the key.
                                }
                            ]
                        },
                        "eventHubEndpoints": {
                            "str": {
                                "endpoint": "str",  # Optional. The Event
                                  Hub-compatible endpoint.
                                "partitionCount": 0,  # Optional. The number of
                                  partitions for receiving device-to-cloud messages in the Event
                                  Hub-compatible endpoint. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                                "partitionIds": [
                                    "str"  # Optional. The partition ids in the
                                      Event Hub-compatible endpoint.
                                ],
                                "path": "str",  # Optional. The Event Hub-compatible
                                  name.
                                "retentionTimeInDays": 0  # Optional. The retention
                                  time for device-to-cloud messages in days. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                            }
                        },
                        "features": "str",  # Optional. The capabilities and features enabled
                          for the IoT hub. Known values are: "None" and "DeviceManagement".
                        "hostName": "str",  # Optional. The name of the host.
                        "ipFilterRules": [
                            {
                                "action": "str",  # The desired action for requests
                                  captured by this rule. Required. Known values are: "Accept" and
                                  "Reject".
                                "filterName": "str",  # The name of the IP filter
                                  rule. Required.
                                "ipMask": "str"  # A string that contains the IP
                                  address range in CIDR notation for the rule. Required.
                            }
                        ],
                        "locations": [
                            {
                                "location": "str",  # Optional. The name of the Azure
                                  region.
                                "role": "str"  # Optional. The role of the region,
                                  can be either primary or secondary. The primary region is where the
                                  IoT hub is currently provisioned. The secondary region is the Azure
                                  disaster recovery (DR) paired region and also the region where the
                                  IoT hub can failover to. Known values are: "primary" and "secondary".
                            }
                        ],
                        "messagingEndpoints": {
                            "str": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                            }
                        },
                        "minTlsVersion": "str",  # Optional. Specifies the minimum TLS
                          version to support for this hub. Can be set to "1.2" to have clients that use
                          a TLS version below 1.2 to be rejected.
                        "networkRuleSets": {
                            "applyToBuiltInEventHubEndpoint": bool,  # If True, then
                              Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub.
                              Required.
                            "defaultAction": "Deny",  # Optional. Default value is
                              "Deny". Default Action for Network Rule Set. Known values are: "Deny" and
                              "Allow".
                            "ipRules": [
                                {
                                    "action": "Allow",  # Optional. Default value
                                      is "Allow". IP Filter Action. "Allow"
                                    "filterName": "str",  # Name of the IP filter
                                      rule. Required.
                                    "ipMask": "str"  # A string that contains the
                                      IP address range in CIDR notation for the rule. Required.
                                }
                            ]
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",  # Optional. The resource identifier.
                                "name": "str",  # Optional. The resource name.
                                "properties": {
                                    "privateEndpoint": {
                                        "id": "str"  # Optional. The resource
                                          identifier.
                                    },
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",  #
                                          Optional. Actions required for a private endpoint connection.
                                        "description": "str",  # The
                                          description for the current state of a private endpoint
                                          connection. Required.
                                        "status": "str"  # The status of a
                                          private endpoint connection. Required. Known values are:
                                          "Pending", "Approved", "Rejected", and "Disconnected".
                                    }
                                },
                                "type": "str"  # Optional. The resource type.
                            }
                        ],
                        "provisioningState": "str",  # Optional. The provisioning state.
                        "publicNetworkAccess": "str",  # Optional. Whether requests from
                          Public Network are allowed. Known values are: "Enabled" and "Disabled".
                        "restrictOutboundNetworkAccess": bool,  # Optional. If true, egress
                          from IotHub will be restricted to only the allowed FQDNs that are configured
                          via allowedFqdnList.
                        "rootCertificate": {
                            "enableRootCertificateV2": bool,  # Optional. This property
                              when set to true, hub will use G2 cert; while it's set to false, hub uses
                              Baltimore Cert.
                            "lastUpdatedTimeUtc": "2020-02-20 00:00:00"  # Optional. the
                              last update time to root certificate flag.
                        },
                        "routing": {
                            "endpoints": {
                                "cosmosDBSqlCollections": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the cosmos DB
                                          sql collection endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "collectionName": "str",  # The name
                                          of the cosmos DB sql collection in the cosmos DB database.
                                          Required.
                                        "databaseName": "str",  # The name of
                                          the cosmos DB database in the cosmos DB account. Required.
                                        "endpointUri": "str",  # The url of
                                          the cosmos DB account. It must include the protocol https://.
                                          Required.
                                        "id": "str",  # Optional. Id of the
                                          cosmos DB sql collection endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "partitionKeyName": "str",  #
                                          Optional. The name of the partition key associated with this
                                          cosmos DB sql collection if one exists. This is an optional
                                          parameter.
                                        "partitionKeyTemplate": "str",  #
                                          Optional. The template for generating a synthetic partition
                                          key value for use with this cosmos DB sql collection. The
                                          template must include at least one of the following
                                          placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}.
                                          Any one placeholder may be specified at most once, but order
                                          and non-placeholder components are arbitrary. This parameter
                                          is only required if PartitionKeyName is specified.
                                        "primaryKey": "str",  # Optional. The
                                          primary key of the cosmos DB account.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the cosmos DB account.
                                        "secondaryKey": "str",  # Optional.
                                          The secondary key of the cosmos DB account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the cosmos DB account.
                                    }
                                ],
                                "eventHubs": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the event hub
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the event hub endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the event hub endpoint. It must include the
                                          protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Event hub name on the event hub namespace.
                                        "id": "str",  # Optional. Id of the
                                          event hub endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the event hub endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the event hub endpoint.
                                    }
                                ],
                                "serviceBusQueues": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          queue endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus queue
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus queue endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus namespace.
                                        "id": "str",  # Optional. Id of the
                                          service bus queue endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. The name need not
                                          be the same as the actual queue name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus queue
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus queue
                                          endpoint.
                                    }
                                ],
                                "serviceBusTopics": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          topic endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus topic
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus topic endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus topic.
                                        "id": "str",  # Optional. Id of the
                                          service bus topic endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types.  The name need
                                          not be the same as the actual topic name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus topic
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus topic
                                          endpoint.
                                    }
                                ],
                                "storageContainers": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the storage
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "batchFrequencyInSeconds": 0,  #
                                          Optional. Time interval at which blobs are written to
                                          storage. Value should be between 60 and 720 seconds. Default
                                          value is 300 seconds.
                                        "connectionString": "str",  #
                                          Optional. The connection string of the storage account.
                                        "containerName": "str",  # The name
                                          of storage container in the storage account. Required.
                                        "encoding": "str",  # Optional.
                                          Encoding that is used to serialize messages to blobs.
                                          Supported values are 'avro', 'avrodeflate', and 'JSON'.
                                          Default value is 'avro'. Known values are: "Avro",
                                          "AvroDeflate", and "JSON".
                                        "endpointUri": "str",  # Optional.
                                          The url of the storage endpoint. It must include the protocol
                                          https://.
                                        "fileNameFormat": "str",  # Optional.
                                          File name format for the blob. Default format is
                                          {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All
                                          parameters are mandatory but can be reordered.
                                        "id": "str",  # Optional. Id of the
                                          storage container endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "maxChunkSizeInBytes": 0,  #
                                          Optional. Maximum number of bytes for each blob written to
                                          storage. Value should be between 10485760(10MB) and
                                          524288000(500MB). Default value is 314572800(300MB).
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the storage account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the storage account.
                                    }
                                ]
                            },
                            "enrichments": [
                                {
                                    "endpointNames": [
                                        "str"  # The list of endpoints for
                                          which the enrichment is applied to the message. Required.
                                    ],
                                    "key": "str",  # The key or name for the
                                      enrichment property. Required.
                                    "value": "str"  # The value for the
                                      enrichment property. Required.
                                }
                            ],
                            "fallbackRoute": {
                                "condition": "str",  # Optional. The condition which
                                  is evaluated in order to apply the fallback route. If the condition
                                  is not provided it will evaluate to true by default. For grammar,
                                  See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which the
                                      messages that satisfy the condition are routed to. Currently only
                                      1 endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether the
                                  fallback route is enabled. Required.
                                "name": "str",  # Optional. The name of the route.
                                  The name can only include alphanumeric characters, periods,
                                  underscores, hyphens, has a maximum length of 64 characters, and must
                                  be unique.
                                "source": "str"  # The source to which the routing
                                  rule is to be applied to. For example, DeviceMessages. Required.
                                  Known values are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            },
                            "routes": [
                                {
                                    "condition": "str",  # Optional. The
                                      condition that is evaluated to apply the routing rule. If no
                                      condition is provided, it evaluates to true by default. For
                                      grammar, see:
                                      https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                    "endpointNames": [
                                        "str"  # The list of endpoints to
                                          which messages that satisfy the condition are routed.
                                          Currently only one endpoint is allowed. Required.
                                    ],
                                    "isEnabled": bool,  # Used to specify whether
                                      a route is enabled. Required.
                                    "name": "str",  # The name of the route. The
                                      name can only include alphanumeric characters, periods,
                                      underscores, hyphens, has a maximum length of 64 characters, and
                                      must be unique. Required.
                                    "source": "str"  # The source that the
                                      routing rule is to be applied to, such as DeviceMessages.
                                      Required. Known values are: "Invalid", "DeviceMessages",
                                      "TwinChangeEvents", "DeviceLifecycleEvents",
                                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                                }
                            ]
                        },
                        "state": "str",  # Optional. The hub state.
                        "storageEndpoints": {
                            "str": {
                                "authenticationType": "str",  # Optional. Specifies
                                  authentication type being used for connecting to the storage account.
                                  Known values are: "keyBased" and "identityBased".
                                "connectionString": "str",  # The connection string
                                  for the Azure Storage account to which files are uploaded. Required.
                                "containerName": "str",  # The name of the root
                                  container where you upload files. The container need not exist but
                                  should be creatable using the connectionString specified. Required.
                                "identity": {
                                    "userAssignedIdentity": "str"  # Optional.
                                      The user assigned identity.
                                },
                                "sasTtlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which the SAS URI generated by IoT Hub for file
                                  upload is valid. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
                            }
                        }
                    },
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_iot_hub_resource_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> Iterable[JSON]:
        """Get all the IoT hubs in a resource group.

        Get all the IoT hubs in a resource group.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The Etag field is *not* required. If it is
                      provided in the response body, it must also be provided as a header per the
                      normal ETag convention.
                    "id": "str",  # Optional. The resource identifier.
                    "identity": {
                        "principalId": "str",  # Optional. Principal Id.
                        "tenantId": "str",  # Optional. Tenant Id.
                        "type": "str",  # Optional. The type of identity used for the
                          resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
                          created identity and a set of user assigned identities. The type 'None' will
                          remove any identities from the service. Known values are: "SystemAssigned",
                          "UserAssigned", "SystemAssigned, UserAssigned", and "None".
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                                "principalId": "str"  # Optional. Dictionary of
                                  :code:`<ArmUserIdentity>`.
                            }
                        }
                    },
                    "location": "str",  # The resource location. Required.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "allowedFqdnList": [
                            "str"  # Optional. List of allowed FQDNs(Fully Qualified
                              Domain Name) for egress from Iot Hub.
                        ],
                        "authorizationPolicies": [
                            {
                                "keyName": "str",  # The name of the shared access
                                  policy. Required.
                                "primaryKey": "str",  # Optional. The primary key.
                                "rights": "str",  # The permissions assigned to the
                                  shared access policy. Required. Known values are: "RegistryRead",
                                  "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead,
                                  RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead,
                                  DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                                  DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead,
                                  RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite,
                                  DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect",
                                  "RegistryWrite, ServiceConnect, DeviceConnect", and "RegistryRead,
                                  RegistryWrite, ServiceConnect, DeviceConnect".
                                "secondaryKey": "str"  # Optional. The secondary key.
                            }
                        ],
                        "cloudToDevice": {
                            "defaultTtlAsIso8601": "1 day, 0:00:00",  # Optional. The
                              default time to live for cloud-to-device messages in the device queue.
                              See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            "feedback": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration for the feedback queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message on the feedback
                                  queue. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                            },
                            "maxDeliveryCount": 0  # Optional. The max delivery count for
                              cloud-to-device messages in the device queue. See:
                              https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
                        },
                        "comments": "str",  # Optional. IoT hub comments.
                        "deviceStreams": {
                            "streamingEndpoints": [
                                "str"  # Optional. List of Device Streams Endpoints.
                            ]
                        },
                        "disableDeviceSAS": bool,  # Optional. If true, all device(including
                          Edge devices but excluding modules) scoped SAS keys cannot be used for
                          authentication.
                        "disableLocalAuth": bool,  # Optional. If true, SAS tokens with Iot
                          hub scoped SAS keys cannot be used for authentication.
                        "disableModuleSAS": bool,  # Optional. If true, all module scoped SAS
                          keys cannot be used for authentication.
                        "enableDataResidency": bool,  # Optional. This property when set to
                          true, will enable data residency, thus, disabling disaster recovery.
                        "enableFileUploadNotifications": bool,  # Optional. If True, file
                          upload notifications are enabled.
                        "encryption": {
                            "keySource": "str",  # Optional. The source of the key.
                            "keyVaultProperties": [
                                {
                                    "identity": {
                                        "userAssignedIdentity": "str"  #
                                          Optional. The user assigned identity.
                                    },
                                    "keyIdentifier": "str"  # Optional. The
                                      identifier of the key.
                                }
                            ]
                        },
                        "eventHubEndpoints": {
                            "str": {
                                "endpoint": "str",  # Optional. The Event
                                  Hub-compatible endpoint.
                                "partitionCount": 0,  # Optional. The number of
                                  partitions for receiving device-to-cloud messages in the Event
                                  Hub-compatible endpoint. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                                "partitionIds": [
                                    "str"  # Optional. The partition ids in the
                                      Event Hub-compatible endpoint.
                                ],
                                "path": "str",  # Optional. The Event Hub-compatible
                                  name.
                                "retentionTimeInDays": 0  # Optional. The retention
                                  time for device-to-cloud messages in days. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
                            }
                        },
                        "features": "str",  # Optional. The capabilities and features enabled
                          for the IoT hub. Known values are: "None" and "DeviceManagement".
                        "hostName": "str",  # Optional. The name of the host.
                        "ipFilterRules": [
                            {
                                "action": "str",  # The desired action for requests
                                  captured by this rule. Required. Known values are: "Accept" and
                                  "Reject".
                                "filterName": "str",  # The name of the IP filter
                                  rule. Required.
                                "ipMask": "str"  # A string that contains the IP
                                  address range in CIDR notation for the rule. Required.
                            }
                        ],
                        "locations": [
                            {
                                "location": "str",  # Optional. The name of the Azure
                                  region.
                                "role": "str"  # Optional. The role of the region,
                                  can be either primary or secondary. The primary region is where the
                                  IoT hub is currently provisioned. The secondary region is the Azure
                                  disaster recovery (DR) paired region and also the region where the
                                  IoT hub can failover to. Known values are: "primary" and "secondary".
                            }
                        ],
                        "messagingEndpoints": {
                            "str": {
                                "lockDurationAsIso8601": "1 day, 0:00:00",  #
                                  Optional. The lock duration. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "maxDeliveryCount": 0,  # Optional. The number of
                                  times the IoT hub attempts to deliver a message. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                                "ttlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which a message is available to consume before it
                                  is expired by the IoT hub. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
                            }
                        },
                        "minTlsVersion": "str",  # Optional. Specifies the minimum TLS
                          version to support for this hub. Can be set to "1.2" to have clients that use
                          a TLS version below 1.2 to be rejected.
                        "networkRuleSets": {
                            "applyToBuiltInEventHubEndpoint": bool,  # If True, then
                              Network Rule Set is also applied to BuiltIn EventHub EndPoint of IotHub.
                              Required.
                            "defaultAction": "Deny",  # Optional. Default value is
                              "Deny". Default Action for Network Rule Set. Known values are: "Deny" and
                              "Allow".
                            "ipRules": [
                                {
                                    "action": "Allow",  # Optional. Default value
                                      is "Allow". IP Filter Action. "Allow"
                                    "filterName": "str",  # Name of the IP filter
                                      rule. Required.
                                    "ipMask": "str"  # A string that contains the
                                      IP address range in CIDR notation for the rule. Required.
                                }
                            ]
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",  # Optional. The resource identifier.
                                "name": "str",  # Optional. The resource name.
                                "properties": {
                                    "privateEndpoint": {
                                        "id": "str"  # Optional. The resource
                                          identifier.
                                    },
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",  #
                                          Optional. Actions required for a private endpoint connection.
                                        "description": "str",  # The
                                          description for the current state of a private endpoint
                                          connection. Required.
                                        "status": "str"  # The status of a
                                          private endpoint connection. Required. Known values are:
                                          "Pending", "Approved", "Rejected", and "Disconnected".
                                    }
                                },
                                "type": "str"  # Optional. The resource type.
                            }
                        ],
                        "provisioningState": "str",  # Optional. The provisioning state.
                        "publicNetworkAccess": "str",  # Optional. Whether requests from
                          Public Network are allowed. Known values are: "Enabled" and "Disabled".
                        "restrictOutboundNetworkAccess": bool,  # Optional. If true, egress
                          from IotHub will be restricted to only the allowed FQDNs that are configured
                          via allowedFqdnList.
                        "rootCertificate": {
                            "enableRootCertificateV2": bool,  # Optional. This property
                              when set to true, hub will use G2 cert; while it's set to false, hub uses
                              Baltimore Cert.
                            "lastUpdatedTimeUtc": "2020-02-20 00:00:00"  # Optional. the
                              last update time to root certificate flag.
                        },
                        "routing": {
                            "endpoints": {
                                "cosmosDBSqlCollections": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the cosmos DB
                                          sql collection endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "collectionName": "str",  # The name
                                          of the cosmos DB sql collection in the cosmos DB database.
                                          Required.
                                        "databaseName": "str",  # The name of
                                          the cosmos DB database in the cosmos DB account. Required.
                                        "endpointUri": "str",  # The url of
                                          the cosmos DB account. It must include the protocol https://.
                                          Required.
                                        "id": "str",  # Optional. Id of the
                                          cosmos DB sql collection endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "partitionKeyName": "str",  #
                                          Optional. The name of the partition key associated with this
                                          cosmos DB sql collection if one exists. This is an optional
                                          parameter.
                                        "partitionKeyTemplate": "str",  #
                                          Optional. The template for generating a synthetic partition
                                          key value for use with this cosmos DB sql collection. The
                                          template must include at least one of the following
                                          placeholders: {iothub}, {deviceid}, {DD}, {MM}, and {YYYY}.
                                          Any one placeholder may be specified at most once, but order
                                          and non-placeholder components are arbitrary. This parameter
                                          is only required if PartitionKeyName is specified.
                                        "primaryKey": "str",  # Optional. The
                                          primary key of the cosmos DB account.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the cosmos DB account.
                                        "secondaryKey": "str",  # Optional.
                                          The secondary key of the cosmos DB account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the cosmos DB account.
                                    }
                                ],
                                "eventHubs": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the event hub
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the event hub endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the event hub endpoint. It must include the
                                          protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Event hub name on the event hub namespace.
                                        "id": "str",  # Optional. Id of the
                                          event hub endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the event hub endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the event hub endpoint.
                                    }
                                ],
                                "serviceBusQueues": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          queue endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus queue
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus queue endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus namespace.
                                        "id": "str",  # Optional. Id of the
                                          service bus queue endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. The name need not
                                          be the same as the actual queue name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus queue
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus queue
                                          endpoint.
                                    }
                                ],
                                "serviceBusTopics": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the service bus
                                          topic endpoint. Known values are: "keyBased" and
                                          "identityBased".
                                        "connectionString": "str",  #
                                          Optional. The connection string of the service bus topic
                                          endpoint.
                                        "endpointUri": "str",  # Optional.
                                          The url of the service bus topic endpoint. It must include
                                          the protocol sb://.
                                        "entityPath": "str",  # Optional.
                                          Queue name on the service bus topic.
                                        "id": "str",  # Optional. Id of the
                                          service bus topic endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types.  The name need
                                          not be the same as the actual topic name. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the service bus topic
                                          endpoint.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the service bus topic
                                          endpoint.
                                    }
                                ],
                                "storageContainers": [
                                    {
                                        "authenticationType": "str",  #
                                          Optional. Method used to authenticate against the storage
                                          endpoint. Known values are: "keyBased" and "identityBased".
                                        "batchFrequencyInSeconds": 0,  #
                                          Optional. Time interval at which blobs are written to
                                          storage. Value should be between 60 and 720 seconds. Default
                                          value is 300 seconds.
                                        "connectionString": "str",  #
                                          Optional. The connection string of the storage account.
                                        "containerName": "str",  # The name
                                          of storage container in the storage account. Required.
                                        "encoding": "str",  # Optional.
                                          Encoding that is used to serialize messages to blobs.
                                          Supported values are 'avro', 'avrodeflate', and 'JSON'.
                                          Default value is 'avro'. Known values are: "Avro",
                                          "AvroDeflate", and "JSON".
                                        "endpointUri": "str",  # Optional.
                                          The url of the storage endpoint. It must include the protocol
                                          https://.
                                        "fileNameFormat": "str",  # Optional.
                                          File name format for the blob. Default format is
                                          {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All
                                          parameters are mandatory but can be reordered.
                                        "id": "str",  # Optional. Id of the
                                          storage container endpoint.
                                        "identity": {
                                            "userAssignedIdentity": "str"
                                              # Optional. The user assigned identity.
                                        },
                                        "maxChunkSizeInBytes": 0,  #
                                          Optional. Maximum number of bytes for each blob written to
                                          storage. Value should be between 10485760(10MB) and
                                          524288000(500MB). Default value is 314572800(300MB).
                                        "name": "str",  # The name that
                                          identifies this endpoint. The name can only include
                                          alphanumeric characters, periods, underscores, hyphens and
                                          has a maximum length of 64 characters. The following names
                                          are reserved:  events, fileNotifications, $default. Endpoint
                                          names must be unique across endpoint types. Required.
                                        "resourceGroup": "str",  # Optional.
                                          The name of the resource group of the storage account.
                                        "subscriptionId": "str"  # Optional.
                                          The subscription identifier of the storage account.
                                    }
                                ]
                            },
                            "enrichments": [
                                {
                                    "endpointNames": [
                                        "str"  # The list of endpoints for
                                          which the enrichment is applied to the message. Required.
                                    ],
                                    "key": "str",  # The key or name for the
                                      enrichment property. Required.
                                    "value": "str"  # The value for the
                                      enrichment property. Required.
                                }
                            ],
                            "fallbackRoute": {
                                "condition": "str",  # Optional. The condition which
                                  is evaluated in order to apply the fallback route. If the condition
                                  is not provided it will evaluate to true by default. For grammar,
                                  See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which the
                                      messages that satisfy the condition are routed to. Currently only
                                      1 endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether the
                                  fallback route is enabled. Required.
                                "name": "str",  # Optional. The name of the route.
                                  The name can only include alphanumeric characters, periods,
                                  underscores, hyphens, has a maximum length of 64 characters, and must
                                  be unique.
                                "source": "str"  # The source to which the routing
                                  rule is to be applied to. For example, DeviceMessages. Required.
                                  Known values are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            },
                            "routes": [
                                {
                                    "condition": "str",  # Optional. The
                                      condition that is evaluated to apply the routing rule. If no
                                      condition is provided, it evaluates to true by default. For
                                      grammar, see:
                                      https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                    "endpointNames": [
                                        "str"  # The list of endpoints to
                                          which messages that satisfy the condition are routed.
                                          Currently only one endpoint is allowed. Required.
                                    ],
                                    "isEnabled": bool,  # Used to specify whether
                                      a route is enabled. Required.
                                    "name": "str",  # The name of the route. The
                                      name can only include alphanumeric characters, periods,
                                      underscores, hyphens, has a maximum length of 64 characters, and
                                      must be unique. Required.
                                    "source": "str"  # The source that the
                                      routing rule is to be applied to, such as DeviceMessages.
                                      Required. Known values are: "Invalid", "DeviceMessages",
                                      "TwinChangeEvents", "DeviceLifecycleEvents",
                                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                                }
                            ]
                        },
                        "state": "str",  # Optional. The hub state.
                        "storageEndpoints": {
                            "str": {
                                "authenticationType": "str",  # Optional. Specifies
                                  authentication type being used for connecting to the storage account.
                                  Known values are: "keyBased" and "identityBased".
                                "connectionString": "str",  # The connection string
                                  for the Azure Storage account to which files are uploaded. Required.
                                "containerName": "str",  # The name of the root
                                  container where you upload files. The container need not exist but
                                  should be creatable using the connectionString specified. Required.
                                "identity": {
                                    "userAssignedIdentity": "str"  # Optional.
                                      The user assigned identity.
                                },
                                "sasTtlAsIso8601": "1 day, 0:00:00"  # Optional. The
                                  period of time for which the SAS URI generated by IoT Hub for file
                                  upload is valid. See:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
                            }
                        }
                    },
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_iot_hub_resource_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_stats(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> JSON:
        """Get the statistics from an IoT hub.

        Get the statistics from an IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "disabledDeviceCount": 0,  # Optional. The count of disabled devices in the
                      identity registry.
                    "enabledDeviceCount": 0,  # Optional. The count of enabled devices in the
                      identity registry.
                    "totalDeviceCount": 0  # Optional. The total count of devices in the identity
                      registry.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_iot_hub_resource_get_stats_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get_valid_skus(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> Iterable[JSON]:
        """Get the list of valid SKUs for an IoT hub.

        Get the list of valid SKUs for an IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "capacity": {
                        "default": 0,  # Optional. The default number of units.
                        "maximum": 0,  # Optional. The maximum number of units.
                        "minimum": 0,  # Optional. The minimum number of units.
                        "scaleType": "str"  # Optional. The type of the scaling enabled.
                          Known values are: "Automatic", "Manual", and "None".
                    },
                    "resourceType": "str",  # Optional. The type of the resource.
                    "sku": {
                        "capacity": 0,  # Optional. The number of provisioned IoT Hub units.
                          See:
                          https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
                        "name": "str",  # The name of the SKU. Required. Known values are:
                          "F1", "S1", "S2", "S3", "B1", "B2", and "B3".
                        "tier": "str"  # Optional. The billing tier for the IoT hub. Known
                          values are: "Free", "Standard", and "Basic".
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_iot_hub_resource_get_valid_skus_request(
                    resource_group_name=resource_group_name,
                    resource_name=resource_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_event_hub_consumer_groups(
        self, resource_group_name: str, resource_name: str, event_hub_endpoint_name: str, **kwargs: Any
    ) -> Iterable[JSON]:
        """Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an
        IoT hub.

        Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an
        IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param event_hub_endpoint_name: The name of the Event Hub-compatible endpoint. Required.
        :type event_hub_endpoint_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The etag.
                    "id": "str",  # Optional. The Event Hub-compatible consumer group identifier.
                    "name": "str",  # Optional. The Event Hub-compatible consumer group name.
                    "properties": {
                        "str": {}  # Optional. The tags.
                    },
                    "type": "str"  # Optional. the resource type.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_iot_hub_resource_list_event_hub_consumer_groups_request(
                    resource_group_name=resource_group_name,
                    resource_name=resource_name,
                    event_hub_endpoint_name=event_hub_endpoint_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_event_hub_consumer_group(
        self, resource_group_name: str, resource_name: str, event_hub_endpoint_name: str, name: str, **kwargs: Any
    ) -> JSON:
        """Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.

        Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param event_hub_endpoint_name: The name of the Event Hub-compatible endpoint in the IoT hub.
         Required.
        :type event_hub_endpoint_name: str
        :param name: The name of the consumer group to retrieve. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The etag.
                    "id": "str",  # Optional. The Event Hub-compatible consumer group identifier.
                    "name": "str",  # Optional. The Event Hub-compatible consumer group name.
                    "properties": {
                        "str": {}  # Optional. The tags.
                    },
                    "type": "str"  # Optional. the resource type.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_iot_hub_resource_get_event_hub_consumer_group_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            event_hub_endpoint_name=event_hub_endpoint_name,
            name=name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def create_event_hub_consumer_group(
        self,
        resource_group_name: str,
        resource_name: str,
        event_hub_endpoint_name: str,
        name: str,
        consumer_group_body: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.

        Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param event_hub_endpoint_name: The name of the Event Hub-compatible endpoint in the IoT hub.
         Required.
        :type event_hub_endpoint_name: str
        :param name: The name of the consumer group to add. Required.
        :type name: str
        :param consumer_group_body: The consumer group to add. Required.
        :type consumer_group_body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                consumer_group_body = {
                    "properties": {
                        "name": "str"  # EventHub consumer group name. Required.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The etag.
                    "id": "str",  # Optional. The Event Hub-compatible consumer group identifier.
                    "name": "str",  # Optional. The Event Hub-compatible consumer group name.
                    "properties": {
                        "str": {}  # Optional. The tags.
                    },
                    "type": "str"  # Optional. the resource type.
                }
        """

    @overload
    def create_event_hub_consumer_group(
        self,
        resource_group_name: str,
        resource_name: str,
        event_hub_endpoint_name: str,
        name: str,
        consumer_group_body: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.

        Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param event_hub_endpoint_name: The name of the Event Hub-compatible endpoint in the IoT hub.
         Required.
        :type event_hub_endpoint_name: str
        :param name: The name of the consumer group to add. Required.
        :type name: str
        :param consumer_group_body: The consumer group to add. Required.
        :type consumer_group_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The etag.
                    "id": "str",  # Optional. The Event Hub-compatible consumer group identifier.
                    "name": "str",  # Optional. The Event Hub-compatible consumer group name.
                    "properties": {
                        "str": {}  # Optional. The tags.
                    },
                    "type": "str"  # Optional. the resource type.
                }
        """

    @distributed_trace
    def create_event_hub_consumer_group(
        self,
        resource_group_name: str,
        resource_name: str,
        event_hub_endpoint_name: str,
        name: str,
        consumer_group_body: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        """Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.

        Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param event_hub_endpoint_name: The name of the Event Hub-compatible endpoint in the IoT hub.
         Required.
        :type event_hub_endpoint_name: str
        :param name: The name of the consumer group to add. Required.
        :type name: str
        :param consumer_group_body: The consumer group to add. Is either a model type or a IO type.
         Required.
        :type consumer_group_body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The etag.
                    "id": "str",  # Optional. The Event Hub-compatible consumer group identifier.
                    "name": "str",  # Optional. The Event Hub-compatible consumer group name.
                    "properties": {
                        "str": {}  # Optional. The tags.
                    },
                    "type": "str"  # Optional. the resource type.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(consumer_group_body, (IO, bytes)):
            _content = consumer_group_body
        else:
            _json = consumer_group_body

        request = build_iot_hub_resource_create_event_hub_consumer_group_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            event_hub_endpoint_name=event_hub_endpoint_name,
            name=name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def delete_event_hub_consumer_group(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, resource_name: str, event_hub_endpoint_name: str, name: str, **kwargs: Any
    ) -> None:
        """Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.

        Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param event_hub_endpoint_name: The name of the Event Hub-compatible endpoint in the IoT hub.
         Required.
        :type event_hub_endpoint_name: str
        :param name: The name of the consumer group to delete. Required.
        :type name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_iot_hub_resource_delete_event_hub_consumer_group_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            event_hub_endpoint_name=event_hub_endpoint_name,
            name=name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def list_jobs(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> Iterable[JSON]:
        """Get a list of all the jobs in an IoT hub. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.

        Get a list of all the jobs in an IoT hub. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "endTimeUtc": "2020-02-20 00:00:00",  # Optional. The time the job stopped
                      processing.
                    "failureReason": "str",  # Optional. If status == failed, this string
                      containing the reason for the failure.
                    "jobId": "str",  # Optional. The job identifier.
                    "parentJobId": "str",  # Optional. The job identifier of the parent job, if
                      any.
                    "startTimeUtc": "2020-02-20 00:00:00",  # Optional. The start time of the
                      job.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "unknown", "enqueued", "running", "completed", "failed", and "cancelled".
                    "statusMessage": "str",  # Optional. The status message for the job.
                    "type": "str"  # Optional. The type of the job. Known values are: "unknown",
                      "export", "import", "backup", "readDeviceProperties", "writeDeviceProperties",
                      "updateDeviceConfiguration", "rebootDevice", "factoryResetDevice", and
                      "firmwareUpdate".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_iot_hub_resource_list_jobs_request(
                    resource_group_name=resource_group_name,
                    resource_name=resource_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_job(self, resource_group_name: str, resource_name: str, job_id: str, **kwargs: Any) -> JSON:
        """Get the details of a job from an IoT hub. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.

        Get the details of a job from an IoT hub. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param job_id: The job identifier. Required.
        :type job_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "endTimeUtc": "2020-02-20 00:00:00",  # Optional. The time the job stopped
                      processing.
                    "failureReason": "str",  # Optional. If status == failed, this string
                      containing the reason for the failure.
                    "jobId": "str",  # Optional. The job identifier.
                    "parentJobId": "str",  # Optional. The job identifier of the parent job, if
                      any.
                    "startTimeUtc": "2020-02-20 00:00:00",  # Optional. The start time of the
                      job.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "unknown", "enqueued", "running", "completed", "failed", and "cancelled".
                    "statusMessage": "str",  # Optional. The status message for the job.
                    "type": "str"  # Optional. The type of the job. Known values are: "unknown",
                      "export", "import", "backup", "readDeviceProperties", "writeDeviceProperties",
                      "updateDeviceConfiguration", "rebootDevice", "factoryResetDevice", and
                      "firmwareUpdate".
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_iot_hub_resource_get_job_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            job_id=job_id,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get_quota_metrics(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> Iterable[JSON]:
        """Get the quota metrics for an IoT hub.

        Get the quota metrics for an IoT hub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "currentValue": 0,  # Optional. The current value for the quota metric.
                    "maxValue": 0,  # Optional. The maximum value of the quota metric.
                    "name": "str"  # Optional. The name of the quota metric.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_iot_hub_resource_get_quota_metrics_request(
                    resource_group_name=resource_group_name,
                    resource_name=resource_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_endpoint_health(self, resource_group_name: str, iot_hub_name: str, **kwargs: Any) -> Iterable[JSON]:
        """Get the health for routing endpoints.

        Get the health for routing endpoints.

        :param resource_group_name: Required.
        :type resource_group_name: str
        :param iot_hub_name: Required.
        :type iot_hub_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "endpointId": "str",  # Optional. Id of the endpoint.
                    "healthStatus": "str",  # Optional. Health statuses have following meanings.
                      The 'healthy' status shows that the endpoint is accepting messages as expected.
                      The 'unhealthy' status shows that the endpoint is not accepting messages as
                      expected and IoT Hub is retrying to send data to this endpoint. The status of an
                      unhealthy endpoint will be updated to healthy when IoT Hub has established an
                      eventually consistent state of health. The 'dead' status shows that the endpoint
                      is not accepting messages, after IoT Hub retried sending messages for the retrial
                      period. See IoT Hub metrics to identify errors and monitor issues with endpoints.
                      The 'unknown' status shows that the IoT Hub has not established a connection with
                      the endpoint. No messages have been delivered to or rejected from this endpoint.
                      Known values are: "unknown", "healthy", "degraded", "unhealthy", and "dead".
                    "lastKnownError": "str",  # Optional. Last error obtained when a message
                      failed to be delivered to iot hub.
                    "lastKnownErrorTime": "2020-02-20 00:00:00",  # Optional. Time at which the
                      last known error occurred.
                    "lastSendAttemptTime": "2020-02-20 00:00:00",  # Optional. Last time iot hub
                      tried to send a message to the endpoint.
                    "lastSuccessfulSendAttemptTime": "2020-02-20 00:00:00"  # Optional. Last time
                      iot hub successfully sent a message to the endpoint.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_iot_hub_resource_get_endpoint_health_request(
                    resource_group_name=resource_group_name,
                    iot_hub_name=iot_hub_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @overload
    def check_name_availability(
        self, operation_inputs: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Check if an IoT hub name is available.

        Check if an IoT hub name is available.

        :param operation_inputs: Set the name parameter in the OperationInputs structure to the name of
         the IoT hub to check. Required.
        :type operation_inputs: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                operation_inputs = {
                    "name": "str"  # The name of the IoT hub to check. Required.
                }

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. The detailed reason message.
                    "nameAvailable": bool,  # Optional. The value which indicates whether the
                      provided name is available.
                    "reason": "str"  # Optional. The reason for unavailability. Known values are:
                      "Invalid" and "AlreadyExists".
                }
        """

    @overload
    def check_name_availability(
        self, operation_inputs: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Check if an IoT hub name is available.

        Check if an IoT hub name is available.

        :param operation_inputs: Set the name parameter in the OperationInputs structure to the name of
         the IoT hub to check. Required.
        :type operation_inputs: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. The detailed reason message.
                    "nameAvailable": bool,  # Optional. The value which indicates whether the
                      provided name is available.
                    "reason": "str"  # Optional. The reason for unavailability. Known values are:
                      "Invalid" and "AlreadyExists".
                }
        """

    @distributed_trace
    def check_name_availability(self, operation_inputs: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Check if an IoT hub name is available.

        Check if an IoT hub name is available.

        :param operation_inputs: Set the name parameter in the OperationInputs structure to the name of
         the IoT hub to check. Is either a model type or a IO type. Required.
        :type operation_inputs: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. The detailed reason message.
                    "nameAvailable": bool,  # Optional. The value which indicates whether the
                      provided name is available.
                    "reason": "str"  # Optional. The reason for unavailability. Known values are:
                      "Invalid" and "AlreadyExists".
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(operation_inputs, (IO, bytes)):
            _content = operation_inputs
        else:
            _json = operation_inputs

        request = build_iot_hub_resource_check_name_availability_request(
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def test_all_routes(
        self,
        iot_hub_name: str,
        resource_group_name: str,
        input: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Test all routes.

        Test all routes configured in this Iot Hub.

        :param iot_hub_name: IotHub to be tested. Required.
        :type iot_hub_name: str
        :param resource_group_name: resource group which Iot Hub belongs to. Required.
        :type resource_group_name: str
        :param input: Input for testing all routes. Required.
        :type input: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                input = {
                    "message": {
                        "appProperties": {
                            "str": "str"  # Optional. App properties.
                        },
                        "body": "str",  # Optional. Body of routing message.
                        "systemProperties": {
                            "str": "str"  # Optional. System properties.
                        }
                    },
                    "routingSource": "str",  # Optional. Routing source. Known values are:
                      "Invalid", "DeviceMessages", "TwinChangeEvents", "DeviceLifecycleEvents",
                      "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                      "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                    "twin": {
                        "properties": {
                            "desired": {},  # Optional. Twin desired properties.
                            "reported": {}  # Optional. Twin desired properties.
                        },
                        "tags": {}  # Optional. Twin Tags.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "routes": [
                        {
                            "properties": {
                                "condition": "str",  # Optional. The condition that
                                  is evaluated to apply the routing rule. If no condition is provided,
                                  it evaluates to true by default. For grammar, see:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which
                                      messages that satisfy the condition are routed. Currently only
                                      one endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether a route
                                  is enabled. Required.
                                "name": "str",  # The name of the route. The name can
                                  only include alphanumeric characters, periods, underscores, hyphens,
                                  has a maximum length of 64 characters, and must be unique. Required.
                                "source": "str"  # The source that the routing rule
                                  is to be applied to, such as DeviceMessages. Required. Known values
                                  are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            }
                        }
                    ]
                }
        """

    @overload
    def test_all_routes(
        self,
        iot_hub_name: str,
        resource_group_name: str,
        input: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Test all routes.

        Test all routes configured in this Iot Hub.

        :param iot_hub_name: IotHub to be tested. Required.
        :type iot_hub_name: str
        :param resource_group_name: resource group which Iot Hub belongs to. Required.
        :type resource_group_name: str
        :param input: Input for testing all routes. Required.
        :type input: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "routes": [
                        {
                            "properties": {
                                "condition": "str",  # Optional. The condition that
                                  is evaluated to apply the routing rule. If no condition is provided,
                                  it evaluates to true by default. For grammar, see:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which
                                      messages that satisfy the condition are routed. Currently only
                                      one endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether a route
                                  is enabled. Required.
                                "name": "str",  # The name of the route. The name can
                                  only include alphanumeric characters, periods, underscores, hyphens,
                                  has a maximum length of 64 characters, and must be unique. Required.
                                "source": "str"  # The source that the routing rule
                                  is to be applied to, such as DeviceMessages. Required. Known values
                                  are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            }
                        }
                    ]
                }
        """

    @distributed_trace
    def test_all_routes(
        self, iot_hub_name: str, resource_group_name: str, input: Union[JSON, IO], **kwargs: Any
    ) -> JSON:
        """Test all routes.

        Test all routes configured in this Iot Hub.

        :param iot_hub_name: IotHub to be tested. Required.
        :type iot_hub_name: str
        :param resource_group_name: resource group which Iot Hub belongs to. Required.
        :type resource_group_name: str
        :param input: Input for testing all routes. Is either a model type or a IO type. Required.
        :type input: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "routes": [
                        {
                            "properties": {
                                "condition": "str",  # Optional. The condition that
                                  is evaluated to apply the routing rule. If no condition is provided,
                                  it evaluates to true by default. For grammar, see:
                                  https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                                "endpointNames": [
                                    "str"  # The list of endpoints to which
                                      messages that satisfy the condition are routed. Currently only
                                      one endpoint is allowed. Required.
                                ],
                                "isEnabled": bool,  # Used to specify whether a route
                                  is enabled. Required.
                                "name": "str",  # The name of the route. The name can
                                  only include alphanumeric characters, periods, underscores, hyphens,
                                  has a maximum length of 64 characters, and must be unique. Required.
                                "source": "str"  # The source that the routing rule
                                  is to be applied to, such as DeviceMessages. Required. Known values
                                  are: "Invalid", "DeviceMessages", "TwinChangeEvents",
                                  "DeviceLifecycleEvents", "DeviceJobLifecycleEvents",
                                  "DigitalTwinChangeEvents", "DeviceConnectionStateEvents", and
                                  "MqttBrokerMessages".
                            }
                        }
                    ]
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(input, (IO, bytes)):
            _content = input
        else:
            _json = input

        request = build_iot_hub_resource_test_all_routes_request(
            iot_hub_name=iot_hub_name,
            resource_group_name=resource_group_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def test_route(
        self,
        iot_hub_name: str,
        resource_group_name: str,
        input: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Test the new route.

        Test the new route for this Iot Hub.

        :param iot_hub_name: IotHub to be tested. Required.
        :type iot_hub_name: str
        :param resource_group_name: resource group which Iot Hub belongs to. Required.
        :type resource_group_name: str
        :param input: Route that needs to be tested. Required.
        :type input: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                input = {
                    "message": {
                        "appProperties": {
                            "str": "str"  # Optional. App properties.
                        },
                        "body": "str",  # Optional. Body of routing message.
                        "systemProperties": {
                            "str": "str"  # Optional. System properties.
                        }
                    },
                    "route": {
                        "condition": "str",  # Optional. The condition that is evaluated to
                          apply the routing rule. If no condition is provided, it evaluates to true by
                          default. For grammar, see:
                          https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
                        "endpointNames": [
                            "str"  # The list of endpoints to which messages that satisfy
                              the condition are routed. Currently only one endpoint is allowed.
                              Required.
                        ],
                        "isEnabled": bool,  # Used to specify whether a route is enabled.
                          Required.
                        "name": "str",  # The name of the route. The name can only include
                          alphanumeric characters, periods, underscores, hyphens, has a maximum length
                          of 64 characters, and must be unique. Required.
                        "source": "str"  # The source that the routing rule is to be applied
                          to, such as DeviceMessages. Required. Known values are: "Invalid",
                          "DeviceMessages", "TwinChangeEvents", "DeviceLifecycleEvents",
                          "DeviceJobLifecycleEvents", "DigitalTwinChangeEvents",
                          "DeviceConnectionStateEvents", and "MqttBrokerMessages".
                    },
                    "twin": {
                        "properties": {
                            "desired": {},  # Optional. Twin desired properties.
                            "reported": {}  # Optional. Twin desired properties.
                        },
                        "tags": {}  # Optional. Twin Tags.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "details": {
                        "compilationErrors": [
                            {
                                "location": {
                                    "end": {
                                        "column": 0,  # Optional. Column
                                          where the route error happened.
                                        "line": 0  # Optional. Line where the
                                          route error happened.
                                    },
                                    "start": {
                                        "column": 0,  # Optional. Column
                                          where the route error happened.
                                        "line": 0  # Optional. Line where the
                                          route error happened.
                                    }
                                },
                                "message": "str",  # Optional. Route error message.
                                "severity": "str"  # Optional. Severity of the route
                                  error. Known values are: "error" and "warning".
                            }
                        ]
                    },
                    "result": "str"  # Optional. Result of testing route. Known values are:
                      "undefined", "false", and "true".
                }
        """

    @overload
    def test_route(
        self,
        iot_hub_name: str,
        resource_group_name: str,
        input: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Test the new route.

        Test the new route for this Iot Hub.

        :param iot_hub_name: IotHub to be tested. Required.
        :type iot_hub_name: str
        :param resource_group_name: resource group which Iot Hub belongs to. Required.
        :type resource_group_name: str
        :param input: Route that needs to be tested. Required.
        :type input: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "details": {
                        "compilationErrors": [
                            {
                                "location": {
                                    "end": {
                                        "column": 0,  # Optional. Column
                                          where the route error happened.
                                        "line": 0  # Optional. Line where the
                                          route error happened.
                                    },
                                    "start": {
                                        "column": 0,  # Optional. Column
                                          where the route error happened.
                                        "line": 0  # Optional. Line where the
                                          route error happened.
                                    }
                                },
                                "message": "str",  # Optional. Route error message.
                                "severity": "str"  # Optional. Severity of the route
                                  error. Known values are: "error" and "warning".
                            }
                        ]
                    },
                    "result": "str"  # Optional. Result of testing route. Known values are:
                      "undefined", "false", and "true".
                }
        """

    @distributed_trace
    def test_route(self, iot_hub_name: str, resource_group_name: str, input: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Test the new route.

        Test the new route for this Iot Hub.

        :param iot_hub_name: IotHub to be tested. Required.
        :type iot_hub_name: str
        :param resource_group_name: resource group which Iot Hub belongs to. Required.
        :type resource_group_name: str
        :param input: Route that needs to be tested. Is either a model type or a IO type. Required.
        :type input: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "details": {
                        "compilationErrors": [
                            {
                                "location": {
                                    "end": {
                                        "column": 0,  # Optional. Column
                                          where the route error happened.
                                        "line": 0  # Optional. Line where the
                                          route error happened.
                                    },
                                    "start": {
                                        "column": 0,  # Optional. Column
                                          where the route error happened.
                                        "line": 0  # Optional. Line where the
                                          route error happened.
                                    }
                                },
                                "message": "str",  # Optional. Route error message.
                                "severity": "str"  # Optional. Severity of the route
                                  error. Known values are: "error" and "warning".
                            }
                        ]
                    },
                    "result": "str"  # Optional. Result of testing route. Known values are:
                      "undefined", "false", and "true".
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(input, (IO, bytes)):
            _content = input
        else:
            _json = input

        request = build_iot_hub_resource_test_route_request(
            iot_hub_name=iot_hub_name,
            resource_group_name=resource_group_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_keys(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> Iterable[JSON]:
        """Get the security metadata for an IoT hub. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.

        Get the security metadata for an IoT hub. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "keyName": "str",  # The name of the shared access policy. Required.
                    "primaryKey": "str",  # Optional. The primary key.
                    "rights": "str",  # The permissions assigned to the shared access policy.
                      Required. Known values are: "RegistryRead", "RegistryWrite", "ServiceConnect",
                      "DeviceConnect", "RegistryRead, RegistryWrite", "RegistryRead, ServiceConnect",
                      "RegistryRead, DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                      DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead, RegistryWrite,
                      ServiceConnect", "RegistryRead, RegistryWrite, DeviceConnect", "RegistryRead,
                      ServiceConnect, DeviceConnect", "RegistryWrite, ServiceConnect, DeviceConnect",
                      and "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect".
                    "secondaryKey": "str"  # Optional. The secondary key.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_iot_hub_resource_list_keys_request(
                    resource_group_name=resource_group_name,
                    resource_name=resource_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request.url = self._client.format_url(request.url)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_keys_for_key_name(self, resource_group_name: str, resource_name: str, key_name: str, **kwargs: Any) -> JSON:
        """Get a shared access policy by name from an IoT hub. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.

        Get a shared access policy by name from an IoT hub. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param key_name: The name of the shared access policy. Required.
        :type key_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "keyName": "str",  # The name of the shared access policy. Required.
                    "primaryKey": "str",  # Optional. The primary key.
                    "rights": "str",  # The permissions assigned to the shared access policy.
                      Required. Known values are: "RegistryRead", "RegistryWrite", "ServiceConnect",
                      "DeviceConnect", "RegistryRead, RegistryWrite", "RegistryRead, ServiceConnect",
                      "RegistryRead, DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite,
                      DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead, RegistryWrite,
                      ServiceConnect", "RegistryRead, RegistryWrite, DeviceConnect", "RegistryRead,
                      ServiceConnect, DeviceConnect", "RegistryWrite, ServiceConnect, DeviceConnect",
                      and "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect".
                    "secondaryKey": "str"  # Optional. The secondary key.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_iot_hub_resource_get_keys_for_key_name_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            key_name=key_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def export_devices(
        self,
        resource_group_name: str,
        resource_name: str,
        export_devices_parameters: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Exports all the device identities in the IoT hub identity registry to an Azure Storage blob
        container. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        Exports all the device identities in the IoT hub identity registry to an Azure Storage blob
        container. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param export_devices_parameters: The parameters that specify the export devices operation.
         Required.
        :type export_devices_parameters: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                export_devices_parameters = {
                    "authenticationType": "str",  # Optional. Specifies authentication type being
                      used for connecting to the storage account. Known values are: "keyBased" and
                      "identityBased".
                    "configurationsBlobName": "str",  # Optional. The name of the blob that will
                      be created in the provided output blob container. This blob will contain the
                      exported configurations for the Iot Hub.
                    "excludeKeys": bool,  # The value indicating whether keys should be excluded
                      during export. Required.
                    "exportBlobContainerUri": "str",  # The export blob container URI. Required.
                    "exportBlobName": "str",  # Optional. The name of the blob that will be
                      created in the provided output blob container. This blob will contain the
                      exported device registry information for the IoT Hub.
                    "identity": {
                        "userAssignedIdentity": "str"  # Optional. The user assigned
                          identity.
                    },
                    "includeConfigurations": bool  # Optional. The value indicating whether
                      configurations should be exported.
                }

                # response body for status code(s): 200
                response == {
                    "endTimeUtc": "2020-02-20 00:00:00",  # Optional. The time the job stopped
                      processing.
                    "failureReason": "str",  # Optional. If status == failed, this string
                      containing the reason for the failure.
                    "jobId": "str",  # Optional. The job identifier.
                    "parentJobId": "str",  # Optional. The job identifier of the parent job, if
                      any.
                    "startTimeUtc": "2020-02-20 00:00:00",  # Optional. The start time of the
                      job.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "unknown", "enqueued", "running", "completed", "failed", and "cancelled".
                    "statusMessage": "str",  # Optional. The status message for the job.
                    "type": "str"  # Optional. The type of the job. Known values are: "unknown",
                      "export", "import", "backup", "readDeviceProperties", "writeDeviceProperties",
                      "updateDeviceConfiguration", "rebootDevice", "factoryResetDevice", and
                      "firmwareUpdate".
                }
        """

    @overload
    def export_devices(
        self,
        resource_group_name: str,
        resource_name: str,
        export_devices_parameters: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Exports all the device identities in the IoT hub identity registry to an Azure Storage blob
        container. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        Exports all the device identities in the IoT hub identity registry to an Azure Storage blob
        container. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param export_devices_parameters: The parameters that specify the export devices operation.
         Required.
        :type export_devices_parameters: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "endTimeUtc": "2020-02-20 00:00:00",  # Optional. The time the job stopped
                      processing.
                    "failureReason": "str",  # Optional. If status == failed, this string
                      containing the reason for the failure.
                    "jobId": "str",  # Optional. The job identifier.
                    "parentJobId": "str",  # Optional. The job identifier of the parent job, if
                      any.
                    "startTimeUtc": "2020-02-20 00:00:00",  # Optional. The start time of the
                      job.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "unknown", "enqueued", "running", "completed", "failed", and "cancelled".
                    "statusMessage": "str",  # Optional. The status message for the job.
                    "type": "str"  # Optional. The type of the job. Known values are: "unknown",
                      "export", "import", "backup", "readDeviceProperties", "writeDeviceProperties",
                      "updateDeviceConfiguration", "rebootDevice", "factoryResetDevice", and
                      "firmwareUpdate".
                }
        """

    @distributed_trace
    def export_devices(
        self, resource_group_name: str, resource_name: str, export_devices_parameters: Union[JSON, IO], **kwargs: Any
    ) -> JSON:
        """Exports all the device identities in the IoT hub identity registry to an Azure Storage blob
        container. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        Exports all the device identities in the IoT hub identity registry to an Azure Storage blob
        container. For more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param export_devices_parameters: The parameters that specify the export devices operation. Is
         either a model type or a IO type. Required.
        :type export_devices_parameters: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "endTimeUtc": "2020-02-20 00:00:00",  # Optional. The time the job stopped
                      processing.
                    "failureReason": "str",  # Optional. If status == failed, this string
                      containing the reason for the failure.
                    "jobId": "str",  # Optional. The job identifier.
                    "parentJobId": "str",  # Optional. The job identifier of the parent job, if
                      any.
                    "startTimeUtc": "2020-02-20 00:00:00",  # Optional. The start time of the
                      job.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "unknown", "enqueued", "running", "completed", "failed", and "cancelled".
                    "statusMessage": "str",  # Optional. The status message for the job.
                    "type": "str"  # Optional. The type of the job. Known values are: "unknown",
                      "export", "import", "backup", "readDeviceProperties", "writeDeviceProperties",
                      "updateDeviceConfiguration", "rebootDevice", "factoryResetDevice", and
                      "firmwareUpdate".
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(export_devices_parameters, (IO, bytes)):
            _content = export_devices_parameters
        else:
            _json = export_devices_parameters

        request = build_iot_hub_resource_export_devices_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def import_devices(
        self,
        resource_group_name: str,
        resource_name: str,
        import_devices_parameters: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Import, update, or delete device identities in the IoT hub identity registry from a blob. For
        more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        Import, update, or delete device identities in the IoT hub identity registry from a blob. For
        more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param import_devices_parameters: The parameters that specify the import devices operation.
         Required.
        :type import_devices_parameters: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                import_devices_parameters = {
                    "authenticationType": "str",  # Optional. Specifies authentication type being
                      used for connecting to the storage account. Known values are: "keyBased" and
                      "identityBased".
                    "configurationsBlobName": "str",  # Optional. The blob name to be used when
                      importing configurations from the provided input blob container.
                    "identity": {
                        "userAssignedIdentity": "str"  # Optional. The user assigned
                          identity.
                    },
                    "includeConfigurations": bool,  # Optional. The value indicating whether
                      configurations should be imported.
                    "inputBlobContainerUri": "str",  # The input blob container URI. Required.
                    "inputBlobName": "str",  # Optional. The blob name to be used when importing
                      from the provided input blob container.
                    "outputBlobContainerUri": "str",  # The output blob container URI. Required.
                    "outputBlobName": "str"  # Optional. The blob name to use for storing the
                      status of the import job.
                }

                # response body for status code(s): 200
                response == {
                    "endTimeUtc": "2020-02-20 00:00:00",  # Optional. The time the job stopped
                      processing.
                    "failureReason": "str",  # Optional. If status == failed, this string
                      containing the reason for the failure.
                    "jobId": "str",  # Optional. The job identifier.
                    "parentJobId": "str",  # Optional. The job identifier of the parent job, if
                      any.
                    "startTimeUtc": "2020-02-20 00:00:00",  # Optional. The start time of the
                      job.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "unknown", "enqueued", "running", "completed", "failed", and "cancelled".
                    "statusMessage": "str",  # Optional. The status message for the job.
                    "type": "str"  # Optional. The type of the job. Known values are: "unknown",
                      "export", "import", "backup", "readDeviceProperties", "writeDeviceProperties",
                      "updateDeviceConfiguration", "rebootDevice", "factoryResetDevice", and
                      "firmwareUpdate".
                }
        """

    @overload
    def import_devices(
        self,
        resource_group_name: str,
        resource_name: str,
        import_devices_parameters: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Import, update, or delete device identities in the IoT hub identity registry from a blob. For
        more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        Import, update, or delete device identities in the IoT hub identity registry from a blob. For
        more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param import_devices_parameters: The parameters that specify the import devices operation.
         Required.
        :type import_devices_parameters: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "endTimeUtc": "2020-02-20 00:00:00",  # Optional. The time the job stopped
                      processing.
                    "failureReason": "str",  # Optional. If status == failed, this string
                      containing the reason for the failure.
                    "jobId": "str",  # Optional. The job identifier.
                    "parentJobId": "str",  # Optional. The job identifier of the parent job, if
                      any.
                    "startTimeUtc": "2020-02-20 00:00:00",  # Optional. The start time of the
                      job.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "unknown", "enqueued", "running", "completed", "failed", and "cancelled".
                    "statusMessage": "str",  # Optional. The status message for the job.
                    "type": "str"  # Optional. The type of the job. Known values are: "unknown",
                      "export", "import", "backup", "readDeviceProperties", "writeDeviceProperties",
                      "updateDeviceConfiguration", "rebootDevice", "factoryResetDevice", and
                      "firmwareUpdate".
                }
        """

    @distributed_trace
    def import_devices(
        self, resource_group_name: str, resource_name: str, import_devices_parameters: Union[JSON, IO], **kwargs: Any
    ) -> JSON:
        """Import, update, or delete device identities in the IoT hub identity registry from a blob. For
        more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        Import, update, or delete device identities in the IoT hub identity registry from a blob. For
        more information, see:
        https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param import_devices_parameters: The parameters that specify the import devices operation. Is
         either a model type or a IO type. Required.
        :type import_devices_parameters: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "endTimeUtc": "2020-02-20 00:00:00",  # Optional. The time the job stopped
                      processing.
                    "failureReason": "str",  # Optional. If status == failed, this string
                      containing the reason for the failure.
                    "jobId": "str",  # Optional. The job identifier.
                    "parentJobId": "str",  # Optional. The job identifier of the parent job, if
                      any.
                    "startTimeUtc": "2020-02-20 00:00:00",  # Optional. The start time of the
                      job.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "unknown", "enqueued", "running", "completed", "failed", and "cancelled".
                    "statusMessage": "str",  # Optional. The status message for the job.
                    "type": "str"  # Optional. The type of the job. Known values are: "unknown",
                      "export", "import", "backup", "readDeviceProperties", "writeDeviceProperties",
                      "updateDeviceConfiguration", "rebootDevice", "factoryResetDevice", and
                      "firmwareUpdate".
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(import_devices_parameters, (IO, bytes)):
            _content = import_devices_parameters
        else:
            _json = import_devices_parameters

        request = build_iot_hub_resource_import_devices_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class ResourceProviderCommonOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.iothub.IotHubClient`'s
        :attr:`resource_provider_common` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get_subscription_quota(self, **kwargs: Any) -> JSON:
        """Get the number of iot hubs in the subscription.

        Get the number of free and paid iot hubs in the subscription.

        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "nextLink": "str",  # Optional.
                    "value": [
                        {
                            "currentValue": 0,  # Optional. Current number of IotHub
                              type.
                            "id": "str",  # Optional. IotHub type id.
                            "limit": 0,  # Optional. Numerical limit on IotHub type.
                            "name": {
                                "localizedValue": "str",  # Optional. Localized value
                                  of name.
                                "value": "str"  # Optional. IotHub type.
                            },
                            "type": "str",  # Optional. Response type.
                            "unit": "str"  # Optional. Unit of IotHub type.
                        }
                    ]
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_resource_provider_common_get_subscription_quota_request(
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class CertificatesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.iothub.IotHubClient`'s
        :attr:`certificates` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_by_iot_hub(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> JSON:
        """Get the certificate list.

        Returns the list of certificates.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "etag": "str",  # Optional. The entity tag.
                            "id": "str",  # Optional. The resource identifier.
                            "name": "str",  # Optional. The name of the certificate.
                            "properties": {
                                "certificate": "str",  # Optional. The certificate
                                  content.
                                "created": "2020-02-20 00:00:00",  # Optional. The
                                  certificate's create date and time.
                                "expiry": "2020-02-20 00:00:00",  # Optional. The
                                  certificate's expiration date and time.
                                "isVerified": bool,  # Optional. Determines whether
                                  certificate has been verified.
                                "subject": "str",  # Optional. The certificate's
                                  subject name.
                                "thumbprint": "str",  # Optional. The certificate's
                                  thumbprint.
                                "updated": "2020-02-20 00:00:00"  # Optional. The
                                  certificate's last update date and time.
                            },
                            "type": "str"  # Optional. The resource type.
                        }
                    ]
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_certificates_list_by_iot_hub_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get(self, resource_group_name: str, resource_name: str, certificate_name: str, **kwargs: Any) -> JSON:
        """Get the certificate.

        Returns the certificate.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param certificate_name: The name of the certificate. Required.
        :type certificate_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The entity tag.
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The name of the certificate.
                    "properties": {
                        "certificate": "str",  # Optional. The certificate content.
                        "created": "2020-02-20 00:00:00",  # Optional. The certificate's
                          create date and time.
                        "expiry": "2020-02-20 00:00:00",  # Optional. The certificate's
                          expiration date and time.
                        "isVerified": bool,  # Optional. Determines whether certificate has
                          been verified.
                        "subject": "str",  # Optional. The certificate's subject name.
                        "thumbprint": "str",  # Optional. The certificate's thumbprint.
                        "updated": "2020-02-20 00:00:00"  # Optional. The certificate's last
                          update date and time.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_certificates_get_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def create_or_update(
        self,
        resource_group_name: str,
        resource_name: str,
        certificate_name: str,
        certificate_description: JSON,
        *,
        if_match: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Upload the certificate to the IoT hub.

        Adds new or replaces existing certificate.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param certificate_name: The name of the certificate. Required.
        :type certificate_name: str
        :param certificate_description: The certificate body. Required.
        :type certificate_description: JSON
        :keyword if_match: ETag of the Certificate. Do not specify for creating a brand new
         certificate. Required to update an existing certificate. Default value is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                certificate_description = {
                    "etag": "str",  # Optional. The entity tag.
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The name of the certificate.
                    "properties": {
                        "certificate": "str",  # Optional. The certificate content.
                        "created": "2020-02-20 00:00:00",  # Optional. The certificate's
                          create date and time.
                        "expiry": "2020-02-20 00:00:00",  # Optional. The certificate's
                          expiration date and time.
                        "isVerified": bool,  # Optional. Determines whether certificate has
                          been verified.
                        "subject": "str",  # Optional. The certificate's subject name.
                        "thumbprint": "str",  # Optional. The certificate's thumbprint.
                        "updated": "2020-02-20 00:00:00"  # Optional. The certificate's last
                          update date and time.
                    },
                    "type": "str"  # Optional. The resource type.
                }

                # response body for status code(s): 200, 201
                response == {
                    "etag": "str",  # Optional. The entity tag.
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The name of the certificate.
                    "properties": {
                        "certificate": "str",  # Optional. The certificate content.
                        "created": "2020-02-20 00:00:00",  # Optional. The certificate's
                          create date and time.
                        "expiry": "2020-02-20 00:00:00",  # Optional. The certificate's
                          expiration date and time.
                        "isVerified": bool,  # Optional. Determines whether certificate has
                          been verified.
                        "subject": "str",  # Optional. The certificate's subject name.
                        "thumbprint": "str",  # Optional. The certificate's thumbprint.
                        "updated": "2020-02-20 00:00:00"  # Optional. The certificate's last
                          update date and time.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """

    @overload
    def create_or_update(
        self,
        resource_group_name: str,
        resource_name: str,
        certificate_name: str,
        certificate_description: IO,
        *,
        if_match: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Upload the certificate to the IoT hub.

        Adds new or replaces existing certificate.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param certificate_name: The name of the certificate. Required.
        :type certificate_name: str
        :param certificate_description: The certificate body. Required.
        :type certificate_description: IO
        :keyword if_match: ETag of the Certificate. Do not specify for creating a brand new
         certificate. Required to update an existing certificate. Default value is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "etag": "str",  # Optional. The entity tag.
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The name of the certificate.
                    "properties": {
                        "certificate": "str",  # Optional. The certificate content.
                        "created": "2020-02-20 00:00:00",  # Optional. The certificate's
                          create date and time.
                        "expiry": "2020-02-20 00:00:00",  # Optional. The certificate's
                          expiration date and time.
                        "isVerified": bool,  # Optional. Determines whether certificate has
                          been verified.
                        "subject": "str",  # Optional. The certificate's subject name.
                        "thumbprint": "str",  # Optional. The certificate's thumbprint.
                        "updated": "2020-02-20 00:00:00"  # Optional. The certificate's last
                          update date and time.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """

    @distributed_trace
    def create_or_update(
        self,
        resource_group_name: str,
        resource_name: str,
        certificate_name: str,
        certificate_description: Union[JSON, IO],
        *,
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Upload the certificate to the IoT hub.

        Adds new or replaces existing certificate.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param certificate_name: The name of the certificate. Required.
        :type certificate_name: str
        :param certificate_description: The certificate body. Is either a model type or a IO type.
         Required.
        :type certificate_description: JSON or IO
        :keyword if_match: ETag of the Certificate. Do not specify for creating a brand new
         certificate. Required to update an existing certificate. Default value is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "etag": "str",  # Optional. The entity tag.
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The name of the certificate.
                    "properties": {
                        "certificate": "str",  # Optional. The certificate content.
                        "created": "2020-02-20 00:00:00",  # Optional. The certificate's
                          create date and time.
                        "expiry": "2020-02-20 00:00:00",  # Optional. The certificate's
                          expiration date and time.
                        "isVerified": bool,  # Optional. Determines whether certificate has
                          been verified.
                        "subject": "str",  # Optional. The certificate's subject name.
                        "thumbprint": "str",  # Optional. The certificate's thumbprint.
                        "updated": "2020-02-20 00:00:00"  # Optional. The certificate's last
                          update date and time.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(certificate_description, (IO, bytes)):
            _content = certificate_description
        else:
            _json = certificate_description

        request = build_certificates_create_or_update_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            subscription_id=self._config.subscription_id,
            if_match=if_match,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, resource_name: str, certificate_name: str, *, if_match: str, **kwargs: Any
    ) -> None:
        """Delete an X509 certificate.

        Deletes an existing X509 certificate or does nothing if it does not exist.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param certificate_name: The name of the certificate. Required.
        :type certificate_name: str
        :keyword if_match: ETag of the Certificate. Required.
        :paramtype if_match: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_certificates_delete_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            subscription_id=self._config.subscription_id,
            if_match=if_match,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def generate_verification_code(
        self, resource_group_name: str, resource_name: str, certificate_name: str, *, if_match: str, **kwargs: Any
    ) -> JSON:
        """Generate verification code for proof of possession flow.

        Generates verification code for proof of possession flow. The verification code will be used to
        generate a leaf certificate.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param certificate_name: The name of the certificate. Required.
        :type certificate_name: str
        :keyword if_match: ETag of the Certificate. Required.
        :paramtype if_match: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The entity tag.
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The name of the certificate.
                    "properties": {
                        "certificate": "str",  # Optional. The certificate content.
                        "created": "2020-02-20 00:00:00",  # Optional. The certificate's
                          create date and time.
                        "expiry": "2020-02-20 00:00:00",  # Optional. The certificate's
                          expiration date and time.
                        "isVerified": bool,  # Optional. Determines whether certificate has
                          been verified.
                        "subject": "str",  # Optional. The certificate's subject name.
                        "thumbprint": "str",  # Optional. The certificate's thumbprint.
                        "updated": "2020-02-20 00:00:00",  # Optional. The certificate's last
                          update date and time.
                        "verificationCode": "str"  # Optional. The certificate's verification
                          code that will be used for proof of possession.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_certificates_generate_verification_code_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            subscription_id=self._config.subscription_id,
            if_match=if_match,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def verify(
        self,
        resource_group_name: str,
        resource_name: str,
        certificate_name: str,
        certificate_verification_body: JSON,
        *,
        if_match: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Verify certificate's private key possession.

        Verifies the certificate's private key possession by providing the leaf cert issued by the
        verifying pre uploaded certificate.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param certificate_name: The name of the certificate. Required.
        :type certificate_name: str
        :param certificate_verification_body: The name of the certificate. Required.
        :type certificate_verification_body: JSON
        :keyword if_match: ETag of the Certificate. Required.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                certificate_verification_body = {
                    "certificate": "str"  # Optional. base-64 representation of X509 certificate
                      .cer file or just .pem file content.
                }

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The entity tag.
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The name of the certificate.
                    "properties": {
                        "certificate": "str",  # Optional. The certificate content.
                        "created": "2020-02-20 00:00:00",  # Optional. The certificate's
                          create date and time.
                        "expiry": "2020-02-20 00:00:00",  # Optional. The certificate's
                          expiration date and time.
                        "isVerified": bool,  # Optional. Determines whether certificate has
                          been verified.
                        "subject": "str",  # Optional. The certificate's subject name.
                        "thumbprint": "str",  # Optional. The certificate's thumbprint.
                        "updated": "2020-02-20 00:00:00"  # Optional. The certificate's last
                          update date and time.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """

    @overload
    def verify(
        self,
        resource_group_name: str,
        resource_name: str,
        certificate_name: str,
        certificate_verification_body: IO,
        *,
        if_match: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Verify certificate's private key possession.

        Verifies the certificate's private key possession by providing the leaf cert issued by the
        verifying pre uploaded certificate.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param certificate_name: The name of the certificate. Required.
        :type certificate_name: str
        :param certificate_verification_body: The name of the certificate. Required.
        :type certificate_verification_body: IO
        :keyword if_match: ETag of the Certificate. Required.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The entity tag.
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The name of the certificate.
                    "properties": {
                        "certificate": "str",  # Optional. The certificate content.
                        "created": "2020-02-20 00:00:00",  # Optional. The certificate's
                          create date and time.
                        "expiry": "2020-02-20 00:00:00",  # Optional. The certificate's
                          expiration date and time.
                        "isVerified": bool,  # Optional. Determines whether certificate has
                          been verified.
                        "subject": "str",  # Optional. The certificate's subject name.
                        "thumbprint": "str",  # Optional. The certificate's thumbprint.
                        "updated": "2020-02-20 00:00:00"  # Optional. The certificate's last
                          update date and time.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """

    @distributed_trace
    def verify(
        self,
        resource_group_name: str,
        resource_name: str,
        certificate_name: str,
        certificate_verification_body: Union[JSON, IO],
        *,
        if_match: str,
        **kwargs: Any
    ) -> JSON:
        """Verify certificate's private key possession.

        Verifies the certificate's private key possession by providing the leaf cert issued by the
        verifying pre uploaded certificate.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param certificate_name: The name of the certificate. Required.
        :type certificate_name: str
        :param certificate_verification_body: The name of the certificate. Is either a model type or a
         IO type. Required.
        :type certificate_verification_body: JSON or IO
        :keyword if_match: ETag of the Certificate. Required.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # Optional. The entity tag.
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The name of the certificate.
                    "properties": {
                        "certificate": "str",  # Optional. The certificate content.
                        "created": "2020-02-20 00:00:00",  # Optional. The certificate's
                          create date and time.
                        "expiry": "2020-02-20 00:00:00",  # Optional. The certificate's
                          expiration date and time.
                        "isVerified": bool,  # Optional. Determines whether certificate has
                          been verified.
                        "subject": "str",  # Optional. The certificate's subject name.
                        "thumbprint": "str",  # Optional. The certificate's thumbprint.
                        "updated": "2020-02-20 00:00:00"  # Optional. The certificate's last
                          update date and time.
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(certificate_verification_body, (IO, bytes)):
            _content = certificate_verification_body
        else:
            _json = certificate_verification_body

        request = build_certificates_verify_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            certificate_name=certificate_name,
            subscription_id=self._config.subscription_id,
            if_match=if_match,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class IotHubOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.iothub.IotHubClient`'s
        :attr:`iot_hub` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    def _manual_failover_initial(  # pylint: disable=inconsistent-return-statements
        self, iot_hub_name: str, resource_group_name: str, failover_input: Union[JSON, IO], **kwargs: Any
    ) -> None:
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(failover_input, (IO, bytes)):
            _content = failover_input
        else:
            _json = failover_input

        request = build_iot_hub_manual_failover_request(
            iot_hub_name=iot_hub_name,
            resource_group_name=resource_group_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    def begin_manual_failover(
        self,
        iot_hub_name: str,
        resource_group_name: str,
        failover_input: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[None]:
        """Manually initiate a failover for the IoT Hub to its secondary region.

        Manually initiate a failover for the IoT Hub to its secondary region. To learn more, see
        https://aka.ms/manualfailover.

        :param iot_hub_name: Name of the IoT hub to failover. Required.
        :type iot_hub_name: str
        :param resource_group_name: Name of the resource group containing the IoT hub resource.
         Required.
        :type resource_group_name: str
        :param failover_input: Region to failover to. Must be the Azure paired region. Get the value
         from the secondary location in the locations property. To learn more, see
         https://aka.ms/manualfailover/region. Required.
        :type failover_input: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns None
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                failover_input = {
                    "failoverRegion": "str"  # Region the hub will be failed over to. Required.
                }
        """

    @overload
    def begin_manual_failover(
        self,
        iot_hub_name: str,
        resource_group_name: str,
        failover_input: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[None]:
        """Manually initiate a failover for the IoT Hub to its secondary region.

        Manually initiate a failover for the IoT Hub to its secondary region. To learn more, see
        https://aka.ms/manualfailover.

        :param iot_hub_name: Name of the IoT hub to failover. Required.
        :type iot_hub_name: str
        :param resource_group_name: Name of the resource group containing the IoT hub resource.
         Required.
        :type resource_group_name: str
        :param failover_input: Region to failover to. Must be the Azure paired region. Get the value
         from the secondary location in the locations property. To learn more, see
         https://aka.ms/manualfailover/region. Required.
        :type failover_input: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns None
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def begin_manual_failover(
        self, iot_hub_name: str, resource_group_name: str, failover_input: Union[JSON, IO], **kwargs: Any
    ) -> LROPoller[None]:
        """Manually initiate a failover for the IoT Hub to its secondary region.

        Manually initiate a failover for the IoT Hub to its secondary region. To learn more, see
        https://aka.ms/manualfailover.

        :param iot_hub_name: Name of the IoT hub to failover. Required.
        :type iot_hub_name: str
        :param resource_group_name: Name of the resource group containing the IoT hub resource.
         Required.
        :type resource_group_name: str
        :param failover_input: Region to failover to. Must be the Azure paired region. Get the value
         from the secondary location in the locations property. To learn more, see
         https://aka.ms/manualfailover/region. Is either a model type or a IO type. Required.
        :type failover_input: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns None
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        polling = kwargs.pop("polling", True)  # type: Union[bool, PollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._manual_failover_initial(  # type: ignore
                iot_hub_name=iot_hub_name,
                resource_group_name=resource_group_name,
                failover_input=failover_input,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})

        if polling is True:
            polling_method = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))  # type: PollingMethod
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)


class PrivateLinkResourcesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.iothub.IotHubClient`'s
        :attr:`private_link_resources` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> JSON:
        """List private link resources.

        List private link resources for the given IotHub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "id": "str",  # Optional. The resource identifier.
                            "name": "str",  # Optional. The resource name.
                            "properties": {
                                "groupId": "str",  # Optional. The group id.
                                "requiredMembers": [
                                    "str"  # Optional. The required members for a
                                      specific group id.
                                ],
                                "requiredZoneNames": [
                                    "str"  # Optional. The required DNS zones for
                                      a specific group id.
                                ]
                            },
                            "type": "str"  # Optional. The resource type.
                        }
                    ]
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_private_link_resources_list_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get(self, resource_group_name: str, resource_name: str, group_id: str, **kwargs: Any) -> JSON:
        """Get the specified private link resource.

        Get the specified private link resource for the given IotHub.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param group_id: The name of the private link resource. Required.
        :type group_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "groupId": "str",  # Optional. The group id.
                        "requiredMembers": [
                            "str"  # Optional. The required members for a specific group
                              id.
                        ],
                        "requiredZoneNames": [
                            "str"  # Optional. The required DNS zones for a specific
                              group id.
                        ]
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_private_link_resources_get_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            group_id=group_id,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class PrivateEndpointConnectionsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.iothub.IotHubClient`'s
        :attr:`private_endpoint_connections` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> List[JSON]:
        """List private endpoint connections.

        List private endpoint connection properties.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "id": "str",  # Optional. The resource identifier.
                        "name": "str",  # Optional. The resource name.
                        "properties": {
                            "privateEndpoint": {
                                "id": "str"  # Optional. The resource identifier.
                            },
                            "privateLinkServiceConnectionState": {
                                "actionsRequired": "str",  # Optional. Actions
                                  required for a private endpoint connection.
                                "description": "str",  # The description for the
                                  current state of a private endpoint connection. Required.
                                "status": "str"  # The status of a private endpoint
                                  connection. Required. Known values are: "Pending", "Approved",
                                  "Rejected", and "Disconnected".
                            }
                        },
                        "type": "str"  # Optional. The resource type.
                    }
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[JSON]]

        request = build_private_endpoint_connections_list_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)

    @distributed_trace
    def get(
        self, resource_group_name: str, resource_name: str, private_endpoint_connection_name: str, **kwargs: Any
    ) -> JSON:
        """Get private endpoint connection.

        Get private endpoint connection properties.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param private_endpoint_connection_name: The name of the private endpoint connection. Required.
        :type private_endpoint_connection_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "privateEndpoint": {
                            "id": "str"  # Optional. The resource identifier.
                        },
                        "privateLinkServiceConnectionState": {
                            "actionsRequired": "str",  # Optional. Actions required for a
                              private endpoint connection.
                            "description": "str",  # The description for the current
                              state of a private endpoint connection. Required.
                            "status": "str"  # The status of a private endpoint
                              connection. Required. Known values are: "Pending", "Approved",
                              "Rejected", and "Disconnected".
                        }
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_private_endpoint_connections_get_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            private_endpoint_connection_name=private_endpoint_connection_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    def _update_initial(
        self,
        resource_group_name: str,
        resource_name: str,
        private_endpoint_connection_name: str,
        private_endpoint_connection: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(private_endpoint_connection, (IO, bytes)):
            _content = private_endpoint_connection
        else:
            _json = private_endpoint_connection

        request = build_private_endpoint_connections_update_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            private_endpoint_connection_name=private_endpoint_connection_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        resource_name: str,
        private_endpoint_connection_name: str,
        private_endpoint_connection: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update private endpoint connection.

        Update the status of a private endpoint connection with the specified name.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param private_endpoint_connection_name: The name of the private endpoint connection. Required.
        :type private_endpoint_connection_name: str
        :param private_endpoint_connection: The private endpoint connection with updated properties.
         Required.
        :type private_endpoint_connection: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                private_endpoint_connection = {
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "privateEndpoint": {
                            "id": "str"  # Optional. The resource identifier.
                        },
                        "privateLinkServiceConnectionState": {
                            "actionsRequired": "str",  # Optional. Actions required for a
                              private endpoint connection.
                            "description": "str",  # The description for the current
                              state of a private endpoint connection. Required.
                            "status": "str"  # The status of a private endpoint
                              connection. Required. Known values are: "Pending", "Approved",
                              "Rejected", and "Disconnected".
                        }
                    },
                    "type": "str"  # Optional. The resource type.
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "privateEndpoint": {
                            "id": "str"  # Optional. The resource identifier.
                        },
                        "privateLinkServiceConnectionState": {
                            "actionsRequired": "str",  # Optional. Actions required for a
                              private endpoint connection.
                            "description": "str",  # The description for the current
                              state of a private endpoint connection. Required.
                            "status": "str"  # The status of a private endpoint
                              connection. Required. Known values are: "Pending", "Approved",
                              "Rejected", and "Disconnected".
                        }
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        resource_name: str,
        private_endpoint_connection_name: str,
        private_endpoint_connection: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update private endpoint connection.

        Update the status of a private endpoint connection with the specified name.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param private_endpoint_connection_name: The name of the private endpoint connection. Required.
        :type private_endpoint_connection_name: str
        :param private_endpoint_connection: The private endpoint connection with updated properties.
         Required.
        :type private_endpoint_connection: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "privateEndpoint": {
                            "id": "str"  # Optional. The resource identifier.
                        },
                        "privateLinkServiceConnectionState": {
                            "actionsRequired": "str",  # Optional. Actions required for a
                              private endpoint connection.
                            "description": "str",  # The description for the current
                              state of a private endpoint connection. Required.
                            "status": "str"  # The status of a private endpoint
                              connection. Required. Known values are: "Pending", "Approved",
                              "Rejected", and "Disconnected".
                        }
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """

    @distributed_trace
    def begin_update(
        self,
        resource_group_name: str,
        resource_name: str,
        private_endpoint_connection_name: str,
        private_endpoint_connection: Union[JSON, IO],
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update private endpoint connection.

        Update the status of a private endpoint connection with the specified name.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param private_endpoint_connection_name: The name of the private endpoint connection. Required.
        :type private_endpoint_connection_name: str
        :param private_endpoint_connection: The private endpoint connection with updated properties. Is
         either a model type or a IO type. Required.
        :type private_endpoint_connection: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "privateEndpoint": {
                            "id": "str"  # Optional. The resource identifier.
                        },
                        "privateLinkServiceConnectionState": {
                            "actionsRequired": "str",  # Optional. Actions required for a
                              private endpoint connection.
                            "description": "str",  # The description for the current
                              state of a private endpoint connection. Required.
                            "status": "str"  # The status of a private endpoint
                              connection. Required. Known values are: "Pending", "Approved",
                              "Rejected", and "Disconnected".
                        }
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]
        polling = kwargs.pop("polling", True)  # type: Union[bool, PollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._update_initial(  # type: ignore
                resource_group_name=resource_group_name,
                resource_name=resource_name,
                private_endpoint_connection_name=private_endpoint_connection_name,
                private_endpoint_connection=private_endpoint_connection,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True:
            polling_method = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))  # type: PollingMethod
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)

    def _delete_initial(
        self, resource_group_name: str, resource_name: str, private_endpoint_connection_name: str, **kwargs: Any
    ) -> Optional[JSON]:
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[JSON]]

        request = build_private_endpoint_connections_delete_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            private_endpoint_connection_name=private_endpoint_connection_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 202:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def begin_delete(
        self, resource_group_name: str, resource_name: str, private_endpoint_connection_name: str, **kwargs: Any
    ) -> LROPoller[JSON]:
        """Delete private endpoint connection.

        Delete private endpoint connection with the specified name.

        :param resource_group_name: The name of the resource group that contains the IoT hub. Required.
        :type resource_group_name: str
        :param resource_name: The name of the IoT hub. Required.
        :type resource_name: str
        :param private_endpoint_connection_name: The name of the private endpoint connection. Required.
        :type private_endpoint_connection_name: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 202
                response == {
                    "id": "str",  # Optional. The resource identifier.
                    "name": "str",  # Optional. The resource name.
                    "properties": {
                        "privateEndpoint": {
                            "id": "str"  # Optional. The resource identifier.
                        },
                        "privateLinkServiceConnectionState": {
                            "actionsRequired": "str",  # Optional. Actions required for a
                              private endpoint connection.
                            "description": "str",  # The description for the current
                              state of a private endpoint connection. Required.
                            "status": "str"  # The status of a private endpoint
                              connection. Required. Known values are: "Pending", "Approved",
                              "Rejected", and "Disconnected".
                        }
                    },
                    "type": "str"  # Optional. The resource type.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]
        polling = kwargs.pop("polling", True)  # type: Union[bool, PollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._delete_initial(  # type: ignore
                resource_group_name=resource_group_name,
                resource_name=resource_name,
                private_endpoint_connection_name=private_endpoint_connection_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True:
            polling_method = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))  # type: PollingMethod
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
