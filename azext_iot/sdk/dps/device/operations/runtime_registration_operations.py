# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse

from .. import models


class RuntimeRegistrationOperations(object):
    """RuntimeRegistrationOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar api_version: The API version to use for the request. Constant value: "2019-03-31".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.api_version = "2019-03-31"

        self.config = config

    def operation_status_lookup(
            self, registration_id, operation_id, id_scope, custom_headers=None, raw=False, **operation_config):
        """Gets the registration operation status.

        :param registration_id: Registration ID.
        :type registration_id: str
        :param operation_id: Operation ID.
        :type operation_id: str
        :param id_scope:
        :type id_scope: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: RegistrationOperationStatus or ClientRawResponse if raw=true
        :rtype: ~dps.models.RegistrationOperationStatus or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ProvisioningServiceErrorDetailsException<dps.models.ProvisioningServiceErrorDetailsException>`
        """
        # Construct URL
        url = self.operation_status_lookup.metadata['url']
        path_format_arguments = {
            'registrationId': self._serialize.url("registration_id", registration_id, 'str'),
            'operationId': self._serialize.url("operation_id", operation_id, 'str'),
            'idScope': self._serialize.url("id_scope", id_scope, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 202]:
            raise models.ProvisioningServiceErrorDetailsException(self._deserialize, response)

        deserialized = None
        header_dict = {}

        if response.status_code == 200:
            deserialized = self._deserialize('RegistrationOperationStatus', response)
            header_dict = {
                'retry-after': 'int',
                'Location': 'str',
            }
        if response.status_code == 202:
            deserialized = self._deserialize('RegistrationOperationStatus', response)
            header_dict = {
                'retry-after': 'int',
                'Location': 'str',
            }

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            client_raw_response.add_headers(header_dict)
            return client_raw_response

        return deserialized
    operation_status_lookup.metadata = {'url': '/{idScope}/registrations/{registrationId}/operations/{operationId}'}

    def device_registration_status_lookup(
            self, registration_id, device_registration, id_scope, custom_headers=None, raw=False, **operation_config):
        """Gets the device registration status.

        :param registration_id: Registration ID.
        :type registration_id: str
        :param device_registration: Device registration.
        :type device_registration: ~dps.models.DeviceRegistration
        :param id_scope:
        :type id_scope: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DeviceRegistrationResult or ClientRawResponse if raw=true
        :rtype: ~dps.models.DeviceRegistrationResult or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ProvisioningServiceErrorDetailsException<dps.models.ProvisioningServiceErrorDetailsException>`
        """
        # Construct URL
        url = self.device_registration_status_lookup.metadata['url']
        path_format_arguments = {
            'registrationId': self._serialize.url("registration_id", registration_id, 'str'),
            'idScope': self._serialize.url("id_scope", id_scope, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(device_registration, 'DeviceRegistration')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ProvisioningServiceErrorDetailsException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DeviceRegistrationResult', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    device_registration_status_lookup.metadata = {'url': '/{idScope}/registrations/{registrationId}'}

    def register_device(
            self, registration_id, device_registration, id_scope, custom_headers=None, raw=False, **operation_config):
        """Registers the devices.

        :param registration_id: The registration ID is alphanumeric,
         lowercase, and may contain hyphens.
        :type registration_id: str
        :param device_registration: Device registration request.
        :type device_registration: ~dps.models.DeviceRegistration
        :param id_scope:
        :type id_scope: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: RegistrationOperationStatus or ClientRawResponse if raw=true
        :rtype: ~dps.models.RegistrationOperationStatus or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ProvisioningServiceErrorDetailsException<dps.models.ProvisioningServiceErrorDetailsException>`
        """
        # Construct URL
        url = self.register_device.metadata['url']
        path_format_arguments = {
            'registrationId': self._serialize.url("registration_id", registration_id, 'str'),
            'idScope': self._serialize.url("id_scope", id_scope, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(device_registration, 'DeviceRegistration')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 202]:
            raise models.ProvisioningServiceErrorDetailsException(self._deserialize, response)

        deserialized = None
        header_dict = {}

        if response.status_code == 200:
            deserialized = self._deserialize('RegistrationOperationStatus', response)
            header_dict = {
                'Location': 'str',
                'retry-after': 'int',
            }
        if response.status_code == 202:
            deserialized = self._deserialize('RegistrationOperationStatus', response)
            header_dict = {
                'Location': 'str',
                'retry-after': 'int',
            }

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            client_raw_response.add_headers(header_dict)
            return client_raw_response

        return deserialized
    register_device.metadata = {'url': '/{idScope}/registrations/{registrationId}/register'}
