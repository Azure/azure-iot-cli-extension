# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class Permission(msrest.serialization.Model):
    """Permission.

    All required parameters must be populated in order to send to Azure.

    :param roles: Required. List of roles that specify the permissions to access the application.
    :type roles: list[~iot_central_api_preview.models.PermissionRolesItem]
    """

    _validation = {
        'roles': {'required': True, 'min_items': 1},
    }

    _attribute_map = {
        'roles': {'key': 'roles', 'type': '[PermissionRolesItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Permission, self).__init__(**kwargs)
        self.roles = kwargs['roles']


class ApiToken(Permission):
    """ApiToken.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param roles: Required. List of roles that specify the permissions to access the application.
    :type roles: list[~iot_central_api_preview.models.PermissionRolesItem]
    :ivar id: Unique ID of the API token.
    :vartype id: str
    :ivar token: Value of the API token.
    :vartype token: str
    :param expiry: String-formatted date representing the time when the token expires.
    :type expiry: ~datetime.datetime
    """

    _validation = {
        'roles': {'required': True, 'min_items': 1},
        'id': {'readonly': True},
        'token': {'readonly': True},
    }

    _attribute_map = {
        'roles': {'key': 'roles', 'type': '[PermissionRolesItem]'},
        'id': {'key': 'id', 'type': 'str'},
        'token': {'key': 'token', 'type': 'str'},
        'expiry': {'key': 'expiry', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApiToken, self).__init__(**kwargs)
        self.id = None
        self.token = None
        self.expiry = kwargs.get('expiry', None)


class ApiTokenCollection(msrest.serialization.Model):
    """ApiTokenCollection.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The collection of API tokens.
    :type value: list[~iot_central_api_preview.models.ApiToken]
    :param next_link: URL to get the next page of API tokens.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApiToken]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApiTokenCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class Attestation(msrest.serialization.Model):
    """Attestation.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: SymmetricKeyAttestation, TpmAttestation, X509Attestation.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the attestation.Constant filled by server.
    :type type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'SymmetricKeyAttestation': 'SymmetricKeyAttestation', 'TpmAttestation': 'TpmAttestation', 'X509Attestation': 'X509Attestation'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Attestation, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]


class JobData(msrest.serialization.Model):
    """JobData.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: CloudPropertyJobData, CommandJobData, PropertyJobData.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the job data.Constant filled by server.
    :type type: str
    :param target: Required. The device template which defines the target capability for the job.
    :type target: str
    :param path: Required. The path to the target capability within the device template.
    :type path: str
    :param value: The value used to update the target capability, if any.
    :type value: object
    """

    _validation = {
        'type': {'required': True},
        'target': {'required': True},
        'path': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
    }

    _subtype_map = {
        'type': {'CloudPropertyJobData': 'CloudPropertyJobData', 'CommandJobData': 'CommandJobData', 'PropertyJobData': 'PropertyJobData'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JobData, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]
        self.target = kwargs['target']
        self.path = kwargs['path']
        self.value = kwargs.get('value', None)


class CloudPropertyJobData(JobData):
    """CloudPropertyJobData.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the job data.Constant filled by server.
    :type type: str
    :param target: Required. The device template which defines the target capability for the job.
    :type target: str
    :param path: Required. The path to the target capability within the device template.
    :type path: str
    :param value: The value used to update the target capability, if any.
    :type value: object
    """

    _validation = {
        'type': {'required': True},
        'target': {'required': True},
        'path': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CloudPropertyJobData, self).__init__(**kwargs)
        self.type = 'CloudPropertyJobData'  # type: str


class Collection(msrest.serialization.Model):
    """Collection.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The collection of objects.
    :type value: list[object]
    :param next_link: URL to get the next page of objects.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[object]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Collection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class CommandJobData(JobData):
    """CommandJobData.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the job data.Constant filled by server.
    :type type: str
    :param target: Required. The device template which defines the target capability for the job.
    :type target: str
    :param path: Required. The path to the target capability within the device template.
    :type path: str
    :param value: The value used to update the target capability, if any.
    :type value: object
    """

    _validation = {
        'type': {'required': True},
        'target': {'required': True},
        'path': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CommandJobData, self).__init__(**kwargs)
        self.type = 'CommandJobData'  # type: str


class ContinuousDataExport(msrest.serialization.Model):
    """ContinuousDataExport.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique ID of the continuous data export.
    :vartype id: str
    :param etag: ETag used to prevent conflict in continuous data export updates.
    :type etag: str
    :param display_name: Display name of the continuous data export.
    :type display_name: str
    :param endpoint: Required. Location where exported data should be sent.
    :type endpoint: ~iot_central_api_preview.models.Endpoint
    :ivar status: Indicates whether the continuous data export is starting, running, etc.
    :vartype status: str
    :param enabled: Required. Boolean indicating whether the continuous data export should be
     running or not.
    :type enabled: bool
    :param sources: Required. Data sources to export to the endpoint.
    :type sources: list[str or ~iot_central_api_preview.models.ContinuousDataExportSourcesItem]
    """

    _validation = {
        'id': {'readonly': True},
        'endpoint': {'required': True},
        'status': {'readonly': True},
        'enabled': {'required': True},
        'sources': {'required': True, 'min_items': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'endpoint': {'key': 'endpoint', 'type': 'Endpoint'},
        'status': {'key': 'status', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'sources': {'key': 'sources', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ContinuousDataExport, self).__init__(**kwargs)
        self.id = None
        self.etag = kwargs.get('etag', None)
        self.display_name = kwargs.get('display_name', None)
        self.endpoint = kwargs['endpoint']
        self.status = None
        self.enabled = kwargs['enabled']
        self.sources = kwargs['sources']


class ContinuousDataExportCollection(msrest.serialization.Model):
    """ContinuousDataExportCollection.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The collection of continuous data exports.
    :type value: list[~iot_central_api_preview.models.ContinuousDataExport]
    :param next_link: URL to get the next page of continuous data exports.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ContinuousDataExport]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ContinuousDataExportCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class Device(msrest.serialization.Model):
    """Device.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique ID of the device.
    :vartype id: str
    :param etag: ETag used to prevent conflict in device updates.
    :type etag: str
    :param display_name: Display name of the device.
    :type display_name: str
    :param instance_of: The device template definition for the device.
    :type instance_of: str
    :param approved: Whether the device has been approved to connect to IoT Central.
    :type approved: bool
    :ivar provisioned: Whether resources have been allocated for the device.
    :vartype provisioned: bool
    :param simulated: Whether the device is simulated.
    :type simulated: bool
    """

    _validation = {
        'id': {'readonly': True},
        'provisioned': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'instance_of': {'key': 'instanceOf', 'type': 'str'},
        'approved': {'key': 'approved', 'type': 'bool'},
        'provisioned': {'key': 'provisioned', 'type': 'bool'},
        'simulated': {'key': 'simulated', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Device, self).__init__(**kwargs)
        self.id = None
        self.etag = kwargs.get('etag', None)
        self.display_name = kwargs.get('display_name', None)
        self.instance_of = kwargs.get('instance_of', None)
        self.approved = kwargs.get('approved', None)
        self.provisioned = None
        self.simulated = kwargs.get('simulated', None)


class DeviceCollection(msrest.serialization.Model):
    """DeviceCollection.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The collection of devices.
    :type value: list[~iot_central_api_preview.models.Device]
    :param next_link: URL to get the next page of devices.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Device]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class DeviceCommand(msrest.serialization.Model):
    """DeviceCommand.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The request ID of the device command execution.
    :vartype id: str
    :param connection_timeout: Connection Timeout in seconds to wait for a disconnected device to
     come online. Acceptable timeout values are from 0 to 30 seconds. Defaults to 0 seconds.
    :type connection_timeout: int
    :param response_timeout: Response Timeout in seconds to wait for a command completion on a
     device. Acceptable timeout values are from 5 to 30 seconds. Defaults to 30 seconds.
    :type response_timeout: int
    :param request: The payload for the device command.
    :type request: object
    :ivar response: The payload of the device command response.
    :vartype response: object
    :ivar response_code: The status code of the device command response.
    :vartype response_code: int
    """

    _validation = {
        'id': {'readonly': True},
        'response': {'readonly': True},
        'response_code': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'connection_timeout': {'key': 'connectionTimeout', 'type': 'int'},
        'response_timeout': {'key': 'responseTimeout', 'type': 'int'},
        'request': {'key': 'request', 'type': 'object'},
        'response': {'key': 'response', 'type': 'object'},
        'response_code': {'key': 'responseCode', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceCommand, self).__init__(**kwargs)
        self.id = None
        self.connection_timeout = kwargs.get('connection_timeout', None)
        self.response_timeout = kwargs.get('response_timeout', None)
        self.request = kwargs.get('request', None)
        self.response = None
        self.response_code = None


class DeviceCommandCollection(msrest.serialization.Model):
    """DeviceCommandCollection.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The collection of device command executions.
    :type value: list[~iot_central_api_preview.models.DeviceCommand]
    :param next_link: URL to get the next page of device command executions.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DeviceCommand]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceCommandCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class DeviceCredentials(msrest.serialization.Model):
    """DeviceCredentials.

    All required parameters must be populated in order to send to Azure.

    :param id_scope: Required. ID scope for connecting to the IoT Central application.
    :type id_scope: str
    :param symmetric_key: The symmetric key credentials for the device.
    :type symmetric_key: ~iot_central_api_preview.models.SymmetricKey
    :param x509: The X.509 credential information for the device.
    :type x509: ~iot_central_api_preview.models.X509
    :param tpm: The TPM credentials for the device.
    :type tpm: ~iot_central_api_preview.models.Tpm
    """

    _validation = {
        'id_scope': {'required': True},
    }

    _attribute_map = {
        'id_scope': {'key': 'idScope', 'type': 'str'},
        'symmetric_key': {'key': 'symmetricKey', 'type': 'SymmetricKey'},
        'x509': {'key': 'x509', 'type': 'X509'},
        'tpm': {'key': 'tpm', 'type': 'Tpm'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceCredentials, self).__init__(**kwargs)
        self.id_scope = kwargs['id_scope']
        self.symmetric_key = kwargs.get('symmetric_key', None)
        self.x509 = kwargs.get('x509', None)
        self.tpm = kwargs.get('tpm', None)


class DeviceGroup(msrest.serialization.Model):
    """DeviceGroup.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique ID of the device group.
    :vartype id: str
    :param display_name: Display name of the device group.
    :type display_name: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceGroup, self).__init__(**kwargs)
        self.id = None
        self.display_name = kwargs.get('display_name', None)


class DeviceGroupCollection(msrest.serialization.Model):
    """DeviceGroupCollection.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The collection of device groups.
    :type value: list[~iot_central_api_preview.models.DeviceGroup]
    :param next_link: URL to get the next page of device groups.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DeviceGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceGroupCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class DeviceTelemetry(msrest.serialization.Model):
    """DeviceTelemetry.

    :param value: The last known value of this device telemetry.
    :type value: object
    :param timestamp: String-formatted date representing the time when the telemetry value was
     sent.
    :type timestamp: ~datetime.datetime
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'object'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceTelemetry, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.timestamp = kwargs.get('timestamp', None)


class DeviceTemplate(msrest.serialization.Model):
    """DeviceTemplate.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique ID of the device template.
    :vartype id: str
    :param etag: ETag used to prevent conflict in device template updates.
    :type etag: str
    :param types: Required. The types of device to which this template applies.
    :type types: list[str]
    :param display_name: Display name of the device template.
    :type display_name: str
    :param description: Detailed description of the device template.
    :type description: str
    :param capability_model: Required. The capability model utilized by this device template.
    :type capability_model: object
    :param solution_model: The solution model utilized by this device template.
    :type solution_model: object
    """

    _validation = {
        'id': {'readonly': True},
        'types': {'required': True},
        'capability_model': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'types': {'key': 'types', 'type': '[str]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'capability_model': {'key': 'capabilityModel', 'type': 'object'},
        'solution_model': {'key': 'solutionModel', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceTemplate, self).__init__(**kwargs)
        self.id = None
        self.etag = kwargs.get('etag', None)
        self.types = kwargs['types']
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.capability_model = kwargs['capability_model']
        self.solution_model = kwargs.get('solution_model', None)


class DeviceTemplateCollection(msrest.serialization.Model):
    """DeviceTemplateCollection.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The collection of device templates.
    :type value: list[~iot_central_api_preview.models.DeviceTemplate]
    :param next_link: URL to get the next page of device templates.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DeviceTemplate]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceTemplateCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class User(Permission):
    """User.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: EmailUser, ServicePrincipalUser.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param roles: Required. List of roles that specify the permissions to access the application.
    :type roles: list[~iot_central_api_preview.models.PermissionRolesItem]
    :ivar id: Unique ID of the user.
    :vartype id: str
    :param type: Required. Type of the user.Constant filled by server.
    :type type: str
    """

    _validation = {
        'roles': {'required': True, 'min_items': 1},
        'id': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'roles': {'key': 'roles', 'type': '[PermissionRolesItem]'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'EmailUser': 'EmailUser', 'ServicePrincipalUser': 'ServicePrincipalUser'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(User, self).__init__(**kwargs)
        self.id = None
        self.type = 'User'  # type: str


class EmailUser(User):
    """EmailUser.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param roles: Required. List of roles that specify the permissions to access the application.
    :type roles: list[~iot_central_api_preview.models.PermissionRolesItem]
    :ivar id: Unique ID of the user.
    :vartype id: str
    :param type: Required. Type of the user.Constant filled by server.
    :type type: str
    :param email: Required. Email address of the user.
    :type email: str
    """

    _validation = {
        'roles': {'required': True, 'min_items': 1},
        'id': {'readonly': True},
        'type': {'required': True},
        'email': {'required': True},
    }

    _attribute_map = {
        'roles': {'key': 'roles', 'type': '[PermissionRolesItem]'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EmailUser, self).__init__(**kwargs)
        self.type = 'EmailUser'  # type: str
        self.email = kwargs['email']


class Endpoint(msrest.serialization.Model):
    """Endpoint.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: EventHubsEndpoint, ServiceBusQueueEndpoint, ServiceBusTopicEndpoint, StorageEndpoint.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the endpoint.Constant filled by server.
    :type type: str
    :param connection_string: Required. Information for connecting to the endpoint.
    :type connection_string: str
    :param name: Required. Name of the entity to send data to.
    :type name: str
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'EventHubsEndpoint': 'EventHubsEndpoint', 'ServiceBusQueueEndpoint': 'ServiceBusQueueEndpoint', 'ServiceBusTopicEndpoint': 'ServiceBusTopicEndpoint', 'StorageEndpoint': 'StorageEndpoint'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Endpoint, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]
        self.connection_string = kwargs['connection_string']
        self.name = kwargs['name']


class EventHubsEndpoint(Endpoint):
    """EventHubsEndpoint.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the endpoint.Constant filled by server.
    :type type: str
    :param connection_string: Required. Information for connecting to the endpoint.
    :type connection_string: str
    :param name: Required. Name of the entity to send data to.
    :type name: str
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EventHubsEndpoint, self).__init__(**kwargs)
        self.type = 'EventHubsEndpoint'  # type: str


class Job(msrest.serialization.Model):
    """Job.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique ID of the job.
    :vartype id: str
    :param display_name: Display name of the job.
    :type display_name: str
    :param description: Detailed description of the job.
    :type description: str
    :param group: Required. The ID of the device group on which to execute the job.
    :type group: str
    :param data: Required. The capabilites being updated by the job and the values with which they
     are being updated.
    :type data: list[~iot_central_api_preview.models.JobData]
    :ivar status: Indicates whether the job is starting, running, etc.
    :vartype status: str
    """

    _validation = {
        'id': {'readonly': True},
        'group': {'required': True},
        'data': {'required': True, 'min_items': 1},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'group': {'key': 'group', 'type': 'str'},
        'data': {'key': 'data', 'type': '[JobData]'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Job, self).__init__(**kwargs)
        self.id = None
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.group = kwargs['group']
        self.data = kwargs['data']
        self.status = None


class JobCollection(msrest.serialization.Model):
    """JobCollection.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The collection of jobs.
    :type value: list[~iot_central_api_preview.models.Job]
    :param next_link: URL to get the next page of jobs.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Job]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JobCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class JobDeviceStatus(msrest.serialization.Model):
    """JobDeviceStatus.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: ID of the device whose job status is being provided.
    :vartype id: str
    :ivar status: Indicates whether the job is starting, running, etc. for the given device.
    :vartype status: str
    """

    _validation = {
        'id': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JobDeviceStatus, self).__init__(**kwargs)
        self.id = None
        self.status = None


class JobDeviceStatusCollection(msrest.serialization.Model):
    """JobDeviceStatusCollection.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The collection of job device statuses.
    :type value: list[~iot_central_api_preview.models.JobDeviceStatus]
    :param next_link: URL to get the next page of job device statuses.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[JobDeviceStatus]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JobDeviceStatusCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class PermissionRolesItem(msrest.serialization.Model):
    """PermissionRolesItem.

    All required parameters must be populated in order to send to Azure.

    :param role: Required. ID that specifies the role assignment for this role.
    :type role: str
    """

    _validation = {
        'role': {'required': True},
    }

    _attribute_map = {
        'role': {'key': 'role', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PermissionRolesItem, self).__init__(**kwargs)
        self.role = kwargs['role']


class PropertyJobData(JobData):
    """PropertyJobData.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the job data.Constant filled by server.
    :type type: str
    :param target: Required. The device template which defines the target capability for the job.
    :type target: str
    :param path: Required. The path to the target capability within the device template.
    :type path: str
    :param value: The value used to update the target capability, if any.
    :type value: object
    """

    _validation = {
        'type': {'required': True},
        'target': {'required': True},
        'path': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PropertyJobData, self).__init__(**kwargs)
        self.type = 'PropertyJobData'  # type: str


class Role(msrest.serialization.Model):
    """Role.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique ID of the role.
    :vartype id: str
    :param display_name: Display name of the role.
    :type display_name: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Role, self).__init__(**kwargs)
        self.id = None
        self.display_name = kwargs.get('display_name', None)


class RoleCollection(msrest.serialization.Model):
    """RoleCollection.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The collection of roles.
    :type value: list[~iot_central_api_preview.models.Role]
    :param next_link: URL to get the next page of roles.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Role]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RoleCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class ServiceBusQueueEndpoint(Endpoint):
    """ServiceBusQueueEndpoint.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the endpoint.Constant filled by server.
    :type type: str
    :param connection_string: Required. Information for connecting to the endpoint.
    :type connection_string: str
    :param name: Required. Name of the entity to send data to.
    :type name: str
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServiceBusQueueEndpoint, self).__init__(**kwargs)
        self.type = 'ServiceBusQueueEndpoint'  # type: str


class ServiceBusTopicEndpoint(Endpoint):
    """ServiceBusTopicEndpoint.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the endpoint.Constant filled by server.
    :type type: str
    :param connection_string: Required. Information for connecting to the endpoint.
    :type connection_string: str
    :param name: Required. Name of the entity to send data to.
    :type name: str
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServiceBusTopicEndpoint, self).__init__(**kwargs)
        self.type = 'ServiceBusTopicEndpoint'  # type: str


class ServicePrincipalUser(User):
    """ServicePrincipalUser.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param roles: Required. List of roles that specify the permissions to access the application.
    :type roles: list[~iot_central_api_preview.models.PermissionRolesItem]
    :ivar id: Unique ID of the user.
    :vartype id: str
    :param type: Required. Type of the user.Constant filled by server.
    :type type: str
    :param tenant_id: Required. The AAD tenant ID of the service principal.
    :type tenant_id: str
    :param object_id: Required. The AAD object ID of the service principal.
    :type object_id: str
    """

    _validation = {
        'roles': {'required': True, 'min_items': 1},
        'id': {'readonly': True},
        'type': {'required': True},
        'tenant_id': {'required': True},
        'object_id': {'required': True},
    }

    _attribute_map = {
        'roles': {'key': 'roles', 'type': '[PermissionRolesItem]'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'object_id': {'key': 'objectId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServicePrincipalUser, self).__init__(**kwargs)
        self.type = 'ServicePrincipalUser'  # type: str
        self.tenant_id = kwargs['tenant_id']
        self.object_id = kwargs['object_id']


class StorageEndpoint(Endpoint):
    """StorageEndpoint.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the endpoint.Constant filled by server.
    :type type: str
    :param connection_string: Required. Information for connecting to the endpoint.
    :type connection_string: str
    :param name: Required. Name of the entity to send data to.
    :type name: str
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StorageEndpoint, self).__init__(**kwargs)
        self.type = 'StorageEndpoint'  # type: str


class SymmetricKey(msrest.serialization.Model):
    """SymmetricKey.

    All required parameters must be populated in order to send to Azure.

    :param primary_key: Required. The primary key for this credential.
    :type primary_key: str
    :param secondary_key: Required. The secondary key for this credential.
    :type secondary_key: str
    """

    _validation = {
        'primary_key': {'required': True},
        'secondary_key': {'required': True},
    }

    _attribute_map = {
        'primary_key': {'key': 'primaryKey', 'type': 'str'},
        'secondary_key': {'key': 'secondaryKey', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SymmetricKey, self).__init__(**kwargs)
        self.primary_key = kwargs['primary_key']
        self.secondary_key = kwargs['secondary_key']


class SymmetricKeyAttestation(Attestation):
    """SymmetricKeyAttestation.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the attestation.Constant filled by server.
    :type type: str
    :param symmetric_key: Required. The symmetric key credentials for this attestation.
    :type symmetric_key: ~iot_central_api_preview.models.SymmetricKey
    """

    _validation = {
        'type': {'required': True},
        'symmetric_key': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'symmetric_key': {'key': 'symmetricKey', 'type': 'SymmetricKey'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SymmetricKeyAttestation, self).__init__(**kwargs)
        self.type = 'SymmetricKeyAttestation'  # type: str
        self.symmetric_key = kwargs['symmetric_key']


class Tpm(msrest.serialization.Model):
    """Tpm.

    All required parameters must be populated in order to send to Azure.

    :param endorsement_key: Required. The TPM endorsement key for this credential.
    :type endorsement_key: str
    """

    _validation = {
        'endorsement_key': {'required': True},
    }

    _attribute_map = {
        'endorsement_key': {'key': 'endorsementKey', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Tpm, self).__init__(**kwargs)
        self.endorsement_key = kwargs['endorsement_key']


class TpmAttestation(Attestation):
    """TpmAttestation.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the attestation.Constant filled by server.
    :type type: str
    :param tpm: Required. The TPM credentials for this attestation.
    :type tpm: ~iot_central_api_preview.models.Tpm
    """

    _validation = {
        'type': {'required': True},
        'tpm': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'tpm': {'key': 'tpm', 'type': 'Tpm'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TpmAttestation, self).__init__(**kwargs)
        self.type = 'TpmAttestation'  # type: str
        self.tpm = kwargs['tpm']


class UserCollection(msrest.serialization.Model):
    """UserCollection.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The collection of users.
    :type value: list[~iot_central_api_preview.models.User]
    :param next_link: URL to get the next page of users.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[User]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UserCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class X509(msrest.serialization.Model):
    """X509.

    :param client_certificates: The X.509 client certificates for this credential.
    :type client_certificates: ~iot_central_api_preview.models.X509Certificates
    """

    _attribute_map = {
        'client_certificates': {'key': 'clientCertificates', 'type': 'X509Certificates'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(X509, self).__init__(**kwargs)
        self.client_certificates = kwargs.get('client_certificates', None)


class X509Attestation(Attestation):
    """X509Attestation.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the attestation.Constant filled by server.
    :type type: str
    :param x509: Required. The X.509 credentials for this attestation.
    :type x509: ~iot_central_api_preview.models.X509
    """

    _validation = {
        'type': {'required': True},
        'x509': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'x509': {'key': 'x509', 'type': 'X509'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(X509Attestation, self).__init__(**kwargs)
        self.type = 'X509Attestation'  # type: str
        self.x509 = kwargs['x509']


class X509Certificate(msrest.serialization.Model):
    """X509Certificate.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param certificate: The string representation of this certificate.
    :type certificate: str
    :ivar info: Information about this certificate.
    :vartype info: ~iot_central_api_preview.models.X509CertificateInfo
    """

    _validation = {
        'info': {'readonly': True},
    }

    _attribute_map = {
        'certificate': {'key': 'certificate', 'type': 'str'},
        'info': {'key': 'info', 'type': 'X509CertificateInfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(X509Certificate, self).__init__(**kwargs)
        self.certificate = kwargs.get('certificate', None)
        self.info = None


class X509CertificateInfo(msrest.serialization.Model):
    """X509CertificateInfo.

    All required parameters must be populated in order to send to Azure.

    :param sha1_thumbprint: Required. The SHA-1 hash value of the certificate.
    :type sha1_thumbprint: str
    """

    _validation = {
        'sha1_thumbprint': {'required': True},
    }

    _attribute_map = {
        'sha1_thumbprint': {'key': 'sha1Thumbprint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(X509CertificateInfo, self).__init__(**kwargs)
        self.sha1_thumbprint = kwargs['sha1_thumbprint']


class X509Certificates(msrest.serialization.Model):
    """X509Certificates.

    All required parameters must be populated in order to send to Azure.

    :param primary: Required. The primary X.509 certificate for this credential.
    :type primary: ~iot_central_api_preview.models.X509Certificate
    :param secondary: The secondary X.509 certificate for this credential.
    :type secondary: ~iot_central_api_preview.models.X509Certificate
    """

    _validation = {
        'primary': {'required': True},
    }

    _attribute_map = {
        'primary': {'key': 'primary', 'type': 'X509Certificate'},
        'secondary': {'key': 'secondary', 'type': 'X509Certificate'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(X509Certificates, self).__init__(**kwargs)
        self.primary = kwargs['primary']
        self.secondary = kwargs.get('secondary', None)
