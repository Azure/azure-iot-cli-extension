# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, List, Optional, TYPE_CHECKING

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class Permission(_serialization.Model):
    """The permission definition.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        """
        super().__init__(**kwargs)
        self.roles = roles


class User(Permission):
    """The user definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ADGroupUser, EmailUser, ServicePrincipalUser

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    :ivar id: Unique ID of the user.
    :vartype id: str
    :ivar type: Type of the user. Required.
    :vartype type: str
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
        "id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {"adGroup": "ADGroupUser", "email": "EmailUser", "servicePrincipal": "ServicePrincipalUser"}
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        """
        super().__init__(roles=roles, **kwargs)
        self.id = None
        self.type = None  # type: Optional[str]


class ADGroupUser(User):
    """The active directory group user definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    :ivar id: Unique ID of the user.
    :vartype id: str
    :ivar type: Type of the user. Required.
    :vartype type: str
    :ivar tenant_id: The AAD tenant ID of the AD Group. Required.
    :vartype tenant_id: str
    :ivar object_id: The AAD object ID of the AD Group. Required.
    :vartype object_id: str
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
        "id": {"readonly": True},
        "type": {"required": True},
        "tenant_id": {"required": True},
        "object_id": {"required": True},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "object_id": {"key": "objectId", "type": "str"},
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], tenant_id: str, object_id: str, **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        :keyword tenant_id: The AAD tenant ID of the AD Group. Required.
        :paramtype tenant_id: str
        :keyword object_id: The AAD object ID of the AD Group. Required.
        :paramtype object_id: str
        """
        super().__init__(roles=roles, **kwargs)
        self.type = "adGroup"  # type: str
        self.tenant_id = tenant_id
        self.object_id = object_id


class ApiToken(Permission):
    """The API access token definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    :ivar id: Unique ID of the API token.
    :vartype id: str
    :ivar token: Value of the API token.
    :vartype token: str
    :ivar expiry: String-formatted date representing the time when the token expires.
    :vartype expiry: ~datetime.datetime
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
        "id": {"readonly": True},
        "token": {"readonly": True},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
        "id": {"key": "id", "type": "str"},
        "token": {"key": "token", "type": "str"},
        "expiry": {"key": "expiry", "type": "iso-8601"},
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], expiry: Optional[datetime.datetime] = None, **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        :keyword expiry: String-formatted date representing the time when the token expires.
        :paramtype expiry: ~datetime.datetime
        """
        super().__init__(roles=roles, **kwargs)
        self.id = None
        self.token = None
        self.expiry = expiry


class ApiTokenCollection(_serialization.Model):
    """The paged results of API tokens.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of API tokens. Required.
    :vartype value: list[~azureiotcentral.models.ApiToken]
    :ivar next_link: URL to get the next page of API tokens.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ApiToken]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.ApiToken"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of API tokens. Required.
        :paramtype value: list[~azureiotcentral.models.ApiToken]
        :keyword next_link: URL to get the next page of API tokens.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Attestation(_serialization.Model):
    """The attestation definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    SymmetricKeyAttestation, TpmAttestation, X509Attestation

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the attestation. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {"symmetricKey": "SymmetricKeyAttestation", "tpm": "TpmAttestation", "x509": "X509Attestation"}
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class Collection(_serialization.Model):
    """The paged results of entities.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of entities. Required.
    :vartype value: list[JSON]
    :ivar next_link: URL to get the next page of entities.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[object]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List[JSON], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of entities. Required.
        :paramtype value: list[JSON]
        :keyword next_link: URL to get the next page of entities.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Device(_serialization.Model):
    """The device definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique ID of the device.
    :vartype id: str
    :ivar etag: ETag used to prevent conflict in device updates.
    :vartype etag: str
    :ivar display_name: Display name of the device.
    :vartype display_name: str
    :ivar template: The device template definition for the device.
    :vartype template: str
    :ivar enabled: Whether the device connection to IoT Central has been enabled.
    :vartype enabled: bool
    :ivar provisioned: Whether resources have been allocated for the device.
    :vartype provisioned: bool
    :ivar simulated: Whether the device is simulated.
    :vartype simulated: bool
    :ivar organizations: List of organization IDs that the device is a part of, only one
     organization support today, multiple organizations will be supported soon.
    :vartype organizations: list[str]
    """

    _validation = {
        "id": {"readonly": True},
        "provisioned": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "etag": {"key": "etag", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "template": {"key": "template", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "provisioned": {"key": "provisioned", "type": "bool"},
        "simulated": {"key": "simulated", "type": "bool"},
        "organizations": {"key": "organizations", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        etag: Optional[str] = None,
        display_name: Optional[str] = None,
        template: Optional[str] = None,
        enabled: Optional[bool] = None,
        simulated: Optional[bool] = None,
        organizations: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword etag: ETag used to prevent conflict in device updates.
        :paramtype etag: str
        :keyword display_name: Display name of the device.
        :paramtype display_name: str
        :keyword template: The device template definition for the device.
        :paramtype template: str
        :keyword enabled: Whether the device connection to IoT Central has been enabled.
        :paramtype enabled: bool
        :keyword simulated: Whether the device is simulated.
        :paramtype simulated: bool
        :keyword organizations: List of organization IDs that the device is a part of, only one
         organization support today, multiple organizations will be supported soon.
        :paramtype organizations: list[str]
        """
        super().__init__(**kwargs)
        self.id = None
        self.etag = etag
        self.display_name = display_name
        self.template = template
        self.enabled = enabled
        self.provisioned = None
        self.simulated = simulated
        self.organizations = organizations


class DeviceCollection(_serialization.Model):
    """The paged results of devices.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of devices. Required.
    :vartype value: list[~azureiotcentral.models.Device]
    :ivar next_link: URL to get the next page of devices.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Device]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Device"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of devices. Required.
        :paramtype value: list[~azureiotcentral.models.Device]
        :keyword next_link: URL to get the next page of devices.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceCommand(_serialization.Model):
    """The device command definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The request ID of the device command execution.
    :vartype id: str
    :ivar connection_timeout: Connection timeout in seconds to wait for a disconnected device to
     come online. Defaults to 0 seconds.
    :vartype connection_timeout: int
    :ivar response_timeout: Response timeout in seconds to wait for a command completion on a
     device. Defaults to 30 seconds.
    :vartype response_timeout: int
    :ivar request: The payload for the device command, support any primitive types or object.
    :vartype request: any
    :ivar response: The payload of the device command response, support any primitive types or
     object.
    :vartype response: any
    :ivar response_code: The status code of the device command response.
    :vartype response_code: int
    """

    _validation = {
        "id": {"readonly": True},
        "connection_timeout": {"maximum": 30, "minimum": 0},
        "response_timeout": {"maximum": 30, "minimum": 5},
        "response": {"readonly": True},
        "response_code": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "connection_timeout": {"key": "connectionTimeout", "type": "int"},
        "response_timeout": {"key": "responseTimeout", "type": "int"},
        "request": {"key": "request", "type": "object"},
        "response": {"key": "response", "type": "object"},
        "response_code": {"key": "responseCode", "type": "int"},
    }

    def __init__(
        self,
        *,
        connection_timeout: Optional[int] = None,
        response_timeout: Optional[int] = None,
        request: Optional[Any] = None,
        **kwargs
    ):
        """
        :keyword connection_timeout: Connection timeout in seconds to wait for a disconnected device to
         come online. Defaults to 0 seconds.
        :paramtype connection_timeout: int
        :keyword response_timeout: Response timeout in seconds to wait for a command completion on a
         device. Defaults to 30 seconds.
        :paramtype response_timeout: int
        :keyword request: The payload for the device command, support any primitive types or object.
        :paramtype request: any
        """
        super().__init__(**kwargs)
        self.id = None
        self.connection_timeout = connection_timeout
        self.response_timeout = response_timeout
        self.request = request
        self.response = None
        self.response_code = None


class DeviceCommandCollection(_serialization.Model):
    """The paged results of device command executions.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of device command executions. Required.
    :vartype value: list[~azureiotcentral.models.DeviceCommand]
    :ivar next_link: URL to get the next page of device command executions.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DeviceCommand]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.DeviceCommand"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of device command executions. Required.
        :paramtype value: list[~azureiotcentral.models.DeviceCommand]
        :keyword next_link: URL to get the next page of device command executions.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceCredentials(_serialization.Model):
    """The device credentials definition.

    All required parameters must be populated in order to send to Azure.

    :ivar id_scope: ID scope for connecting to the IoT Central application. Required.
    :vartype id_scope: str
    :ivar symmetric_key: The symmetric key credentials for the device.
    :vartype symmetric_key: ~azureiotcentral.models.SymmetricKey
    :ivar x509: The X.509 credential information for the device.
    :vartype x509: ~azureiotcentral.models.X509
    :ivar tpm: The TPM credentials for the device.
    :vartype tpm: ~azureiotcentral.models.Tpm
    """

    _validation = {
        "id_scope": {"required": True},
    }

    _attribute_map = {
        "id_scope": {"key": "idScope", "type": "str"},
        "symmetric_key": {"key": "symmetricKey", "type": "SymmetricKey"},
        "x509": {"key": "x509", "type": "X509"},
        "tpm": {"key": "tpm", "type": "Tpm"},
    }

    def __init__(
        self,
        *,
        id_scope: str,
        symmetric_key: Optional["_models.SymmetricKey"] = None,
        x509: Optional["_models.X509"] = None,
        tpm: Optional["_models.Tpm"] = None,
        **kwargs
    ):
        """
        :keyword id_scope: ID scope for connecting to the IoT Central application. Required.
        :paramtype id_scope: str
        :keyword symmetric_key: The symmetric key credentials for the device.
        :paramtype symmetric_key: ~azureiotcentral.models.SymmetricKey
        :keyword x509: The X.509 credential information for the device.
        :paramtype x509: ~azureiotcentral.models.X509
        :keyword tpm: The TPM credentials for the device.
        :paramtype tpm: ~azureiotcentral.models.Tpm
        """
        super().__init__(**kwargs)
        self.id_scope = id_scope
        self.symmetric_key = symmetric_key
        self.x509 = x509
        self.tpm = tpm


class DeviceGroup(_serialization.Model):
    """The device group definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique ID of the device group.
    :vartype id: str
    :ivar display_name: Display name of the device group. Required.
    :vartype display_name: str
    :ivar filter: Query defining which devices should be in this group, `Query Language Reference
     <https://aka.ms/iotcquery>`_. Required.
    :vartype filter: str
    :ivar description: Short summary of device group.
    :vartype description: str
    :ivar etag: ETag used to prevent conflict in device group updates.
    :vartype etag: str
    :ivar organizations: List of organization IDs of the device group, only one organization
     support today, multiple organizations will be supported soon.
    :vartype organizations: list[str]
    """

    _validation = {
        "id": {"readonly": True},
        "display_name": {"required": True},
        "filter": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "filter": {"key": "filter", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "etag": {"key": "etag", "type": "str"},
        "organizations": {"key": "organizations", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        filter: str,  # pylint: disable=redefined-builtin
        description: Optional[str] = None,
        etag: Optional[str] = None,
        organizations: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword display_name: Display name of the device group. Required.
        :paramtype display_name: str
        :keyword filter: Query defining which devices should be in this group, `Query Language
         Reference <https://aka.ms/iotcquery>`_. Required.
        :paramtype filter: str
        :keyword description: Short summary of device group.
        :paramtype description: str
        :keyword etag: ETag used to prevent conflict in device group updates.
        :paramtype etag: str
        :keyword organizations: List of organization IDs of the device group, only one organization
         support today, multiple organizations will be supported soon.
        :paramtype organizations: list[str]
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.filter = filter
        self.description = description
        self.etag = etag
        self.organizations = organizations


class DeviceGroupCollection(_serialization.Model):
    """The paged results of device groups.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of device groups. Required.
    :vartype value: list[~azureiotcentral.models.DeviceGroup]
    :ivar next_link: URL to get the next page of device groups.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DeviceGroup]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.DeviceGroup"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of device groups. Required.
        :paramtype value: list[~azureiotcentral.models.DeviceGroup]
        :keyword next_link: URL to get the next page of device groups.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceTelemetry(_serialization.Model):
    """The device telemetry definition.

    :ivar value: The last known value of this device telemetry.
    :vartype value: any
    :ivar timestamp: String-formatted date representing the time when the telemetry value was sent.
    :vartype timestamp: ~datetime.datetime
    """

    _attribute_map = {
        "value": {"key": "value", "type": "object"},
        "timestamp": {"key": "timestamp", "type": "iso-8601"},
    }

    def __init__(self, *, value: Optional[Any] = None, timestamp: Optional[datetime.datetime] = None, **kwargs):
        """
        :keyword value: The last known value of this device telemetry.
        :paramtype value: any
        :keyword timestamp: String-formatted date representing the time when the telemetry value was
         sent.
        :paramtype timestamp: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.value = value
        self.timestamp = timestamp


class DeviceTemplate(_serialization.Model):
    """The device template definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique ID of the device template.
    :vartype id: str
    :ivar type: The JSON-LD types of this device template. Required.
    :vartype type: list[str]
    :ivar etag: ETag used to prevent conflict in device template updates.
    :vartype etag: str
    :ivar display_name: Display name of the device template.
    :vartype display_name: str
    :ivar description: Detailed description of the device template.
    :vartype description: str
    :ivar capability_model: The capability model utilized by this device template. Required.
    :vartype capability_model: JSON
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "capability_model": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "@id", "type": "str"},
        "type": {"key": "@type", "type": "[str]"},
        "etag": {"key": "etag", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "capability_model": {"key": "capabilityModel", "type": "object"},
    }

    def __init__(
        self,
        *,
        type: List[str],
        capability_model: JSON,
        etag: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword type: The JSON-LD types of this device template. Required.
        :paramtype type: list[str]
        :keyword etag: ETag used to prevent conflict in device template updates.
        :paramtype etag: str
        :keyword display_name: Display name of the device template.
        :paramtype display_name: str
        :keyword description: Detailed description of the device template.
        :paramtype description: str
        :keyword capability_model: The capability model utilized by this device template. Required.
        :paramtype capability_model: JSON
        """
        super().__init__(**kwargs)
        self.id = None
        self.type = type
        self.etag = etag
        self.display_name = display_name
        self.description = description
        self.capability_model = capability_model


class DeviceTemplateCollection(_serialization.Model):
    """The paged results of device templates.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of device templates. Required.
    :vartype value: list[~azureiotcentral.models.DeviceTemplate]
    :ivar next_link: URL to get the next page of device templates.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DeviceTemplate]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.DeviceTemplate"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of device templates. Required.
        :paramtype value: list[~azureiotcentral.models.DeviceTemplate]
        :keyword next_link: URL to get the next page of device templates.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class EmailUser(User):
    """The email user definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    :ivar id: Unique ID of the user.
    :vartype id: str
    :ivar type: Type of the user. Required.
    :vartype type: str
    :ivar email: Email address of the user. Required.
    :vartype email: str
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
        "id": {"readonly": True},
        "type": {"required": True},
        "email": {"required": True},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "email": {"key": "email", "type": "str"},
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], email: str, **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        :keyword email: Email address of the user. Required.
        :paramtype email: str
        """
        super().__init__(roles=roles, **kwargs)
        self.type = "email"  # type: str
        self.email = email


class Error(_serialization.Model):
    """The response error definition.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Error details for current request. Required.
    :vartype error: ~azureiotcentral.models.ErrorDetails
    """

    _validation = {
        "error": {"required": True},
    }

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetails"},
    }

    def __init__(self, *, error: "_models.ErrorDetails", **kwargs):
        """
        :keyword error: Error details for current request. Required.
        :paramtype error: ~azureiotcentral.models.ErrorDetails
        """
        super().__init__(**kwargs)
        self.error = error


class ErrorDetails(_serialization.Model):
    """The detail information of the error.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Error code. Required.
    :vartype code: str
    :ivar message: Error message details. Required.
    :vartype message: str
    :ivar request_id: Correlation Id for current request.
    :vartype request_id: str
    :ivar time: The time that error request failed.
    :vartype time: ~datetime.datetime
    """

    _validation = {
        "code": {"required": True},
        "message": {"required": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "request_id": {"key": "requestId", "type": "str"},
        "time": {"key": "time", "type": "rfc-1123"},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        request_id: Optional[str] = None,
        time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword code: Error code. Required.
        :paramtype code: str
        :keyword message: Error message details. Required.
        :paramtype message: str
        :keyword request_id: Correlation Id for current request.
        :paramtype request_id: str
        :keyword time: The time that error request failed.
        :paramtype time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message
        self.request_id = request_id
        self.time = time


class FileUpload(_serialization.Model):
    """The file upload configuration definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar account: The storage account name where to upload the file to.
    :vartype account: str
    :ivar connection_string: The connection string used to configure the storage account. Required.
    :vartype connection_string: str
    :ivar container: The name of the container inside the storage account. Required.
    :vartype container: str
    :ivar sas_ttl: ISO 8601 duration standard, The amount of time the device’s request to upload a
     file is valid before it expires.
    :vartype sas_ttl: str
    :ivar state: The state of the file upload configuration. Known values are: "pending",
     "updating", "deleting", "succeeded", and "failed".
    :vartype state: str or ~azureiotcentral.models.FileUploadState
    :ivar etag: ETag used to prevent conflict with multiple uploads.
    :vartype etag: str
    """

    _validation = {
        "connection_string": {"required": True},
        "container": {"required": True},
        "state": {"readonly": True},
    }

    _attribute_map = {
        "account": {"key": "account", "type": "str"},
        "connection_string": {"key": "connectionString", "type": "str"},
        "container": {"key": "container", "type": "str"},
        "sas_ttl": {"key": "sasTtl", "type": "str"},
        "state": {"key": "state", "type": "str"},
        "etag": {"key": "etag", "type": "str"},
    }

    def __init__(
        self,
        *,
        connection_string: str,
        container: str,
        account: Optional[str] = None,
        sas_ttl: Optional[str] = None,
        etag: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword account: The storage account name where to upload the file to.
        :paramtype account: str
        :keyword connection_string: The connection string used to configure the storage account.
         Required.
        :paramtype connection_string: str
        :keyword container: The name of the container inside the storage account. Required.
        :paramtype container: str
        :keyword sas_ttl: ISO 8601 duration standard, The amount of time the device’s request to upload
         a file is valid before it expires.
        :paramtype sas_ttl: str
        :keyword etag: ETag used to prevent conflict with multiple uploads.
        :paramtype etag: str
        """
        super().__init__(**kwargs)
        self.account = account
        self.connection_string = connection_string
        self.container = container
        self.sas_ttl = sas_ttl
        self.state = None
        self.etag = etag


class Organization(_serialization.Model):
    """The organization definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique ID of the organization.
    :vartype id: str
    :ivar display_name: Display name of the organization.
    :vartype display_name: str
    :ivar parent: ID of the parent of the organization.
    :vartype parent: str
    """

    _validation = {
        "id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "parent": {"key": "parent", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, parent: Optional[str] = None, **kwargs):
        """
        :keyword display_name: Display name of the organization.
        :paramtype display_name: str
        :keyword parent: ID of the parent of the organization.
        :paramtype parent: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.parent = parent


class OrganizationCollection(_serialization.Model):
    """OrganizationCollection.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of organizations. Required.
    :vartype value: list[~azureiotcentral.models.Organization]
    :ivar next_link: URL to get the next page of organizations.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Organization]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Organization"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of organizations. Required.
        :paramtype value: list[~azureiotcentral.models.Organization]
        :keyword next_link: URL to get the next page of organizations.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Role(_serialization.Model):
    """The role definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique ID of the role.
    :vartype id: str
    :ivar display_name: Display name of the role.
    :vartype display_name: str
    """

    _validation = {
        "id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, **kwargs):
        """
        :keyword display_name: Display name of the role.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name


class RoleAssignment(_serialization.Model):
    """The role assignment definition.

    All required parameters must be populated in order to send to Azure.

    :ivar role: ID of the role for this role assignment. Required.
    :vartype role: str
    :ivar organization: ID of the organization for this role assignment.
    :vartype organization: str
    """

    _validation = {
        "role": {"required": True},
    }

    _attribute_map = {
        "role": {"key": "role", "type": "str"},
        "organization": {"key": "organization", "type": "str"},
    }

    def __init__(self, *, role: str, organization: Optional[str] = None, **kwargs):
        """
        :keyword role: ID of the role for this role assignment. Required.
        :paramtype role: str
        :keyword organization: ID of the organization for this role assignment.
        :paramtype organization: str
        """
        super().__init__(**kwargs)
        self.role = role
        self.organization = organization


class RoleCollection(_serialization.Model):
    """The paged results of roles.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of roles. Required.
    :vartype value: list[~azureiotcentral.models.Role]
    :ivar next_link: URL to get the next page of roles.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Role]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Role"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of roles. Required.
        :paramtype value: list[~azureiotcentral.models.Role]
        :keyword next_link: URL to get the next page of roles.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ServicePrincipalUser(User):
    """The service principal user definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    :ivar id: Unique ID of the user.
    :vartype id: str
    :ivar type: Type of the user. Required.
    :vartype type: str
    :ivar tenant_id: The AAD tenant ID of the service principal. Required.
    :vartype tenant_id: str
    :ivar object_id: The AAD object ID of the service principal. Required.
    :vartype object_id: str
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
        "id": {"readonly": True},
        "type": {"required": True},
        "tenant_id": {"required": True},
        "object_id": {"required": True},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "object_id": {"key": "objectId", "type": "str"},
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], tenant_id: str, object_id: str, **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        :keyword tenant_id: The AAD tenant ID of the service principal. Required.
        :paramtype tenant_id: str
        :keyword object_id: The AAD object ID of the service principal. Required.
        :paramtype object_id: str
        """
        super().__init__(roles=roles, **kwargs)
        self.type = "servicePrincipal"  # type: str
        self.tenant_id = tenant_id
        self.object_id = object_id


class SymmetricKey(_serialization.Model):
    """The symmetric key definition.

    All required parameters must be populated in order to send to Azure.

    :ivar primary_key: The primary key for this credential. Required.
    :vartype primary_key: str
    :ivar secondary_key: The secondary key for this credential. Required.
    :vartype secondary_key: str
    """

    _validation = {
        "primary_key": {"required": True},
        "secondary_key": {"required": True},
    }

    _attribute_map = {
        "primary_key": {"key": "primaryKey", "type": "str"},
        "secondary_key": {"key": "secondaryKey", "type": "str"},
    }

    def __init__(self, *, primary_key: str, secondary_key: str, **kwargs):
        """
        :keyword primary_key: The primary key for this credential. Required.
        :paramtype primary_key: str
        :keyword secondary_key: The secondary key for this credential. Required.
        :paramtype secondary_key: str
        """
        super().__init__(**kwargs)
        self.primary_key = primary_key
        self.secondary_key = secondary_key


class SymmetricKeyAttestation(Attestation):
    """The symmetric key attestation definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the attestation. Required.
    :vartype type: str
    :ivar symmetric_key: The symmetric key credentials for this attestation. Required.
    :vartype symmetric_key: ~azureiotcentral.models.SymmetricKey
    """

    _validation = {
        "type": {"required": True},
        "symmetric_key": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "symmetric_key": {"key": "symmetricKey", "type": "SymmetricKey"},
    }

    def __init__(self, *, symmetric_key: "_models.SymmetricKey", **kwargs):
        """
        :keyword symmetric_key: The symmetric key credentials for this attestation. Required.
        :paramtype symmetric_key: ~azureiotcentral.models.SymmetricKey
        """
        super().__init__(**kwargs)
        self.type = "symmetricKey"  # type: str
        self.symmetric_key = symmetric_key


class Tpm(_serialization.Model):
    """The trusted platform module definition.

    All required parameters must be populated in order to send to Azure.

    :ivar endorsement_key: The TPM endorsement key for this credential. Required.
    :vartype endorsement_key: str
    """

    _validation = {
        "endorsement_key": {"required": True},
    }

    _attribute_map = {
        "endorsement_key": {"key": "endorsementKey", "type": "str"},
    }

    def __init__(self, *, endorsement_key: str, **kwargs):
        """
        :keyword endorsement_key: The TPM endorsement key for this credential. Required.
        :paramtype endorsement_key: str
        """
        super().__init__(**kwargs)
        self.endorsement_key = endorsement_key


class TpmAttestation(Attestation):
    """The attestation of TPM.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the attestation. Required.
    :vartype type: str
    :ivar tpm: The TPM credentials for this attestation. Required.
    :vartype tpm: ~azureiotcentral.models.Tpm
    """

    _validation = {
        "type": {"required": True},
        "tpm": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "tpm": {"key": "tpm", "type": "Tpm"},
    }

    def __init__(self, *, tpm: "_models.Tpm", **kwargs):
        """
        :keyword tpm: The TPM credentials for this attestation. Required.
        :paramtype tpm: ~azureiotcentral.models.Tpm
        """
        super().__init__(**kwargs)
        self.type = "tpm"  # type: str
        self.tpm = tpm


class UserCollection(_serialization.Model):
    """The paged results of users.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of users. Required.
    :vartype value: list[~azureiotcentral.models.User]
    :ivar next_link: URL to get the next page of users.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[User]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.User"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of users. Required.
        :paramtype value: list[~azureiotcentral.models.User]
        :keyword next_link: URL to get the next page of users.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class X509(_serialization.Model):
    """The X509 definition.

    :ivar client_certificates: The X.509 client certificates for this credential.
    :vartype client_certificates: ~azureiotcentral.models.X509Certificates
    """

    _attribute_map = {
        "client_certificates": {"key": "clientCertificates", "type": "X509Certificates"},
    }

    def __init__(self, *, client_certificates: Optional["_models.X509Certificates"] = None, **kwargs):
        """
        :keyword client_certificates: The X.509 client certificates for this credential.
        :paramtype client_certificates: ~azureiotcentral.models.X509Certificates
        """
        super().__init__(**kwargs)
        self.client_certificates = client_certificates


class X509Attestation(Attestation):
    """The X509 attestation definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the attestation. Required.
    :vartype type: str
    :ivar x509: The X.509 credentials for this attestation. Required.
    :vartype x509: ~azureiotcentral.models.X509
    """

    _validation = {
        "type": {"required": True},
        "x509": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "x509": {"key": "x509", "type": "X509"},
    }

    def __init__(self, *, x509: "_models.X509", **kwargs):
        """
        :keyword x509: The X.509 credentials for this attestation. Required.
        :paramtype x509: ~azureiotcentral.models.X509
        """
        super().__init__(**kwargs)
        self.type = "x509"  # type: str
        self.x509 = x509


class X509Certificate(_serialization.Model):
    """The X509 certificate definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar certificate: The string representation of this certificate.
    :vartype certificate: str
    :ivar info: Information about this certificate.
    :vartype info: ~azureiotcentral.models.X509CertificateInfo
    """

    _validation = {
        "info": {"readonly": True},
    }

    _attribute_map = {
        "certificate": {"key": "certificate", "type": "str"},
        "info": {"key": "info", "type": "X509CertificateInfo"},
    }

    def __init__(self, *, certificate: Optional[str] = None, **kwargs):
        """
        :keyword certificate: The string representation of this certificate.
        :paramtype certificate: str
        """
        super().__init__(**kwargs)
        self.certificate = certificate
        self.info = None


class X509CertificateInfo(_serialization.Model):
    """The X509 certificate info.

    All required parameters must be populated in order to send to Azure.

    :ivar sha1_thumbprint: The SHA-1 hash value of the certificate. Required.
    :vartype sha1_thumbprint: str
    """

    _validation = {
        "sha1_thumbprint": {"required": True},
    }

    _attribute_map = {
        "sha1_thumbprint": {"key": "sha1Thumbprint", "type": "str"},
    }

    def __init__(self, *, sha1_thumbprint: str, **kwargs):
        """
        :keyword sha1_thumbprint: The SHA-1 hash value of the certificate. Required.
        :paramtype sha1_thumbprint: str
        """
        super().__init__(**kwargs)
        self.sha1_thumbprint = sha1_thumbprint


class X509Certificates(_serialization.Model):
    """The X509 certificates definition.

    All required parameters must be populated in order to send to Azure.

    :ivar primary: The primary X.509 certificate for this credential. Required.
    :vartype primary: ~azureiotcentral.models.X509Certificate
    :ivar secondary: The secondary X.509 certificate for this credential.
    :vartype secondary: ~azureiotcentral.models.X509Certificate
    """

    _validation = {
        "primary": {"required": True},
    }

    _attribute_map = {
        "primary": {"key": "primary", "type": "X509Certificate"},
        "secondary": {"key": "secondary", "type": "X509Certificate"},
    }

    def __init__(
        self, *, primary: "_models.X509Certificate", secondary: Optional["_models.X509Certificate"] = None, **kwargs
    ):
        """
        :keyword primary: The primary X.509 certificate for this credential. Required.
        :paramtype primary: ~azureiotcentral.models.X509Certificate
        :keyword secondary: The secondary X.509 certificate for this credential.
        :paramtype secondary: ~azureiotcentral.models.X509Certificate
        """
        super().__init__(**kwargs)
        self.primary = primary
        self.secondary = secondary
