# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, TYPE_CHECKING

from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.mgmt.core import AsyncARMPipelineClient

from .._serialization import Deserializer, Serializer
from ..models import _models as models
from ._configuration import AzureIoTCentralConfiguration
from .operations import (
    ApiTokensOperations,
    DashboardsOperations,
    DestinationsOperations,
    DeviceGroupsOperations,
    DeviceTemplatesOperations,
    DevicesOperations,
    EnrollmentGroupsOperations,
    ExportsOperations,
    FileUploadsOperations,
    JobsOperations,
    OrganizationsOperations,
    QueryOperations,
    RolesOperations,
    ScheduledJobsOperations,
    UsersOperations,
)

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential


class AzureIoTCentral:  # pylint: disable=client-accepts-api-version-keyword,too-many-instance-attributes
    """Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT
    devices at scale.

    :ivar api_tokens: ApiTokensOperations operations
    :vartype api_tokens: azureiotcentral.aio.operations.ApiTokensOperations
    :ivar dashboards: DashboardsOperations operations
    :vartype dashboards: azureiotcentral.aio.operations.DashboardsOperations
    :ivar destinations: DestinationsOperations operations
    :vartype destinations: azureiotcentral.aio.operations.DestinationsOperations
    :ivar exports: ExportsOperations operations
    :vartype exports: azureiotcentral.aio.operations.ExportsOperations
    :ivar device_groups: DeviceGroupsOperations operations
    :vartype device_groups: azureiotcentral.aio.operations.DeviceGroupsOperations
    :ivar device_templates: DeviceTemplatesOperations operations
    :vartype device_templates: azureiotcentral.aio.operations.DeviceTemplatesOperations
    :ivar devices: DevicesOperations operations
    :vartype devices: azureiotcentral.aio.operations.DevicesOperations
    :ivar enrollment_groups: EnrollmentGroupsOperations operations
    :vartype enrollment_groups: azureiotcentral.aio.operations.EnrollmentGroupsOperations
    :ivar file_uploads: FileUploadsOperations operations
    :vartype file_uploads: azureiotcentral.aio.operations.FileUploadsOperations
    :ivar jobs: JobsOperations operations
    :vartype jobs: azureiotcentral.aio.operations.JobsOperations
    :ivar organizations: OrganizationsOperations operations
    :vartype organizations: azureiotcentral.aio.operations.OrganizationsOperations
    :ivar query: QueryOperations operations
    :vartype query: azureiotcentral.aio.operations.QueryOperations
    :ivar roles: RolesOperations operations
    :vartype roles: azureiotcentral.aio.operations.RolesOperations
    :ivar scheduled_jobs: ScheduledJobsOperations operations
    :vartype scheduled_jobs: azureiotcentral.aio.operations.ScheduledJobsOperations
    :ivar users: UsersOperations operations
    :vartype users: azureiotcentral.aio.operations.UsersOperations
    :param subdomain: The application subdomain. Required.
    :type subdomain: str
    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param base_domain: The base domain for all Azure IoT Central service requests. Default value
     is "azureiotcentral.com".
    :type base_domain: str
    :keyword api_version: Api Version. Default value is "2022-06-30-preview". Note that overriding
     this default value may result in unsupported behavior.
    :paramtype api_version: str
    """

    def __init__(
        self,
        subdomain: str,
        credential: "AsyncTokenCredential",
        base_domain: str = "azureiotcentral.com",
        **kwargs: Any
    ) -> None:
        _endpoint = "https://{subdomain}.{baseDomain}/api"
        self._config = AzureIoTCentralConfiguration(
            subdomain=subdomain, credential=credential, base_domain=base_domain, **kwargs
        )
        self._client = AsyncARMPipelineClient(base_url=_endpoint, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self._serialize.client_side_validation = False
        self.api_tokens = ApiTokensOperations(self._client, self._config, self._serialize, self._deserialize)
        self.dashboards = DashboardsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.destinations = DestinationsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.exports = ExportsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.device_groups = DeviceGroupsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.device_templates = DeviceTemplatesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.devices = DevicesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.enrollment_groups = EnrollmentGroupsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.file_uploads = FileUploadsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.jobs = JobsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.organizations = OrganizationsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.query = QueryOperations(self._client, self._config, self._serialize, self._deserialize)
        self.roles = RolesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.scheduled_jobs = ScheduledJobsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.users = UsersOperations(self._client, self._config, self._serialize, self._deserialize)

    def send_request(self, request: HttpRequest, **kwargs: Any) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client.send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        path_format_arguments = {
            "baseDomain": self._serialize.url(
                "self._config.base_domain", self._config.base_domain, "str", skip_quote=True
            ),
            "subdomain": self._serialize.url("self._config.subdomain", self._config.subdomain, "str"),
        }

        request_copy.url = self._client.format_url(request_copy.url, **path_format_arguments)
        return self._client.send_request(request_copy, **kwargs)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "AzureIoTCentral":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
