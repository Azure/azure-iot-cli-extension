# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class CapabilityAggregateType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of aggregation to be applied on capability data."""

    #: Sum of the capability data
    SUM = "sum"
    #: Count of the capability data
    COUNT = "count"
    #: Maximum of the capability data
    MAX = "max"
    #: Minimum of the capability data
    MIN = "min"
    #: Average of the capability data
    AVG = "avg"


class CertificateEntry(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """CertificateEntry."""

    #: The entry of primary certificate
    PRIMARY = "primary"
    #: The entry of secondary certificate
    SECONDARY = "secondary"


class DestinationSource(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of data to export."""

    #: Destination source from device telemetry
    TELEMETRY = "telemetry"
    #: Destination source from device properties
    PROPERTIES = "properties"
    #: Destination source from device lifecycle
    DEVICE_LIFECYCLE = "deviceLifecycle"
    #: Destination source from device template lifecycle
    DEVICE_TEMPLATE_LIFECYCLE = "deviceTemplateLifecycle"
    #: Destination source from device connectivity
    DEVICE_CONNECTIVITY = "deviceConnectivity"


class EnrollmentGroupType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of devices that connect through the group."""

    #: Regular (non-Edge) IoT devices
    IO_T_DEVICES = "iot"
    #: IoT Edge devices
    IO_T_EDGE_DEVICES = "iotEdge"


class FileUploadState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The state of the file upload configuration."""

    PENDING = "pending"
    UPDATING = "updating"
    DELETING = "deleting"
    SUCCEEDED = "succeeded"
    FAILED = "failed"


class JobBatchType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Whether batching is done on a specified number of devices or a percentage of the total devices."""

    #: Job Batching based on number of devices.
    NUMBER = "number"
    #: Job Batching based percentage of total applied devices.
    PERCENTAGE = "percentage"


class JobCancellationThresholdType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Whether the cancellation threshold is per a specified number of devices or a percentage of the
    total devices.
    """

    #: Job cancellation threshold based on specified number of devices.
    NUMBER = "number"
    #: Job cancellation threshold based on percentage of total devices.
    PERCENTAGE = "percentage"


class JobRecurrence(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The recurrence of the scheduled job. If not provided, the job will run once at the specified
    start time.
    """

    #: The job will run once daily
    DAILY = "daily"
    #: The job will run once every week
    WEEKLY = "weekly"
    #: The job will run once every month
    MONTHLY = "monthly"


class OAuthRequestType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Content-Type for the token request."""

    #: Use automatic Content-Type for token request
    AUTO = "auto"
    #: Content-Type as JSON for token request
    JSON = "json"
    #: Content-Type as UrlEncoded for token request
    URL_ENCODED = "urlencoded"


class TileTimeRangeDuration(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The duration of time to look back when querying data."""

    #: 30 Minutes
    THIRTY_MINUTES = "PT30M"
    #: 1 Hour
    ONE_HOUR = "PT1H"
    #: 12 Hours
    TWELVE_HOURS = "PT12H"
    #: 1 Day
    ONE_DAY = "P1D"
    #: 1 Week
    ONE_WEEK = "P1W"
    #: 30 Days
    THIRTY_DAYS = "P30D"


class TileTimeRangeResolution(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The resolution to aggregate data over for each data point."""

    #: 1 Minute
    ONE_MINUTE = "PT1M"
    #: 5 Minutes
    FIVE_MINUTES = "PT5M"
    #: 10 Minutes
    TEN_MINUTES = "PT10M"
    #: 30 Minutes
    THIRTY_MINUTES = "PT30M"
    #: 1 Hour
    ONE_HOUR = "PT1H"
    #: 12 Hours
    TWELVE_HOURS = "PT12H"
    #: 1 Day
    ONE_DAY = "P1D"
    #: 1 Week
    ONE_WEEK = "P1W"
