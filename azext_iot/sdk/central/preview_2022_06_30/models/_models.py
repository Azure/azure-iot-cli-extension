# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class Permission(_serialization.Model):
    """The permission definition.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        """
        super().__init__(**kwargs)
        self.roles = roles


class User(Permission):
    """The user definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ADGroupUser, EmailUser, ServicePrincipalUser

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    :ivar id: Unique ID of the user.
    :vartype id: str
    :ivar type: Type of the user. Required.
    :vartype type: str
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
        "id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {"adGroup": "ADGroupUser", "email": "EmailUser", "servicePrincipal": "ServicePrincipalUser"}
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        """
        super().__init__(roles=roles, **kwargs)
        self.id = None
        self.type = None  # type: Optional[str]


class ADGroupUser(User):
    """The active directory group user definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    :ivar id: Unique ID of the user.
    :vartype id: str
    :ivar type: Type of the user. Required.
    :vartype type: str
    :ivar tenant_id: The AAD tenant ID of the AD Group. Required.
    :vartype tenant_id: str
    :ivar object_id: The AAD object ID of the AD Group. Required.
    :vartype object_id: str
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
        "id": {"readonly": True},
        "type": {"required": True},
        "tenant_id": {"required": True},
        "object_id": {"required": True},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "object_id": {"key": "objectId", "type": "str"},
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], tenant_id: str, object_id: str, **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        :keyword tenant_id: The AAD tenant ID of the AD Group. Required.
        :paramtype tenant_id: str
        :keyword object_id: The AAD object ID of the AD Group. Required.
        :paramtype object_id: str
        """
        super().__init__(roles=roles, **kwargs)
        self.type = "adGroup"  # type: str
        self.tenant_id = tenant_id
        self.object_id = object_id


class ApiToken(Permission):
    """The access token definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    :ivar id: Unique ID of the API token.
    :vartype id: str
    :ivar token: Value of the API token.
    :vartype token: str
    :ivar expiry: String-formatted date representing the time when the token expires.
    :vartype expiry: ~datetime.datetime
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
        "id": {"readonly": True},
        "token": {"readonly": True},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
        "id": {"key": "id", "type": "str"},
        "token": {"key": "token", "type": "str"},
        "expiry": {"key": "expiry", "type": "iso-8601"},
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], expiry: Optional[datetime.datetime] = None, **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        :keyword expiry: String-formatted date representing the time when the token expires.
        :paramtype expiry: ~datetime.datetime
        """
        super().__init__(roles=roles, **kwargs)
        self.id = None
        self.token = None
        self.expiry = expiry


class ApiTokenCollection(_serialization.Model):
    """The paged results of API tokens.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of API tokens. Required.
    :vartype value: list[~azureiotcentral.models.ApiToken]
    :ivar next_link: URL to get the next page of API tokens.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ApiToken]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.ApiToken"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of API tokens. Required.
        :paramtype value: list[~azureiotcentral.models.ApiToken]
        :keyword next_link: URL to get the next page of API tokens.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Attestation(_serialization.Model):
    """The attestation definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    SymmetricKeyAttestation, TpmAttestation, X509Attestation

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the attestation. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {"symmetricKey": "SymmetricKeyAttestation", "tpm": "TpmAttestation", "x509": "X509Attestation"}
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class TileCapabilityConfiguration(_serialization.Model):
    """Configuration specifying an array of capabilities to be displayed in the tile.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    """

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
    }

    def __init__(self, *, capabilities: Optional[List["_models.TileCapability"]] = None, **kwargs):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        """
        super().__init__(**kwargs)
        self.capabilities = capabilities


class GroupTileConfiguration(_serialization.Model):
    """Configuration specifying a set of devices to display data for in a tile.

    All required parameters must be populated in order to send to Azure.

    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
    }

    _attribute_map = {
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
    }

    def __init__(self, *, group: str, devices: List[str], **kwargs):
        """
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        """
        super().__init__(**kwargs)
        self.group = group
        self.devices = devices


class TileConfiguration(_serialization.Model):
    """Configuration specifying information about a tile.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BarChartConfiguration, CommandTileConfiguration, DataExplorerTileConfiguration,
    DeviceCountTileConfiguration, EventChartConfiguration, EventHistoryChartConfiguration,
    ExternalContentTileConfiguration, HeatMapConfiguration, ImageTileConfiguration,
    KpiTileConfiguration, LabelTileConfiguration, LineChartConfiguration, LkvTileConfiguration,
    MapPropertyConfiguration, MapTelemetryConfiguration, MarkdownTileConfiguration,
    PieChartConfiguration, PropertyTileConfiguration, StateChartConfiguration,
    StateHistoryChartConfiguration

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "barChart": "BarChartConfiguration",
            "command": "CommandTileConfiguration",
            "dataExplorer": "DataExplorerTileConfiguration",
            "deviceCount": "DeviceCountTileConfiguration",
            "eventChart": "EventChartConfiguration",
            "eventHistoryChart": "EventHistoryChartConfiguration",
            "externalContent": "ExternalContentTileConfiguration",
            "heatMapChart": "HeatMapConfiguration",
            "image": "ImageTileConfiguration",
            "kpi": "KpiTileConfiguration",
            "label": "LabelTileConfiguration",
            "lineChart": "LineChartConfiguration",
            "lkv": "LkvTileConfiguration",
            "mapProperty": "MapPropertyConfiguration",
            "mapTelemetry": "MapTelemetryConfiguration",
            "markdown": "MarkdownTileConfiguration",
            "pieChart": "PieChartConfiguration",
            "property": "PropertyTileConfiguration",
            "stateChart": "StateChartConfiguration",
            "stateHistoryChart": "StateHistoryChartConfiguration",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class BarChartConfiguration(TileConfiguration, GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for a bar chart tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar format: The format configuration of the chart.
    :vartype format: ~azureiotcentral.models.ChartFormatConfiguration
    :ivar query_range: The query range configuration of the chart. Required.
    :vartype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "type": {"required": True},
        "query_range": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "format": {"key": "format", "type": "ChartFormatConfiguration"},
        "query_range": {"key": "queryRange", "type": "TimeQueryRangeConfiguration"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        query_range: "_models.TimeQueryRangeConfiguration",
        capabilities: Optional[List["_models.TileCapability"]] = None,
        format: Optional["_models.ChartFormatConfiguration"] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword format: The format configuration of the chart.
        :paramtype format: ~azureiotcentral.models.ChartFormatConfiguration
        :keyword query_range: The query range configuration of the chart. Required.
        :paramtype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.type = "barChart"  # type: str
        self.format = format
        self.query_range = query_range


class DataExportStatus(_serialization.Model):
    """The data export status definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: Indication of the current health and operation of the export or destination.
    :vartype status: str
    :ivar errors: Errors encountered by the export or destination.
    :vartype errors: list[~azureiotcentral.models.DataExportError]
    :ivar last_export_time: The timestamp of the last message that was sent to the export or
     destination.
    :vartype last_export_time: ~datetime.datetime
    """

    _validation = {
        "status": {"readonly": True},
        "errors": {"readonly": True},
        "last_export_time": {"readonly": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "errors": {"key": "errors", "type": "[DataExportError]"},
        "last_export_time": {"key": "lastExportTime", "type": "iso-8601"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.status = None
        self.errors = None
        self.last_export_time = None


class Destination(DataExportStatus):
    """The destination definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ExportDestination, BlobStorageV1Destination, DataExplorerV1Destination, EventHubsV1Destination,
    ServiceBusQueueV1Destination, ServiceBusTopicV1Destination, WebhookV1Destination

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Indication of the current health and operation of the export or destination.
    :vartype status: str
    :ivar errors: Errors encountered by the export or destination.
    :vartype errors: list[~azureiotcentral.models.DataExportError]
    :ivar last_export_time: The timestamp of the last message that was sent to the export or
     destination.
    :vartype last_export_time: ~datetime.datetime
    :ivar id: Unique ID of the destination.
    :vartype id: str
    :ivar display_name: Display name of the destination. Required.
    :vartype display_name: str
    :ivar type: The type of destination configuration. Required.
    :vartype type: str
    """

    _validation = {
        "status": {"readonly": True},
        "errors": {"readonly": True},
        "last_export_time": {"readonly": True},
        "id": {"readonly": True},
        "display_name": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "errors": {"key": "errors", "type": "[DataExportError]"},
        "last_export_time": {"key": "lastExportTime", "type": "iso-8601"},
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "ExportDestination": "ExportDestination",
            "blobstorage@v1": "BlobStorageV1Destination",
            "dataexplorer@v1": "DataExplorerV1Destination",
            "eventhubs@v1": "EventHubsV1Destination",
            "servicebusqueue@v1": "ServiceBusQueueV1Destination",
            "servicebustopic@v1": "ServiceBusTopicV1Destination",
            "webhook@v1": "WebhookV1Destination",
        }
    }

    def __init__(self, *, display_name: str, **kwargs):
        """
        :keyword display_name: Display name of the destination. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.type = None  # type: Optional[str]


class BlobStorageV1Destination(Destination):
    """The blob storage destination definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Indication of the current health and operation of the export or destination.
    :vartype status: str
    :ivar errors: Errors encountered by the export or destination.
    :vartype errors: list[~azureiotcentral.models.DataExportError]
    :ivar last_export_time: The timestamp of the last message that was sent to the export or
     destination.
    :vartype last_export_time: ~datetime.datetime
    :ivar id: Unique ID of the destination.
    :vartype id: str
    :ivar display_name: Display name of the destination. Required.
    :vartype display_name: str
    :ivar type: The type of destination configuration. Required.
    :vartype type: str
    :ivar authorization: The authentication definition for blob storage destination. Required.
    :vartype authorization: ~azureiotcentral.models.BlobStorageV1DestinationAuth
    """

    _validation = {
        "status": {"readonly": True},
        "errors": {"readonly": True},
        "last_export_time": {"readonly": True},
        "id": {"readonly": True},
        "display_name": {"required": True},
        "type": {"required": True},
        "authorization": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "errors": {"key": "errors", "type": "[DataExportError]"},
        "last_export_time": {"key": "lastExportTime", "type": "iso-8601"},
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "authorization": {"key": "authorization", "type": "BlobStorageV1DestinationAuth"},
    }

    def __init__(self, *, display_name: str, authorization: "_models.BlobStorageV1DestinationAuth", **kwargs):
        """
        :keyword display_name: Display name of the destination. Required.
        :paramtype display_name: str
        :keyword authorization: The authentication definition for blob storage destination. Required.
        :paramtype authorization: ~azureiotcentral.models.BlobStorageV1DestinationAuth
        """
        super().__init__(display_name=display_name, **kwargs)
        self.type = "blobstorage@v1"  # type: str
        self.authorization = authorization


class BlobStorageV1DestinationAuth(_serialization.Model):
    """The authentication definition for blob storage destination.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BlobStorageV1DestinationConnectionStringAuth,
    BlobStorageV1DestinationSystemAssignedManagedIdentityAuth

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "connectionString": "BlobStorageV1DestinationConnectionStringAuth",
            "systemAssignedManagedIdentity": "BlobStorageV1DestinationSystemAssignedManagedIdentityAuth",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class BlobStorageV1DestinationConnectionStringAuth(BlobStorageV1DestinationAuth):
    """The authentication definition with connection string for blob storage destination.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    :ivar connection_string: The connection string for accessing the blob storage account.
     Required.
    :vartype connection_string: str
    :ivar container_name: Name of the container where data should be written in the storage
     account. Required.
    :vartype container_name: str
    """

    _validation = {
        "type": {"required": True},
        "connection_string": {"required": True},
        "container_name": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "connection_string": {"key": "connectionString", "type": "str"},
        "container_name": {"key": "containerName", "type": "str"},
    }

    def __init__(self, *, connection_string: str, container_name: str, **kwargs):
        """
        :keyword connection_string: The connection string for accessing the blob storage account.
         Required.
        :paramtype connection_string: str
        :keyword container_name: Name of the container where data should be written in the storage
         account. Required.
        :paramtype container_name: str
        """
        super().__init__(**kwargs)
        self.type = "connectionString"  # type: str
        self.connection_string = connection_string
        self.container_name = container_name


class BlobStorageV1DestinationSystemAssignedManagedIdentityAuth(BlobStorageV1DestinationAuth):
    """The authentication definition with system assigned managed identity for blob storage destination.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    :ivar endpoint_uri: The storage account's blob service endpoint URL. Required.
    :vartype endpoint_uri: str
    :ivar container_name: Name of the container where data should be written in the storage
     account. Required.
    :vartype container_name: str
    """

    _validation = {
        "type": {"required": True},
        "endpoint_uri": {"required": True},
        "container_name": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "endpoint_uri": {"key": "endpointUri", "type": "str"},
        "container_name": {"key": "containerName", "type": "str"},
    }

    def __init__(self, *, endpoint_uri: str, container_name: str, **kwargs):
        """
        :keyword endpoint_uri: The storage account's blob service endpoint URL. Required.
        :paramtype endpoint_uri: str
        :keyword container_name: Name of the container where data should be written in the storage
         account. Required.
        :paramtype container_name: str
        """
        super().__init__(**kwargs)
        self.type = "systemAssignedManagedIdentity"  # type: str
        self.endpoint_uri = endpoint_uri
        self.container_name = container_name


class CapabilityJobData(_serialization.Model):
    """The capability job data definition.

    All required parameters must be populated in order to send to Azure.

    :ivar target: The device template which defines the target capability for the job. Required.
    :vartype target: str
    :ivar path: The path to the target capability within the device template. Required.
    :vartype path: str
    :ivar value: The value used to update the target capability, if any.
    :vartype value: any
    """

    _validation = {
        "target": {"required": True, "min_length": 1},
        "path": {"required": True},
    }

    _attribute_map = {
        "target": {"key": "target", "type": "str"},
        "path": {"key": "path", "type": "str"},
        "value": {"key": "value", "type": "object"},
    }

    def __init__(self, *, target: str, path: str, value: Optional[Any] = None, **kwargs):
        """
        :keyword target: The device template which defines the target capability for the job. Required.
        :paramtype target: str
        :keyword path: The path to the target capability within the device template. Required.
        :paramtype path: str
        :keyword value: The value used to update the target capability, if any.
        :paramtype value: any
        """
        super().__init__(**kwargs)
        self.target = target
        self.path = path
        self.value = value


class ChartFormatConfiguration(_serialization.Model):
    """Configuration specifying formatting options for a chart tile.

    :ivar x_axis_enabled: Whether to display the x-axis.
    :vartype x_axis_enabled: bool
    :ivar y_axis_enabled: Whether to display the y-axis.
    :vartype y_axis_enabled: bool
    :ivar legend_enabled: Whether to display the legend.
    :vartype legend_enabled: bool
    """

    _attribute_map = {
        "x_axis_enabled": {"key": "xAxisEnabled", "type": "bool"},
        "y_axis_enabled": {"key": "yAxisEnabled", "type": "bool"},
        "legend_enabled": {"key": "legendEnabled", "type": "bool"},
    }

    def __init__(
        self, *, x_axis_enabled: bool = True, y_axis_enabled: bool = True, legend_enabled: bool = True, **kwargs
    ):
        """
        :keyword x_axis_enabled: Whether to display the x-axis.
        :paramtype x_axis_enabled: bool
        :keyword y_axis_enabled: Whether to display the y-axis.
        :paramtype y_axis_enabled: bool
        :keyword legend_enabled: Whether to display the legend.
        :paramtype legend_enabled: bool
        """
        super().__init__(**kwargs)
        self.x_axis_enabled = x_axis_enabled
        self.y_axis_enabled = y_axis_enabled
        self.legend_enabled = legend_enabled


class JobData(_serialization.Model):
    """The job data definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CloudPropertyJobData, CommandJobData, DeviceTemplateMigrationJobData, PropertyJobData

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the job data. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "cloudProperty": "CloudPropertyJobData",
            "command": "CommandJobData",
            "deviceTemplateMigration": "DeviceTemplateMigrationJobData",
            "property": "PropertyJobData",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class CloudPropertyJobData(JobData, CapabilityJobData):
    """The cloud property job data.

    All required parameters must be populated in order to send to Azure.

    :ivar target: The device template which defines the target capability for the job. Required.
    :vartype target: str
    :ivar path: The path to the target capability within the device template. Required.
    :vartype path: str
    :ivar value: The value used to update the target capability, if any.
    :vartype value: any
    :ivar type: Type of the job data. Required.
    :vartype type: str
    """

    _validation = {
        "target": {"required": True, "min_length": 1},
        "path": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "target": {"key": "target", "type": "str"},
        "path": {"key": "path", "type": "str"},
        "value": {"key": "value", "type": "object"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, target: str, path: str, value: Optional[Any] = None, **kwargs):
        """
        :keyword target: The device template which defines the target capability for the job. Required.
        :paramtype target: str
        :keyword path: The path to the target capability within the device template. Required.
        :paramtype path: str
        :keyword value: The value used to update the target capability, if any.
        :paramtype value: any
        """
        super().__init__(target=target, path=path, value=value, **kwargs)
        self.target = target
        self.path = path
        self.value = value
        self.type = "cloudProperty"  # type: str


class Collection(_serialization.Model):
    """The collection of entities.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of entities. Required.
    :vartype value: list[JSON]
    :ivar next_link: URL to get the next page of entities.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[object]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List[JSON], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of entities. Required.
        :paramtype value: list[JSON]
        :keyword next_link: URL to get the next page of entities.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class CommandConfiguration(TileConfiguration):
    """Configuration specifying options for a command tile.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar device: The device id that the command is associated with. Required.
    :vartype device: str
    :ivar command: The command id to associate the tile to. Required.
    :vartype command: str
    """

    _validation = {
        "type": {"required": True},
        "device": {"required": True},
        "command": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "device": {"key": "device", "type": "str"},
        "command": {"key": "command", "type": "str"},
    }

    def __init__(self, *, device: str, command: str, **kwargs):
        """
        :keyword device: The device id that the command is associated with. Required.
        :paramtype device: str
        :keyword command: The command id to associate the tile to. Required.
        :paramtype command: str
        """
        super().__init__(**kwargs)
        self.type = "command"  # type: str
        self.device = device
        self.command = command


class CommandJobData(JobData, CapabilityJobData):
    """The command job data definition.

    All required parameters must be populated in order to send to Azure.

    :ivar target: The device template which defines the target capability for the job. Required.
    :vartype target: str
    :ivar path: The path to the target capability within the device template. Required.
    :vartype path: str
    :ivar value: The value used to update the target capability, if any.
    :vartype value: any
    :ivar type: Type of the job data. Required.
    :vartype type: str
    """

    _validation = {
        "target": {"required": True, "min_length": 1},
        "path": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "target": {"key": "target", "type": "str"},
        "path": {"key": "path", "type": "str"},
        "value": {"key": "value", "type": "object"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, target: str, path: str, value: Optional[Any] = None, **kwargs):
        """
        :keyword target: The device template which defines the target capability for the job. Required.
        :paramtype target: str
        :keyword path: The path to the target capability within the device template. Required.
        :paramtype path: str
        :keyword value: The value used to update the target capability, if any.
        :paramtype value: any
        """
        super().__init__(target=target, path=path, value=value, **kwargs)
        self.target = target
        self.path = path
        self.value = value
        self.type = "command"  # type: str


class CommandTileConfiguration(TileConfiguration):
    """Configuration specifying options for a command tile.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar command: The command to reference in the tile. Required.
    :vartype command: str
    :ivar device: The device to reference in the tile. Required.
    :vartype device: any
    """

    _validation = {
        "type": {"required": True},
        "group": {"required": True},
        "command": {"required": True},
        "device": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "group": {"key": "group", "type": "str"},
        "command": {"key": "command", "type": "str"},
        "device": {"key": "device", "type": "object"},
    }

    def __init__(self, *, group: str, command: str, device: Any, **kwargs):
        """
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword command: The command to reference in the tile. Required.
        :paramtype command: str
        :keyword device: The device to reference in the tile. Required.
        :paramtype device: any
        """
        super().__init__(**kwargs)
        self.type = "command"  # type: str
        self.group = group
        self.command = command
        self.device = device


class QueryRangeConfiguration(_serialization.Model):
    """Configuration specifying how much data to return for a tile.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CountQueryRangeConfiguration, TimeQueryRangeConfiguration

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of time range - 'count' or 'time'. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {"type": {"count": "CountQueryRangeConfiguration", "time": "TimeQueryRangeConfiguration"}}

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class CountQueryRangeConfiguration(QueryRangeConfiguration):
    """Configuration specifying the number of data points to query for a tile.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of time range - 'count' or 'time'. Required.
    :vartype type: str
    :ivar count: The maximum number of data points to query for.
    :vartype count: int
    """

    _validation = {
        "type": {"required": True},
        "count": {"required": True, "maximum": 100, "minimum": 100},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "count": {"key": "count", "type": "int"},
    }

    def __init__(self, *, count: int = 100, **kwargs):
        """
        :keyword count: The maximum number of data points to query for.
        :paramtype count: int
        """
        super().__init__(**kwargs)
        self.type = "count"  # type: str
        self.count = count


class Dashboard(_serialization.Model):
    """Dashboard.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique ID of the dashboard.
    :vartype id: str
    :ivar display_name: Display name of the dashboard. Required.
    :vartype display_name: str
    :ivar tiles: The tiles displayed by the dashboard.
    :vartype tiles: list[~azureiotcentral.models.Tile]
    :ivar personal: Whether the dashboard is personal and can only be viewed by the current user.
    :vartype personal: bool
    :ivar favorite: Whether the dashboard is favorited or not.
    :vartype favorite: bool
    :ivar etag: Etag to prevent conflict when updating the dashboard.
    :vartype etag: str
    :ivar organizations: The organization the dashboard belongs to. If not present, the dashboard
     is root-level or personal. only one organization is supported today, multiple organizations
     will be supported soon.
    :vartype organizations: list[str]
    """

    _validation = {
        "id": {"readonly": True},
        "display_name": {"required": True, "min_length": 1},
        "tiles": {"max_items": 100, "min_items": 0},
        "personal": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "tiles": {"key": "tiles", "type": "[Tile]"},
        "personal": {"key": "personal", "type": "bool"},
        "favorite": {"key": "favorite", "type": "bool"},
        "etag": {"key": "etag", "type": "str"},
        "organizations": {"key": "organizations", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        tiles: Optional[List["_models.Tile"]] = None,
        favorite: bool = False,
        etag: Optional[str] = None,
        organizations: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword display_name: Display name of the dashboard. Required.
        :paramtype display_name: str
        :keyword tiles: The tiles displayed by the dashboard.
        :paramtype tiles: list[~azureiotcentral.models.Tile]
        :keyword favorite: Whether the dashboard is favorited or not.
        :paramtype favorite: bool
        :keyword etag: Etag to prevent conflict when updating the dashboard.
        :paramtype etag: str
        :keyword organizations: The organization the dashboard belongs to. If not present, the
         dashboard is root-level or personal. only one organization is supported today, multiple
         organizations will be supported soon.
        :paramtype organizations: list[str]
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.tiles = tiles
        self.personal = None
        self.favorite = favorite
        self.etag = etag
        self.organizations = organizations


class DashboardCollection(_serialization.Model):
    """The paged results of dashboards.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of dashboards. Required.
    :vartype value: list[~azureiotcentral.models.Dashboard]
    :ivar next_link: URL to get the next page of dashboards.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Dashboard]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Dashboard"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of dashboards. Required.
        :paramtype value: list[~azureiotcentral.models.Dashboard]
        :keyword next_link: URL to get the next page of dashboards.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DataExplorerTileConfiguration(TileConfiguration):
    """Configuration specifying options for an image tile.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar query_range: The query range configuration of the chart. Required.
    :vartype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
    :ivar query: The id of the Data Explorer query to show in the tile.
    :vartype query: str
    """

    _validation = {
        "type": {"required": True},
        "query_range": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "query_range": {"key": "queryRange", "type": "TimeQueryRangeConfiguration"},
        "query": {"key": "query", "type": "str"},
    }

    def __init__(self, *, query_range: "_models.TimeQueryRangeConfiguration", query: Optional[str] = None, **kwargs):
        """
        :keyword query_range: The query range configuration of the chart. Required.
        :paramtype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
        :keyword query: The id of the Data Explorer query to show in the tile.
        :paramtype query: str
        """
        super().__init__(**kwargs)
        self.type = "dataExplorer"  # type: str
        self.query_range = query_range
        self.query = query


class DataExplorerV1Destination(Destination):
    """The azure data explorer destination definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Indication of the current health and operation of the export or destination.
    :vartype status: str
    :ivar errors: Errors encountered by the export or destination.
    :vartype errors: list[~azureiotcentral.models.DataExportError]
    :ivar last_export_time: The timestamp of the last message that was sent to the export or
     destination.
    :vartype last_export_time: ~datetime.datetime
    :ivar id: Unique ID of the destination.
    :vartype id: str
    :ivar display_name: Display name of the destination. Required.
    :vartype display_name: str
    :ivar type: The type of destination configuration. Required.
    :vartype type: str
    :ivar cluster_url: The resource URI of the Data Explorer instance. Required.
    :vartype cluster_url: str
    :ivar database: Name Data Explorer database where data should be written. Required.
    :vartype database: str
    :ivar table: The table within the Data Explorer database that will receive the data. Required.
    :vartype table: str
    :ivar authorization: The authentication definition for azure data explorer destination.
     Required.
    :vartype authorization: ~azureiotcentral.models.DataExplorerV1DestinationAuth
    """

    _validation = {
        "status": {"readonly": True},
        "errors": {"readonly": True},
        "last_export_time": {"readonly": True},
        "id": {"readonly": True},
        "display_name": {"required": True},
        "type": {"required": True},
        "cluster_url": {"required": True},
        "database": {"required": True},
        "table": {"required": True},
        "authorization": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "errors": {"key": "errors", "type": "[DataExportError]"},
        "last_export_time": {"key": "lastExportTime", "type": "iso-8601"},
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "cluster_url": {"key": "clusterUrl", "type": "str"},
        "database": {"key": "database", "type": "str"},
        "table": {"key": "table", "type": "str"},
        "authorization": {"key": "authorization", "type": "DataExplorerV1DestinationAuth"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        cluster_url: str,
        database: str,
        table: str,
        authorization: "_models.DataExplorerV1DestinationAuth",
        **kwargs
    ):
        """
        :keyword display_name: Display name of the destination. Required.
        :paramtype display_name: str
        :keyword cluster_url: The resource URI of the Data Explorer instance. Required.
        :paramtype cluster_url: str
        :keyword database: Name Data Explorer database where data should be written. Required.
        :paramtype database: str
        :keyword table: The table within the Data Explorer database that will receive the data.
         Required.
        :paramtype table: str
        :keyword authorization: The authentication definition for azure data explorer destination.
         Required.
        :paramtype authorization: ~azureiotcentral.models.DataExplorerV1DestinationAuth
        """
        super().__init__(display_name=display_name, **kwargs)
        self.type = "dataexplorer@v1"  # type: str
        self.cluster_url = cluster_url
        self.database = database
        self.table = table
        self.authorization = authorization


class DataExplorerV1DestinationAuth(_serialization.Model):
    """The authentication definition for azure data explorer destination.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DataExplorerV1DestinationServicePrincipalAuth,
    DataExplorerV1DestinationSystemAssignedManagedIdentityAuth

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "servicePrincipal": "DataExplorerV1DestinationServicePrincipalAuth",
            "systemAssignedManagedIdentity": "DataExplorerV1DestinationSystemAssignedManagedIdentityAuth",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class DataExplorerV1DestinationServicePrincipalAuth(DataExplorerV1DestinationAuth):
    """The authentication definition with service principal for azure data explorer destination.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    :ivar client_id: Service Principal client ID. Required.
    :vartype client_id: str
    :ivar tenant_id: Service Principal tenant ID. Required.
    :vartype tenant_id: str
    :ivar client_secret: Service Principal client secret. Required.
    :vartype client_secret: str
    """

    _validation = {
        "type": {"required": True},
        "client_id": {"required": True},
        "tenant_id": {"required": True},
        "client_secret": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "client_secret": {"key": "clientSecret", "type": "str"},
    }

    def __init__(self, *, client_id: str, tenant_id: str, client_secret: str, **kwargs):
        """
        :keyword client_id: Service Principal client ID. Required.
        :paramtype client_id: str
        :keyword tenant_id: Service Principal tenant ID. Required.
        :paramtype tenant_id: str
        :keyword client_secret: Service Principal client secret. Required.
        :paramtype client_secret: str
        """
        super().__init__(**kwargs)
        self.type = "servicePrincipal"  # type: str
        self.client_id = client_id
        self.tenant_id = tenant_id
        self.client_secret = client_secret


class DataExplorerV1DestinationSystemAssignedManagedIdentityAuth(DataExplorerV1DestinationAuth):
    """The authentication definition with system assigned managed identity for azure data explorer destination.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = "systemAssignedManagedIdentity"  # type: str


class DataExportError(_serialization.Model):
    """The data export error definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The code for the error that occurred.
    :vartype code: str
    :ivar message: The description of the error that occurred.
    :vartype message: str
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None


class JobScheduleEnd(_serialization.Model):
    """The end definition of job schedule.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DateJobScheduleEnd, OccurrencesJobScheduleEnd

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the job schedule end. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {"type": {"date": "DateJobScheduleEnd", "occurrences": "OccurrencesJobScheduleEnd"}}

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class DateJobScheduleEnd(JobScheduleEnd):
    """The date based end definition of job schedule.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the job schedule end. Required.
    :vartype type: str
    :ivar date: The date when to end the scheduled job. Required.
    :vartype date: ~datetime.date
    """

    _validation = {
        "type": {"required": True},
        "date": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "date": {"key": "date", "type": "date"},
    }

    def __init__(self, *, date: datetime.date, **kwargs):
        """
        :keyword date: The date when to end the scheduled job. Required.
        :paramtype date: ~datetime.date
        """
        super().__init__(**kwargs)
        self.type = "date"  # type: str
        self.date = date


class DestinationCollection(_serialization.Model):
    """The paged results of destinations.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of destinations. Required.
    :vartype value: list[~azureiotcentral.models.Destination]
    :ivar next_link: URL to get the next page of destinations.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Destination]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Destination"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of destinations. Required.
        :paramtype value: list[~azureiotcentral.models.Destination]
        :keyword next_link: URL to get the next page of destinations.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Export(DataExportStatus):
    """The data export definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Indication of the current health and operation of the export or destination.
    :vartype status: str
    :ivar errors: Errors encountered by the export or destination.
    :vartype errors: list[~azureiotcentral.models.DataExportError]
    :ivar last_export_time: The timestamp of the last message that was sent to the export or
     destination.
    :vartype last_export_time: ~datetime.datetime
    :ivar id: Unique ID of the export.
    :vartype id: str
    :ivar display_name: Display name of the export. Required.
    :vartype display_name: str
    :ivar enabled: Toggle to start/stop an export from sending data. Required.
    :vartype enabled: bool
    :ivar source: The type of data to export. Required. Known values are: "telemetry",
     "properties", "deviceLifecycle", "deviceTemplateLifecycle", and "deviceConnectivity".
    :vartype source: str or ~azureiotcentral.models.DestinationSource
    :ivar filter: Query defining which events from the source should be exported.
    :vartype filter: str
    :ivar enrichments: Additional pieces of information to include with each sent message. Data is
     represented as a set of key/value pairs, where the key is the name of the enrichment that will
     appear in the output message and the value identifies the data to send.
    :vartype enrichments: dict[str, ~azureiotcentral.models.Enrichment]
    :ivar destinations: The list of destinations to which the export should send data. Required.
    :vartype destinations: list[~azureiotcentral.models.DestinationReference]
    """

    _validation = {
        "status": {"readonly": True},
        "errors": {"readonly": True},
        "last_export_time": {"readonly": True},
        "id": {"readonly": True},
        "display_name": {"required": True},
        "enabled": {"required": True},
        "source": {"required": True},
        "destinations": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "errors": {"key": "errors", "type": "[DataExportError]"},
        "last_export_time": {"key": "lastExportTime", "type": "iso-8601"},
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "source": {"key": "source", "type": "str"},
        "filter": {"key": "filter", "type": "str"},
        "enrichments": {"key": "enrichments", "type": "{Enrichment}"},
        "destinations": {"key": "destinations", "type": "[DestinationReference]"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        enabled: bool,
        source: Union[str, "_models.DestinationSource"],
        destinations: List["_models.DestinationReference"],
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        enrichments: Optional[Dict[str, "_models.Enrichment"]] = None,
        **kwargs
    ):
        """
        :keyword display_name: Display name of the export. Required.
        :paramtype display_name: str
        :keyword enabled: Toggle to start/stop an export from sending data. Required.
        :paramtype enabled: bool
        :keyword source: The type of data to export. Required. Known values are: "telemetry",
         "properties", "deviceLifecycle", "deviceTemplateLifecycle", and "deviceConnectivity".
        :paramtype source: str or ~azureiotcentral.models.DestinationSource
        :keyword filter: Query defining which events from the source should be exported.
        :paramtype filter: str
        :keyword enrichments: Additional pieces of information to include with each sent message. Data
         is represented as a set of key/value pairs, where the key is the name of the enrichment that
         will appear in the output message and the value identifies the data to send.
        :paramtype enrichments: dict[str, ~azureiotcentral.models.Enrichment]
        :keyword destinations: The list of destinations to which the export should send data. Required.
        :paramtype destinations: list[~azureiotcentral.models.DestinationReference]
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.enabled = enabled
        self.source = source
        self.filter = filter
        self.enrichments = enrichments
        self.destinations = destinations


class DestinationExport(Export):  # pylint: disable=too-many-instance-attributes
    """The destination export definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Indication of the current health and operation of the export or destination.
    :vartype status: str
    :ivar errors: Errors encountered by the export or destination.
    :vartype errors: list[~azureiotcentral.models.DataExportError]
    :ivar last_export_time: The timestamp of the last message that was sent to the export or
     destination.
    :vartype last_export_time: ~datetime.datetime
    :ivar id: Unique ID of the export.
    :vartype id: str
    :ivar display_name: Display name of the export. Required.
    :vartype display_name: str
    :ivar enabled: Toggle to start/stop an export from sending data. Required.
    :vartype enabled: bool
    :ivar source: The type of data to export. Required. Known values are: "telemetry",
     "properties", "deviceLifecycle", "deviceTemplateLifecycle", and "deviceConnectivity".
    :vartype source: str or ~azureiotcentral.models.DestinationSource
    :ivar filter: Query defining which events from the source should be exported.
    :vartype filter: str
    :ivar enrichments: Additional pieces of information to include with each sent message. Data is
     represented as a set of key/value pairs, where the key is the name of the enrichment that will
     appear in the output message and the value identifies the data to send.
    :vartype enrichments: dict[str, ~azureiotcentral.models.Enrichment]
    :ivar destinations: The list of destinations to which the export should send data. Required.
    :vartype destinations: list[~azureiotcentral.models.DestinationReference]
    :ivar transform: Query for transforming the message structure to a particular output.
    :vartype transform: str
    """

    _validation = {
        "status": {"readonly": True},
        "errors": {"readonly": True},
        "last_export_time": {"readonly": True},
        "id": {"readonly": True},
        "display_name": {"required": True},
        "enabled": {"required": True},
        "source": {"required": True},
        "destinations": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "errors": {"key": "errors", "type": "[DataExportError]"},
        "last_export_time": {"key": "lastExportTime", "type": "iso-8601"},
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "source": {"key": "source", "type": "str"},
        "filter": {"key": "filter", "type": "str"},
        "enrichments": {"key": "enrichments", "type": "{Enrichment}"},
        "destinations": {"key": "destinations", "type": "[DestinationReference]"},
        "transform": {"key": "transform", "type": "str"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        enabled: bool,
        source: Union[str, "_models.DestinationSource"],
        destinations: List["_models.DestinationReference"],
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        enrichments: Optional[Dict[str, "_models.Enrichment"]] = None,
        transform: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name: Display name of the export. Required.
        :paramtype display_name: str
        :keyword enabled: Toggle to start/stop an export from sending data. Required.
        :paramtype enabled: bool
        :keyword source: The type of data to export. Required. Known values are: "telemetry",
         "properties", "deviceLifecycle", "deviceTemplateLifecycle", and "deviceConnectivity".
        :paramtype source: str or ~azureiotcentral.models.DestinationSource
        :keyword filter: Query defining which events from the source should be exported.
        :paramtype filter: str
        :keyword enrichments: Additional pieces of information to include with each sent message. Data
         is represented as a set of key/value pairs, where the key is the name of the enrichment that
         will appear in the output message and the value identifies the data to send.
        :paramtype enrichments: dict[str, ~azureiotcentral.models.Enrichment]
        :keyword destinations: The list of destinations to which the export should send data. Required.
        :paramtype destinations: list[~azureiotcentral.models.DestinationReference]
        :keyword transform: Query for transforming the message structure to a particular output.
        :paramtype transform: str
        """
        super().__init__(
            display_name=display_name,
            enabled=enabled,
            source=source,
            filter=filter,
            enrichments=enrichments,
            destinations=destinations,
            **kwargs
        )
        self.transform = transform


class DestinationReference(_serialization.Model):
    """The destination reference definition.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The ID of the destination where data should be sent. Required.
    :vartype id: str
    :ivar transform: Query for transforming the message structure to a particular output.
    :vartype transform: str
    """

    _validation = {
        "id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "transform": {"key": "transform", "type": "str"},
    }

    def __init__(self, *, id: str, transform: Optional[str] = None, **kwargs):  # pylint: disable=redefined-builtin
        """
        :keyword id: The ID of the destination where data should be sent. Required.
        :paramtype id: str
        :keyword transform: Query for transforming the message structure to a particular output.
        :paramtype transform: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.transform = transform


class Device(_serialization.Model):
    """The device definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique ID of the device.
    :vartype id: str
    :ivar etag: ETag used to prevent conflict in device updates.
    :vartype etag: str
    :ivar display_name: Display name of the device.
    :vartype display_name: str
    :ivar template: The device template definition for the device.
    :vartype template: str
    :ivar enabled: Whether the device connection to IoT Central has been enabled.
    :vartype enabled: bool
    :ivar provisioned: Whether resources have been allocated for the device.
    :vartype provisioned: bool
    :ivar simulated: Whether the device is simulated.
    :vartype simulated: bool
    :ivar organizations: List of organization IDs that the device is a part of, only one
     organization is supported today, multiple organizations will be supported soon.
    :vartype organizations: list[str]
    """

    _validation = {
        "id": {"readonly": True},
        "provisioned": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "etag": {"key": "etag", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "template": {"key": "template", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "provisioned": {"key": "provisioned", "type": "bool"},
        "simulated": {"key": "simulated", "type": "bool"},
        "organizations": {"key": "organizations", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        etag: Optional[str] = None,
        display_name: Optional[str] = None,
        template: Optional[str] = None,
        enabled: Optional[bool] = None,
        simulated: Optional[bool] = None,
        organizations: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword etag: ETag used to prevent conflict in device updates.
        :paramtype etag: str
        :keyword display_name: Display name of the device.
        :paramtype display_name: str
        :keyword template: The device template definition for the device.
        :paramtype template: str
        :keyword enabled: Whether the device connection to IoT Central has been enabled.
        :paramtype enabled: bool
        :keyword simulated: Whether the device is simulated.
        :paramtype simulated: bool
        :keyword organizations: List of organization IDs that the device is a part of, only one
         organization is supported today, multiple organizations will be supported soon.
        :paramtype organizations: list[str]
        """
        super().__init__(**kwargs)
        self.id = None
        self.etag = etag
        self.display_name = display_name
        self.template = template
        self.enabled = enabled
        self.provisioned = None
        self.simulated = simulated
        self.organizations = organizations


class DeviceCollection(_serialization.Model):
    """The paged results of devices.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of devices. Required.
    :vartype value: list[~azureiotcentral.models.Device]
    :ivar next_link: URL to get the next page of devices.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Device]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Device"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of devices. Required.
        :paramtype value: list[~azureiotcentral.models.Device]
        :keyword next_link: URL to get the next page of devices.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceCommand(_serialization.Model):
    """The device command definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The request ID of the device command execution.
    :vartype id: str
    :ivar connection_timeout: Connection timeout in seconds to wait for a disconnected device to
     come online. Defaults to 0 seconds.
    :vartype connection_timeout: int
    :ivar response_timeout: Response timeout in seconds to wait for a command completion on a
     device. Defaults to 30 seconds.
    :vartype response_timeout: int
    :ivar request: The payload for the device command, support any primitive types or object.
    :vartype request: any
    :ivar response: The payload of the device command response, support any primitive types or
     object.
    :vartype response: any
    :ivar response_code: The status code of the device command response.
    :vartype response_code: int
    """

    _validation = {
        "id": {"readonly": True},
        "connection_timeout": {"maximum": 30, "minimum": 0},
        "response_timeout": {"maximum": 30, "minimum": 5},
        "response": {"readonly": True},
        "response_code": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "connection_timeout": {"key": "connectionTimeout", "type": "int"},
        "response_timeout": {"key": "responseTimeout", "type": "int"},
        "request": {"key": "request", "type": "object"},
        "response": {"key": "response", "type": "object"},
        "response_code": {"key": "responseCode", "type": "int"},
    }

    def __init__(
        self,
        *,
        connection_timeout: Optional[int] = None,
        response_timeout: Optional[int] = None,
        request: Optional[Any] = None,
        **kwargs
    ):
        """
        :keyword connection_timeout: Connection timeout in seconds to wait for a disconnected device to
         come online. Defaults to 0 seconds.
        :paramtype connection_timeout: int
        :keyword response_timeout: Response timeout in seconds to wait for a command completion on a
         device. Defaults to 30 seconds.
        :paramtype response_timeout: int
        :keyword request: The payload for the device command, support any primitive types or object.
        :paramtype request: any
        """
        super().__init__(**kwargs)
        self.id = None
        self.connection_timeout = connection_timeout
        self.response_timeout = response_timeout
        self.request = request
        self.response = None
        self.response_code = None


class DeviceCommandCollection(_serialization.Model):
    """The paged results of device command executions.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of device command executions. Required.
    :vartype value: list[~azureiotcentral.models.DeviceCommand]
    :ivar next_link: URL to get the next page of device command executions.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DeviceCommand]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.DeviceCommand"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of device command executions. Required.
        :paramtype value: list[~azureiotcentral.models.DeviceCommand]
        :keyword next_link: URL to get the next page of device command executions.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceCountTileConfiguration(TileConfiguration):
    """Configuration specifying options for a device count tile.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar group: The ID of the device group to display.
    :vartype group: str
    :ivar format: The format configuration of the lkv tile.
    :vartype format: ~azureiotcentral.models.TextFormatConfiguration
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "group": {"key": "group", "type": "str"},
        "format": {"key": "format", "type": "TextFormatConfiguration"},
    }

    def __init__(
        self, *, group: Optional[str] = None, format: Optional["_models.TextFormatConfiguration"] = None, **kwargs
    ):
        """
        :keyword group: The ID of the device group to display.
        :paramtype group: str
        :keyword format: The format configuration of the lkv tile.
        :paramtype format: ~azureiotcentral.models.TextFormatConfiguration
        """
        super().__init__(**kwargs)
        self.type = "deviceCount"  # type: str
        self.group = group
        self.format = format


class DeviceCredentials(_serialization.Model):
    """The device credentials definition.

    All required parameters must be populated in order to send to Azure.

    :ivar id_scope: ID scope for connecting to the IoT Central application. Required.
    :vartype id_scope: str
    :ivar symmetric_key: The symmetric key credentials for the device.
    :vartype symmetric_key: ~azureiotcentral.models.SymmetricKey
    :ivar x509: The X.509 credential information for the device.
    :vartype x509: ~azureiotcentral.models.X509
    :ivar tpm: The TPM credentials for the device.
    :vartype tpm: ~azureiotcentral.models.Tpm
    """

    _validation = {
        "id_scope": {"required": True},
    }

    _attribute_map = {
        "id_scope": {"key": "idScope", "type": "str"},
        "symmetric_key": {"key": "symmetricKey", "type": "SymmetricKey"},
        "x509": {"key": "x509", "type": "X509"},
        "tpm": {"key": "tpm", "type": "Tpm"},
    }

    def __init__(
        self,
        *,
        id_scope: str,
        symmetric_key: Optional["_models.SymmetricKey"] = None,
        x509: Optional["_models.X509"] = None,
        tpm: Optional["_models.Tpm"] = None,
        **kwargs
    ):
        """
        :keyword id_scope: ID scope for connecting to the IoT Central application. Required.
        :paramtype id_scope: str
        :keyword symmetric_key: The symmetric key credentials for the device.
        :paramtype symmetric_key: ~azureiotcentral.models.SymmetricKey
        :keyword x509: The X.509 credential information for the device.
        :paramtype x509: ~azureiotcentral.models.X509
        :keyword tpm: The TPM credentials for the device.
        :paramtype tpm: ~azureiotcentral.models.Tpm
        """
        super().__init__(**kwargs)
        self.id_scope = id_scope
        self.symmetric_key = symmetric_key
        self.x509 = x509
        self.tpm = tpm


class DeviceGroup(_serialization.Model):
    """The device group definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique ID of the device group.
    :vartype id: str
    :ivar display_name: Display name of the device group. Required.
    :vartype display_name: str
    :ivar filter: Query defining which devices should be in this group, `Query Language Reference
     <https://aka.ms/iotcquery>`_. Required.
    :vartype filter: str
    :ivar description: Short summary of device group.
    :vartype description: str
    :ivar etag: ETag used to prevent conflict in device group updates.
    :vartype etag: str
    :ivar organizations: List of organization IDs of the device group, only one organization is
     supported today, multiple organizations will be supported soon.
    :vartype organizations: list[str]
    """

    _validation = {
        "id": {"readonly": True},
        "display_name": {"required": True},
        "filter": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "filter": {"key": "filter", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "etag": {"key": "etag", "type": "str"},
        "organizations": {"key": "organizations", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        filter: str,  # pylint: disable=redefined-builtin
        description: Optional[str] = None,
        etag: Optional[str] = None,
        organizations: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword display_name: Display name of the device group. Required.
        :paramtype display_name: str
        :keyword filter: Query defining which devices should be in this group, `Query Language
         Reference <https://aka.ms/iotcquery>`_. Required.
        :paramtype filter: str
        :keyword description: Short summary of device group.
        :paramtype description: str
        :keyword etag: ETag used to prevent conflict in device group updates.
        :paramtype etag: str
        :keyword organizations: List of organization IDs of the device group, only one organization is
         supported today, multiple organizations will be supported soon.
        :paramtype organizations: list[str]
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.filter = filter
        self.description = description
        self.etag = etag
        self.organizations = organizations


class DeviceGroupCollection(_serialization.Model):
    """The paged results of device groups.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of device groups. Required.
    :vartype value: list[~azureiotcentral.models.DeviceGroup]
    :ivar next_link: URL to get the next page of device groups.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DeviceGroup]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.DeviceGroup"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of device groups. Required.
        :paramtype value: list[~azureiotcentral.models.DeviceGroup]
        :keyword next_link: URL to get the next page of device groups.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceGroupDeviceCollection(_serialization.Model):
    """The paged results of devices belonging to the device group.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of devices belonging to the device group. Required.
    :vartype value: list[~azureiotcentral.models.Device]
    :ivar next_link: URL to get the next page of devices in the group.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Device]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Device"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of devices belonging to the device group. Required.
        :paramtype value: list[~azureiotcentral.models.Device]
        :keyword next_link: URL to get the next page of devices in the group.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceRelationship(_serialization.Model):
    """An object representing the relationship between an upstream and a downstream device.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The unique identifier of this relationship.
    :vartype id: str
    :ivar source: The device ID of the source (parent) device.
    :vartype source: str
    :ivar target: The device ID of the target (child) device.
    :vartype target: str
    """

    _validation = {
        "id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "source": {"key": "source", "type": "str"},
        "target": {"key": "target", "type": "str"},
    }

    def __init__(self, *, source: Optional[str] = None, target: Optional[str] = None, **kwargs):
        """
        :keyword source: The device ID of the source (parent) device.
        :paramtype source: str
        :keyword target: The device ID of the target (child) device.
        :paramtype target: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.source = source
        self.target = target


class DeviceRelationshipCollection(_serialization.Model):
    """The paged results of device relationships.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of device relationships. Required.
    :vartype value: list[~azureiotcentral.models.DeviceRelationship]
    :ivar next_link: URL to get the next page of device relationships.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DeviceRelationship]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.DeviceRelationship"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of device relationships. Required.
        :paramtype value: list[~azureiotcentral.models.DeviceRelationship]
        :keyword next_link: URL to get the next page of device relationships.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceTelemetry(_serialization.Model):
    """The device telemetry definition.

    :ivar value: The last known value of this device telemetry.
    :vartype value: any
    :ivar timestamp: String-formatted date representing the time when the telemetry value was sent.
    :vartype timestamp: ~datetime.datetime
    """

    _attribute_map = {
        "value": {"key": "value", "type": "object"},
        "timestamp": {"key": "timestamp", "type": "iso-8601"},
    }

    def __init__(self, *, value: Optional[Any] = None, timestamp: Optional[datetime.datetime] = None, **kwargs):
        """
        :keyword value: The last known value of this device telemetry.
        :paramtype value: any
        :keyword timestamp: String-formatted date representing the time when the telemetry value was
         sent.
        :paramtype timestamp: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.value = value
        self.timestamp = timestamp


class DeviceTemplate(_serialization.Model):
    """The device template definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique ID of the device template.
    :vartype id: str
    :ivar type: The JSON-LD types of this device template. Required.
    :vartype type: list[str]
    :ivar etag: ETag used to prevent conflict in device template updates.
    :vartype etag: str
    :ivar display_name: Display name of the device template.
    :vartype display_name: str
    :ivar description: Detailed description of the device template.
    :vartype description: str
    :ivar capability_model: The capability model utilized by this device template. Required.
    :vartype capability_model: JSON
    :ivar deployment_manifest: Deployment manifest associated to this device template.
    :vartype deployment_manifest: JSON
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "capability_model": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "@id", "type": "str"},
        "type": {"key": "@type", "type": "[str]"},
        "etag": {"key": "etag", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "capability_model": {"key": "capabilityModel", "type": "object"},
        "deployment_manifest": {"key": "deploymentManifest", "type": "object"},
    }

    def __init__(
        self,
        *,
        type: List[str],
        capability_model: JSON,
        etag: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        deployment_manifest: Optional[JSON] = None,
        **kwargs
    ):
        """
        :keyword type: The JSON-LD types of this device template. Required.
        :paramtype type: list[str]
        :keyword etag: ETag used to prevent conflict in device template updates.
        :paramtype etag: str
        :keyword display_name: Display name of the device template.
        :paramtype display_name: str
        :keyword description: Detailed description of the device template.
        :paramtype description: str
        :keyword capability_model: The capability model utilized by this device template. Required.
        :paramtype capability_model: JSON
        :keyword deployment_manifest: Deployment manifest associated to this device template.
        :paramtype deployment_manifest: JSON
        """
        super().__init__(**kwargs)
        self.id = None
        self.type = type
        self.etag = etag
        self.display_name = display_name
        self.description = description
        self.capability_model = capability_model
        self.deployment_manifest = deployment_manifest


class DeviceTemplateCollection(_serialization.Model):
    """The paged results of device templates.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of device templates. Required.
    :vartype value: list[~azureiotcentral.models.DeviceTemplate]
    :ivar next_link: URL to get the next page of device templates.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DeviceTemplate]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.DeviceTemplate"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of device templates. Required.
        :paramtype value: list[~azureiotcentral.models.DeviceTemplate]
        :keyword next_link: URL to get the next page of device templates.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceTemplateMigrationJobData(JobData):
    """The device template migration job data definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the job data. Required.
    :vartype type: str
    :ivar template: The target device template to which devices will be migrated. Required.
    :vartype template: str
    """

    _validation = {
        "type": {"required": True},
        "template": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "template": {"key": "template", "type": "str"},
    }

    def __init__(self, *, template: str, **kwargs):
        """
        :keyword template: The target device template to which devices will be migrated. Required.
        :paramtype template: str
        """
        super().__init__(**kwargs)
        self.type = "deviceTemplateMigration"  # type: str
        self.template = template


class EmailUser(User):
    """The email user definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    :ivar id: Unique ID of the user.
    :vartype id: str
    :ivar type: Type of the user. Required.
    :vartype type: str
    :ivar email: Email address of the user. Required.
    :vartype email: str
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
        "id": {"readonly": True},
        "type": {"required": True},
        "email": {"required": True},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "email": {"key": "email", "type": "str"},
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], email: str, **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        :keyword email: Email address of the user. Required.
        :paramtype email: str
        """
        super().__init__(roles=roles, **kwargs)
        self.type = "email"  # type: str
        self.email = email


class Enrichment(_serialization.Model):
    """The enrichment definition for data export.

    :ivar target: The device template or interface which defines the target capability for the
     enrichment.
    :vartype target: str
    :ivar path: The path to the target capability within the device template or the system property
     to use.
    :vartype path: str
    :ivar value: The raw value used for the enrichment.
    :vartype value: any
    """

    _attribute_map = {
        "target": {"key": "target", "type": "str"},
        "path": {"key": "path", "type": "str"},
        "value": {"key": "value", "type": "object"},
    }

    def __init__(
        self, *, target: Optional[str] = None, path: Optional[str] = None, value: Optional[Any] = None, **kwargs
    ):
        """
        :keyword target: The device template or interface which defines the target capability for the
         enrichment.
        :paramtype target: str
        :keyword path: The path to the target capability within the device template or the system
         property to use.
        :paramtype path: str
        :keyword value: The raw value used for the enrichment.
        :paramtype value: any
        """
        super().__init__(**kwargs)
        self.target = target
        self.path = path
        self.value = value


class EnrollmentGroup(_serialization.Model):
    """The enrollment group definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique ID of the enrollment group.
    :vartype id: str
    :ivar display_name: Display name of the enrollment group. Required.
    :vartype display_name: str
    :ivar enabled: Whether the devices using the group are allowed to connect to IoT Central.
    :vartype enabled: bool
    :ivar type: Type of devices that connect through the group. Required. Known values are: "iot"
     and "iotEdge".
    :vartype type: str or ~azureiotcentral.models.EnrollmentGroupType
    :ivar attestation: The attestation mechanism for the enrollment group. Required.
    :vartype attestation: ~azureiotcentral.models.GroupAttestation
    :ivar etag: ETag used to prevent conflict in enrollment group updates.
    :vartype etag: str
    """

    _validation = {
        "id": {"readonly": True},
        "display_name": {"required": True},
        "type": {"required": True},
        "attestation": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "type": {"key": "type", "type": "str"},
        "attestation": {"key": "attestation", "type": "GroupAttestation"},
        "etag": {"key": "etag", "type": "str"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        type: Union[str, "_models.EnrollmentGroupType"],
        attestation: "_models.GroupAttestation",
        enabled: bool = True,
        etag: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name: Display name of the enrollment group. Required.
        :paramtype display_name: str
        :keyword enabled: Whether the devices using the group are allowed to connect to IoT Central.
        :paramtype enabled: bool
        :keyword type: Type of devices that connect through the group. Required. Known values are:
         "iot" and "iotEdge".
        :paramtype type: str or ~azureiotcentral.models.EnrollmentGroupType
        :keyword attestation: The attestation mechanism for the enrollment group. Required.
        :paramtype attestation: ~azureiotcentral.models.GroupAttestation
        :keyword etag: ETag used to prevent conflict in enrollment group updates.
        :paramtype etag: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.enabled = enabled
        self.type = type
        self.attestation = attestation
        self.etag = etag


class EnrollmentGroupCollection(_serialization.Model):
    """The paged results of enrollment groups.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of enrollment groups. Required.
    :vartype value: list[~azureiotcentral.models.EnrollmentGroup]
    :ivar next_link: URL to get the next page of enrollment groups.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[EnrollmentGroup]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.EnrollmentGroup"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of enrollment groups. Required.
        :paramtype value: list[~azureiotcentral.models.EnrollmentGroup]
        :keyword next_link: URL to get the next page of enrollment groups.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Error(_serialization.Model):
    """The response error definition.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Error details for current request. Required.
    :vartype error: ~azureiotcentral.models.ErrorDetails
    """

    _validation = {
        "error": {"required": True},
    }

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetails"},
    }

    def __init__(self, *, error: "_models.ErrorDetails", **kwargs):
        """
        :keyword error: Error details for current request. Required.
        :paramtype error: ~azureiotcentral.models.ErrorDetails
        """
        super().__init__(**kwargs)
        self.error = error


class ErrorDetails(_serialization.Model):
    """The detail information of the error.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Error code. Required.
    :vartype code: str
    :ivar message: Error message details. Required.
    :vartype message: str
    :ivar request_id: Correlation Id for current request.
    :vartype request_id: str
    :ivar time: The time that error request failed.
    :vartype time: ~datetime.datetime
    """

    _validation = {
        "code": {"required": True},
        "message": {"required": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "request_id": {"key": "requestId", "type": "str"},
        "time": {"key": "time", "type": "rfc-1123"},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        request_id: Optional[str] = None,
        time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword code: Error code. Required.
        :paramtype code: str
        :keyword message: Error message details. Required.
        :paramtype message: str
        :keyword request_id: Correlation Id for current request.
        :paramtype request_id: str
        :keyword time: The time that error request failed.
        :paramtype time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message
        self.request_id = request_id
        self.time = time


class EventChartConfiguration(TileConfiguration, GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for a event chart tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar query_range: The query range configuration of the event chart. Required.
    :vartype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "type": {"required": True},
        "query_range": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "query_range": {"key": "queryRange", "type": "TimeQueryRangeConfiguration"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        query_range: "_models.TimeQueryRangeConfiguration",
        capabilities: Optional[List["_models.TileCapability"]] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword query_range: The query range configuration of the event chart. Required.
        :paramtype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.type = "eventChart"  # type: str
        self.query_range = query_range


class EventHistoryChartConfiguration(TileConfiguration, GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for a event history chart tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar query_range: The query range configuration of the event chart. Required.
    :vartype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
    :ivar format: The format configuration of the event history chart.
    :vartype format: ~azureiotcentral.models.TextFormatConfiguration
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "type": {"required": True},
        "query_range": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "query_range": {"key": "queryRange", "type": "TimeQueryRangeConfiguration"},
        "format": {"key": "format", "type": "TextFormatConfiguration"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        query_range: "_models.TimeQueryRangeConfiguration",
        capabilities: Optional[List["_models.TileCapability"]] = None,
        format: Optional["_models.TextFormatConfiguration"] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword query_range: The query range configuration of the event chart. Required.
        :paramtype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
        :keyword format: The format configuration of the event history chart.
        :paramtype format: ~azureiotcentral.models.TextFormatConfiguration
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.type = "eventHistoryChart"  # type: str
        self.query_range = query_range
        self.format = format


class EventHubsV1Destination(Destination):
    """the event hub destination definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Indication of the current health and operation of the export or destination.
    :vartype status: str
    :ivar errors: Errors encountered by the export or destination.
    :vartype errors: list[~azureiotcentral.models.DataExportError]
    :ivar last_export_time: The timestamp of the last message that was sent to the export or
     destination.
    :vartype last_export_time: ~datetime.datetime
    :ivar id: Unique ID of the destination.
    :vartype id: str
    :ivar display_name: Display name of the destination. Required.
    :vartype display_name: str
    :ivar type: The type of destination configuration. Required.
    :vartype type: str
    :ivar authorization: The authentication definition for event hub destination. Required.
    :vartype authorization: ~azureiotcentral.models.EventHubsV1DestinationAuth
    """

    _validation = {
        "status": {"readonly": True},
        "errors": {"readonly": True},
        "last_export_time": {"readonly": True},
        "id": {"readonly": True},
        "display_name": {"required": True},
        "type": {"required": True},
        "authorization": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "errors": {"key": "errors", "type": "[DataExportError]"},
        "last_export_time": {"key": "lastExportTime", "type": "iso-8601"},
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "authorization": {"key": "authorization", "type": "EventHubsV1DestinationAuth"},
    }

    def __init__(self, *, display_name: str, authorization: "_models.EventHubsV1DestinationAuth", **kwargs):
        """
        :keyword display_name: Display name of the destination. Required.
        :paramtype display_name: str
        :keyword authorization: The authentication definition for event hub destination. Required.
        :paramtype authorization: ~azureiotcentral.models.EventHubsV1DestinationAuth
        """
        super().__init__(display_name=display_name, **kwargs)
        self.type = "eventhubs@v1"  # type: str
        self.authorization = authorization


class EventHubsV1DestinationAuth(_serialization.Model):
    """The authentication definition for event hub destination.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    EventHubsV1DestinationConnectionStringAuth,
    EventHubsV1DestinationSystemAssignedManagedIdentityAuth

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "connectionString": "EventHubsV1DestinationConnectionStringAuth",
            "systemAssignedManagedIdentity": "EventHubsV1DestinationSystemAssignedManagedIdentityAuth",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class EventHubsV1DestinationConnectionStringAuth(EventHubsV1DestinationAuth):
    """The authentication definition with connection string for event hub destination.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    :ivar connection_string: The connection string for accessing the Event Hubs namespace,
     including the ``EntityPath`` of the event hub. Required.
    :vartype connection_string: str
    """

    _validation = {
        "type": {"required": True},
        "connection_string": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "connection_string": {"key": "connectionString", "type": "str"},
    }

    def __init__(self, *, connection_string: str, **kwargs):
        """
        :keyword connection_string: The connection string for accessing the Event Hubs namespace,
         including the ``EntityPath`` of the event hub. Required.
        :paramtype connection_string: str
        """
        super().__init__(**kwargs)
        self.type = "connectionString"  # type: str
        self.connection_string = connection_string


class EventHubsV1DestinationSystemAssignedManagedIdentityAuth(EventHubsV1DestinationAuth):
    """The authentication definition with system assigned managed identity for event hub destination.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    :ivar host_name: The host name of the Event Hubs namespace. Required.
    :vartype host_name: str
    :ivar event_hub_name: The Event Hubs instance name. Required.
    :vartype event_hub_name: str
    """

    _validation = {
        "type": {"required": True},
        "host_name": {"required": True},
        "event_hub_name": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "host_name": {"key": "hostName", "type": "str"},
        "event_hub_name": {"key": "eventHubName", "type": "str"},
    }

    def __init__(self, *, host_name: str, event_hub_name: str, **kwargs):
        """
        :keyword host_name: The host name of the Event Hubs namespace. Required.
        :paramtype host_name: str
        :keyword event_hub_name: The Event Hubs instance name. Required.
        :paramtype event_hub_name: str
        """
        super().__init__(**kwargs)
        self.type = "systemAssignedManagedIdentity"  # type: str
        self.host_name = host_name
        self.event_hub_name = event_hub_name


class ExportCollection(_serialization.Model):
    """The paged results of exports.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of exports. Required.
    :vartype value: list[~azureiotcentral.models.Export]
    :ivar next_link: URL to get the next page of exports.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Export]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Export"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of exports. Required.
        :paramtype value: list[~azureiotcentral.models.Export]
        :keyword next_link: URL to get the next page of exports.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ExportDestination(Destination):
    """The export destination definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Indication of the current health and operation of the export or destination.
    :vartype status: str
    :ivar errors: Errors encountered by the export or destination.
    :vartype errors: list[~azureiotcentral.models.DataExportError]
    :ivar last_export_time: The timestamp of the last message that was sent to the export or
     destination.
    :vartype last_export_time: ~datetime.datetime
    :ivar id: Unique ID of the destination.
    :vartype id: str
    :ivar display_name: Display name of the destination. Required.
    :vartype display_name: str
    :ivar type: The type of destination configuration. Required.
    :vartype type: str
    :ivar transform: Query for transforming the message structure to a particular output.
    :vartype transform: str
    """

    _validation = {
        "status": {"readonly": True},
        "errors": {"readonly": True},
        "last_export_time": {"readonly": True},
        "id": {"readonly": True},
        "display_name": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "errors": {"key": "errors", "type": "[DataExportError]"},
        "last_export_time": {"key": "lastExportTime", "type": "iso-8601"},
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "transform": {"key": "transform", "type": "str"},
    }

    def __init__(self, *, display_name: str, transform: Optional[str] = None, **kwargs):
        """
        :keyword display_name: Display name of the destination. Required.
        :paramtype display_name: str
        :keyword transform: Query for transforming the message structure to a particular output.
        :paramtype transform: str
        """
        super().__init__(display_name=display_name, **kwargs)
        self.type = "ExportDestination"  # type: str
        self.transform = transform


class ExternalContentTileConfiguration(TileConfiguration):
    """Configuration specifying options for an external content tile.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar source_url: URL of the website to render inside the tile. Must be a valid HTTPS URL.
     Required.
    :vartype source_url: str
    """

    _validation = {
        "type": {"required": True},
        "source_url": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "source_url": {"key": "sourceUrl", "type": "str"},
    }

    def __init__(self, *, source_url: str, **kwargs):
        """
        :keyword source_url: URL of the website to render inside the tile. Must be a valid HTTPS URL.
         Required.
        :paramtype source_url: str
        """
        super().__init__(**kwargs)
        self.type = "externalContent"  # type: str
        self.source_url = source_url


class FileUpload(_serialization.Model):
    """The file upload configuration definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar account: The storage account name where to upload the file to.
    :vartype account: str
    :ivar connection_string: The connection string used to configure the storage account. Required.
    :vartype connection_string: str
    :ivar container: The name of the container inside the storage account. Required.
    :vartype container: str
    :ivar sas_ttl: ISO 8601 duration standard, The amount of time the device’s request to upload a
     file is valid before it expires.
    :vartype sas_ttl: str
    :ivar state: The state of the file upload configuration. Known values are: "pending",
     "updating", "deleting", "succeeded", and "failed".
    :vartype state: str or ~azureiotcentral.models.FileUploadState
    :ivar etag: ETag used to prevent conflict with multiple uploads.
    :vartype etag: str
    """

    _validation = {
        "connection_string": {"required": True},
        "container": {"required": True},
        "state": {"readonly": True},
    }

    _attribute_map = {
        "account": {"key": "account", "type": "str"},
        "connection_string": {"key": "connectionString", "type": "str"},
        "container": {"key": "container", "type": "str"},
        "sas_ttl": {"key": "sasTtl", "type": "str"},
        "state": {"key": "state", "type": "str"},
        "etag": {"key": "etag", "type": "str"},
    }

    def __init__(
        self,
        *,
        connection_string: str,
        container: str,
        account: Optional[str] = None,
        sas_ttl: Optional[str] = None,
        etag: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword account: The storage account name where to upload the file to.
        :paramtype account: str
        :keyword connection_string: The connection string used to configure the storage account.
         Required.
        :paramtype connection_string: str
        :keyword container: The name of the container inside the storage account. Required.
        :paramtype container: str
        :keyword sas_ttl: ISO 8601 duration standard, The amount of time the device’s request to upload
         a file is valid before it expires.
        :paramtype sas_ttl: str
        :keyword etag: ETag used to prevent conflict with multiple uploads.
        :paramtype etag: str
        """
        super().__init__(**kwargs)
        self.account = account
        self.connection_string = connection_string
        self.container = container
        self.sas_ttl = sas_ttl
        self.state = None
        self.etag = etag


class GroupAttestation(_serialization.Model):
    """The attestation definition for an enrollment group.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    GroupSymmetricKeyAttestation, GroupX509Attestation

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the attestation. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {"type": {"symmetricKey": "GroupSymmetricKeyAttestation", "x509": "GroupX509Attestation"}}

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class GroupSymmetricKeyAttestation(GroupAttestation):
    """The symmetric key attestation definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the attestation. Required.
    :vartype type: str
    :ivar symmetric_key: The symmetric key credentials for this attestation.
    :vartype symmetric_key: ~azureiotcentral.models.SymmetricKey
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "symmetric_key": {"key": "symmetricKey", "type": "SymmetricKey"},
    }

    def __init__(self, *, symmetric_key: Optional["_models.SymmetricKey"] = None, **kwargs):
        """
        :keyword symmetric_key: The symmetric key credentials for this attestation.
        :paramtype symmetric_key: ~azureiotcentral.models.SymmetricKey
        """
        super().__init__(**kwargs)
        self.type = "symmetricKey"  # type: str
        self.symmetric_key = symmetric_key


class GroupX509Attestation(GroupAttestation):
    """The X509 attestation definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the attestation. Required.
    :vartype type: str
    :ivar x509: The X.509 credentials for this attestation.
    :vartype x509: ~azureiotcentral.models.SigningX509
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "x509": {"key": "x509", "type": "SigningX509"},
    }

    def __init__(self, *, x509: Optional["_models.SigningX509"] = None, **kwargs):
        """
        :keyword x509: The X.509 credentials for this attestation.
        :paramtype x509: ~azureiotcentral.models.SigningX509
        """
        super().__init__(**kwargs)
        self.type = "x509"  # type: str
        self.x509 = x509


class HeatMapConfiguration(TileConfiguration, GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for a heat map tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar query_range: The query range configuration of the heat map chart. Required.
    :vartype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
    :ivar format: The format configuration of the heatmap chart.
    :vartype format: ~azureiotcentral.models.ChartFormatConfiguration
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "type": {"required": True},
        "query_range": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "query_range": {"key": "queryRange", "type": "TimeQueryRangeConfiguration"},
        "format": {"key": "format", "type": "ChartFormatConfiguration"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        query_range: "_models.TimeQueryRangeConfiguration",
        capabilities: Optional[List["_models.TileCapability"]] = None,
        format: Optional["_models.ChartFormatConfiguration"] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword query_range: The query range configuration of the heat map chart. Required.
        :paramtype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
        :keyword format: The format configuration of the heatmap chart.
        :paramtype format: ~azureiotcentral.models.ChartFormatConfiguration
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.type = "heatMapChart"  # type: str
        self.query_range = query_range
        self.format = format


class ImageTileConfiguration(TileConfiguration):
    """Configuration specifying options for an image tile.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar image: The asset id of the image to display.
    :vartype image: str
    :ivar href: The URL the tile links to when clicked.
    :vartype href: str
    :ivar format: Format options for the image tile.
    :vartype format: ~azureiotcentral.models.ImageTileConfigurationFormat
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "image": {"key": "image", "type": "str"},
        "href": {"key": "href", "type": "str"},
        "format": {"key": "format", "type": "ImageTileConfigurationFormat"},
    }

    def __init__(
        self,
        *,
        image: Optional[str] = None,
        href: Optional[str] = None,
        format: Optional["_models.ImageTileConfigurationFormat"] = None,
        **kwargs
    ):
        """
        :keyword image: The asset id of the image to display.
        :paramtype image: str
        :keyword href: The URL the tile links to when clicked.
        :paramtype href: str
        :keyword format: Format options for the image tile.
        :paramtype format: ~azureiotcentral.models.ImageTileConfigurationFormat
        """
        super().__init__(**kwargs)
        self.type = "image"  # type: str
        self.image = image
        self.href = href
        self.format = format


class ImageTileConfigurationFormat(_serialization.Model):
    """Format options for the image tile.

    :ivar background_color: The background color to show behind the image.
    :vartype background_color: str
    :ivar fit_image: Whether to stretch the image to fit the aspect ratio of the tile or display in
     the image's native aspect ratio.
    :vartype fit_image: bool
    :ivar text_color: The color of the text in the tile.
    :vartype text_color: str
    :ivar text_size: Size of the test in the tile.
    :vartype text_size: float
    :ivar text_size_unit: The unit of size for the text in the tile. Default value is "px".
    :vartype text_size_unit: str
    :ivar show_title: Whether or not to show the display name text on the tile.
    :vartype show_title: bool
    """

    _attribute_map = {
        "background_color": {"key": "backgroundColor", "type": "str"},
        "fit_image": {"key": "fitImage", "type": "bool"},
        "text_color": {"key": "textColor", "type": "str"},
        "text_size": {"key": "textSize", "type": "float"},
        "text_size_unit": {"key": "textSizeUnit", "type": "str"},
        "show_title": {"key": "showTitle", "type": "bool"},
    }

    def __init__(
        self,
        *,
        background_color: str = "#FFFFFF",
        fit_image: bool = True,
        text_color: str = "#FFFFFF",
        text_size: float = 14,
        text_size_unit: str = "px",
        show_title: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword background_color: The background color to show behind the image.
        :paramtype background_color: str
        :keyword fit_image: Whether to stretch the image to fit the aspect ratio of the tile or display
         in the image's native aspect ratio.
        :paramtype fit_image: bool
        :keyword text_color: The color of the text in the tile.
        :paramtype text_color: str
        :keyword text_size: Size of the test in the tile.
        :paramtype text_size: float
        :keyword text_size_unit: The unit of size for the text in the tile. Default value is "px".
        :paramtype text_size_unit: str
        :keyword show_title: Whether or not to show the display name text on the tile.
        :paramtype show_title: bool
        """
        super().__init__(**kwargs)
        self.background_color = background_color
        self.fit_image = fit_image
        self.text_color = text_color
        self.text_size = text_size
        self.text_size_unit = text_size_unit
        self.show_title = show_title


class Job(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The job definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique ID of the job.
    :vartype id: str
    :ivar scheduled_job_id: Id of the scheduled job definition that created this job.
    :vartype scheduled_job_id: str
    :ivar display_name: Display name of the job.
    :vartype display_name: str
    :ivar description: Detailed description of the job.
    :vartype description: str
    :ivar group: The ID of the device group on which to execute the job. Required.
    :vartype group: str
    :ivar batch: The batching configuration for the job.
    :vartype batch: ~azureiotcentral.models.JobBatch
    :ivar cancellation_threshold: The cancellation threshold for the job.
    :vartype cancellation_threshold: ~azureiotcentral.models.JobCancellationThreshold
    :ivar data: The capabilities being updated by the job and the values with which they are being
     updated. Required.
    :vartype data: list[~azureiotcentral.models.JobData]
    :ivar start: The start time of the job.
    :vartype start: ~datetime.datetime
    :ivar end: The end time of the job.
    :vartype end: ~datetime.datetime
    :ivar progress: The progress statistics of the job.
    :vartype progress: ~azureiotcentral.models.JobProgress
    :ivar status: Indicates whether the job is starting, running, etc.
    :vartype status: str
    :ivar organizations: List of organizations of the job, only one organization is supported
     today, multiple organizations will be supported soon.
    :vartype organizations: list[str]
    """

    _validation = {
        "id": {"readonly": True},
        "group": {"required": True},
        "data": {"required": True, "min_items": 1},
        "start": {"readonly": True},
        "end": {"readonly": True},
        "progress": {"readonly": True},
        "status": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "scheduled_job_id": {"key": "scheduledJobId", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "group": {"key": "group", "type": "str"},
        "batch": {"key": "batch", "type": "JobBatch"},
        "cancellation_threshold": {"key": "cancellationThreshold", "type": "JobCancellationThreshold"},
        "data": {"key": "data", "type": "[JobData]"},
        "start": {"key": "start", "type": "iso-8601"},
        "end": {"key": "end", "type": "iso-8601"},
        "progress": {"key": "progress", "type": "JobProgress"},
        "status": {"key": "status", "type": "str"},
        "organizations": {"key": "organizations", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        group: str,
        data: List["_models.JobData"],
        scheduled_job_id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        batch: Optional["_models.JobBatch"] = None,
        cancellation_threshold: Optional["_models.JobCancellationThreshold"] = None,
        organizations: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword scheduled_job_id: Id of the scheduled job definition that created this job.
        :paramtype scheduled_job_id: str
        :keyword display_name: Display name of the job.
        :paramtype display_name: str
        :keyword description: Detailed description of the job.
        :paramtype description: str
        :keyword group: The ID of the device group on which to execute the job. Required.
        :paramtype group: str
        :keyword batch: The batching configuration for the job.
        :paramtype batch: ~azureiotcentral.models.JobBatch
        :keyword cancellation_threshold: The cancellation threshold for the job.
        :paramtype cancellation_threshold: ~azureiotcentral.models.JobCancellationThreshold
        :keyword data: The capabilities being updated by the job and the values with which they are
         being updated. Required.
        :paramtype data: list[~azureiotcentral.models.JobData]
        :keyword organizations: List of organizations of the job, only one organization is supported
         today, multiple organizations will be supported soon.
        :paramtype organizations: list[str]
        """
        super().__init__(**kwargs)
        self.id = None
        self.scheduled_job_id = scheduled_job_id
        self.display_name = display_name
        self.description = description
        self.group = group
        self.batch = batch
        self.cancellation_threshold = cancellation_threshold
        self.data = data
        self.start = None
        self.end = None
        self.progress = None
        self.status = None
        self.organizations = organizations


class JobBatch(_serialization.Model):
    """The job batch definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Whether batching is done on a specified number of devices or a percentage of the
     total devices. Required. Known values are: "number" and "percentage".
    :vartype type: str or ~azureiotcentral.models.JobBatchType
    :ivar value: The number or percentage of devices on which batching is done. Required.
    :vartype value: float
    """

    _validation = {
        "type": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "value": {"key": "value", "type": "float"},
    }

    def __init__(self, *, type: Union[str, "_models.JobBatchType"], value: float, **kwargs):
        """
        :keyword type: Whether batching is done on a specified number of devices or a percentage of the
         total devices. Required. Known values are: "number" and "percentage".
        :paramtype type: str or ~azureiotcentral.models.JobBatchType
        :keyword value: The number or percentage of devices on which batching is done. Required.
        :paramtype value: float
        """
        super().__init__(**kwargs)
        self.type = type
        self.value = value


class JobCancellationThreshold(_serialization.Model):
    """The job cancellation threshold definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Whether the cancellation threshold is per a specified number of devices or a
     percentage of the total devices. Required. Known values are: "number" and "percentage".
    :vartype type: str or ~azureiotcentral.models.JobCancellationThresholdType
    :ivar value: The number or percentage of devices on which the cancellation threshold is
     applied. Required.
    :vartype value: float
    :ivar batch: Whether the cancellation threshold applies per-batch or to the overall job.
    :vartype batch: bool
    """

    _validation = {
        "type": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "value": {"key": "value", "type": "float"},
        "batch": {"key": "batch", "type": "bool"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.JobCancellationThresholdType"],
        value: float,
        batch: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword type: Whether the cancellation threshold is per a specified number of devices or a
         percentage of the total devices. Required. Known values are: "number" and "percentage".
        :paramtype type: str or ~azureiotcentral.models.JobCancellationThresholdType
        :keyword value: The number or percentage of devices on which the cancellation threshold is
         applied. Required.
        :paramtype value: float
        :keyword batch: Whether the cancellation threshold applies per-batch or to the overall job.
        :paramtype batch: bool
        """
        super().__init__(**kwargs)
        self.type = type
        self.value = value
        self.batch = batch


class JobCollection(_serialization.Model):
    """The paged results of jobs.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of jobs. Required.
    :vartype value: list[~azureiotcentral.models.Job]
    :ivar next_link: URL to get the next page of jobs.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Job]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Job"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of jobs. Required.
        :paramtype value: list[~azureiotcentral.models.Job]
        :keyword next_link: URL to get the next page of jobs.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class JobDeviceStatus(_serialization.Model):
    """The job device status definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: ID of the device whose job status is being provided.
    :vartype id: str
    :ivar status: Indicates whether the job is starting, running, etc. for the given device.
    :vartype status: str
    """

    _validation = {
        "id": {"readonly": True},
        "status": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.status = None


class JobDeviceStatusCollection(_serialization.Model):
    """The paged results of job device statuses.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of job device statuses. Required.
    :vartype value: list[~azureiotcentral.models.JobDeviceStatus]
    :ivar next_link: URL to get the next page of job device statuses.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[JobDeviceStatus]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.JobDeviceStatus"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of job device statuses. Required.
        :paramtype value: list[~azureiotcentral.models.JobDeviceStatus]
        :keyword next_link: URL to get the next page of job device statuses.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class JobProgress(_serialization.Model):
    """progress summary for a scheduled job.

    :ivar total: The total number of entities targeted by the job.
    :vartype total: int
    :ivar pending: The number of entities for which the job is not yet running.
    :vartype pending: int
    :ivar completed: The number of entities for which the job has completed.
    :vartype completed: int
    :ivar failed: The number of entities for which the job has failed.
    :vartype failed: int
    """

    _attribute_map = {
        "total": {"key": "total", "type": "int"},
        "pending": {"key": "pending", "type": "int"},
        "completed": {"key": "completed", "type": "int"},
        "failed": {"key": "failed", "type": "int"},
    }

    def __init__(
        self,
        *,
        total: Optional[int] = None,
        pending: Optional[int] = None,
        completed: Optional[int] = None,
        failed: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword total: The total number of entities targeted by the job.
        :paramtype total: int
        :keyword pending: The number of entities for which the job is not yet running.
        :paramtype pending: int
        :keyword completed: The number of entities for which the job has completed.
        :paramtype completed: int
        :keyword failed: The number of entities for which the job has failed.
        :paramtype failed: int
        """
        super().__init__(**kwargs)
        self.total = total
        self.pending = pending
        self.completed = completed
        self.failed = failed


class JobSchedule(_serialization.Model):
    """The schedule definition of job.

    All required parameters must be populated in order to send to Azure.

    :ivar recurrence: The recurrence of the scheduled job. If not provided, the job will run once
     at the specified start time. Known values are: "daily", "weekly", and "monthly".
    :vartype recurrence: str or ~azureiotcentral.models.JobRecurrence
    :ivar start: The start time for the scheduled job. Required.
    :vartype start: ~datetime.datetime
    :ivar end: The specification of when to end the scheduled job.
    :vartype end: ~azureiotcentral.models.JobScheduleEnd
    """

    _validation = {
        "start": {"required": True},
    }

    _attribute_map = {
        "recurrence": {"key": "recurrence", "type": "str"},
        "start": {"key": "start", "type": "iso-8601"},
        "end": {"key": "end", "type": "JobScheduleEnd"},
    }

    def __init__(
        self,
        *,
        start: datetime.datetime,
        recurrence: Optional[Union[str, "_models.JobRecurrence"]] = None,
        end: Optional["_models.JobScheduleEnd"] = None,
        **kwargs
    ):
        """
        :keyword recurrence: The recurrence of the scheduled job. If not provided, the job will run
         once at the specified start time. Known values are: "daily", "weekly", and "monthly".
        :paramtype recurrence: str or ~azureiotcentral.models.JobRecurrence
        :keyword start: The start time for the scheduled job. Required.
        :paramtype start: ~datetime.datetime
        :keyword end: The specification of when to end the scheduled job.
        :paramtype end: ~azureiotcentral.models.JobScheduleEnd
        """
        super().__init__(**kwargs)
        self.recurrence = recurrence
        self.start = start
        self.end = end


class KpiTileConfiguration(TileConfiguration, GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for kpi tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar query_range: The query range configuration of the KPI chart. Required.
    :vartype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
    :ivar format: The format configuration of the lkv tile.
    :vartype format: ~azureiotcentral.models.TextFormatConfiguration
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "type": {"required": True},
        "query_range": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "query_range": {"key": "queryRange", "type": "TimeQueryRangeConfiguration"},
        "format": {"key": "format", "type": "TextFormatConfiguration"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        query_range: "_models.TimeQueryRangeConfiguration",
        capabilities: Optional[List["_models.TileCapability"]] = None,
        format: Optional["_models.TextFormatConfiguration"] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword query_range: The query range configuration of the KPI chart. Required.
        :paramtype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
        :keyword format: The format configuration of the lkv tile.
        :paramtype format: ~azureiotcentral.models.TextFormatConfiguration
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.type = "kpi"  # type: str
        self.query_range = query_range
        self.format = format


class LabelTileConfiguration(TileConfiguration):
    """Configuration specifying options for a label tile.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar text: The text to display in the tile. Required.
    :vartype text: str
    :ivar text_size: The font size of the text being displayed.
    :vartype text_size: float
    :ivar text_size_unit: The unit of size for the text in the tile. Default value is "pt".
    :vartype text_size_unit: str
    :ivar word_wrap: Whether to wrap the text being displayed.
    :vartype word_wrap: bool
    """

    _validation = {
        "type": {"required": True},
        "text": {"required": True, "min_length": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "text_size": {"key": "textSize", "type": "float"},
        "text_size_unit": {"key": "textSizeUnit", "type": "str"},
        "word_wrap": {"key": "wordWrap", "type": "bool"},
    }

    def __init__(
        self, *, text: str, text_size: float = 24, text_size_unit: str = "pt", word_wrap: bool = True, **kwargs
    ):
        """
        :keyword text: The text to display in the tile. Required.
        :paramtype text: str
        :keyword text_size: The font size of the text being displayed.
        :paramtype text_size: float
        :keyword text_size_unit: The unit of size for the text in the tile. Default value is "pt".
        :paramtype text_size_unit: str
        :keyword word_wrap: Whether to wrap the text being displayed.
        :paramtype word_wrap: bool
        """
        super().__init__(**kwargs)
        self.type = "label"  # type: str
        self.text = text
        self.text_size = text_size
        self.text_size_unit = text_size_unit
        self.word_wrap = word_wrap


class LineChartConfiguration(TileConfiguration, GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for a line chart tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar query_range: The query range configuration of the line chart. Required.
    :vartype query_range: ~azureiotcentral.models.QueryRangeConfiguration
    :ivar format: The format configuration of the line chart.
    :vartype format: ~azureiotcentral.models.ChartFormatConfiguration
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "type": {"required": True},
        "query_range": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "query_range": {"key": "queryRange", "type": "QueryRangeConfiguration"},
        "format": {"key": "format", "type": "ChartFormatConfiguration"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        query_range: "_models.QueryRangeConfiguration",
        capabilities: Optional[List["_models.TileCapability"]] = None,
        format: Optional["_models.ChartFormatConfiguration"] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword query_range: The query range configuration of the line chart. Required.
        :paramtype query_range: ~azureiotcentral.models.QueryRangeConfiguration
        :keyword format: The format configuration of the line chart.
        :paramtype format: ~azureiotcentral.models.ChartFormatConfiguration
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.type = "lineChart"  # type: str
        self.query_range = query_range
        self.format = format


class LkvTileConfiguration(TileConfiguration, GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for a last known value tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar show_trend: Show the trend between the last known value and the value before that.
    :vartype show_trend: bool
    :ivar format: The format configuration of the lkv tile.
    :vartype format: ~azureiotcentral.models.TextFormatConfiguration
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "type": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "show_trend": {"key": "showTrend", "type": "bool"},
        "format": {"key": "format", "type": "TextFormatConfiguration"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        capabilities: Optional[List["_models.TileCapability"]] = None,
        show_trend: bool = True,
        format: Optional["_models.TextFormatConfiguration"] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword show_trend: Show the trend between the last known value and the value before that.
        :paramtype show_trend: bool
        :keyword format: The format configuration of the lkv tile.
        :paramtype format: ~azureiotcentral.models.TextFormatConfiguration
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.type = "lkv"  # type: str
        self.show_trend = show_trend
        self.format = format


class MapFormatConfiguration(_serialization.Model):
    """Configuration specifying formatting options for a map tile.

    :ivar zoom_level: The zoom level of the map.
    :vartype zoom_level: int
    """

    _attribute_map = {
        "zoom_level": {"key": "zoomLevel", "type": "int"},
    }

    def __init__(self, *, zoom_level: int = 3, **kwargs):
        """
        :keyword zoom_level: The zoom level of the map.
        :paramtype zoom_level: int
        """
        super().__init__(**kwargs)
        self.zoom_level = zoom_level


class MapTileConfiguration(GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for a map tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar zoom_level: The zoom level of the map.
    :vartype zoom_level: float
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "zoom_level": {"maximum": 24, "minimum": 0},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "zoom_level": {"key": "zoomLevel", "type": "float"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        capabilities: Optional[List["_models.TileCapability"]] = None,
        zoom_level: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword zoom_level: The zoom level of the map.
        :paramtype zoom_level: float
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.zoom_level = zoom_level
        self.group = group
        self.devices = devices


class MapPropertyConfiguration(TileConfiguration, MapTileConfiguration):
    """Configuration specifying options for a map property tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar zoom_level: The zoom level of the map.
    :vartype zoom_level: float
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "zoom_level": {"maximum": 24, "minimum": 0},
        "type": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "zoom_level": {"key": "zoomLevel", "type": "float"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        capabilities: Optional[List["_models.TileCapability"]] = None,
        zoom_level: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword zoom_level: The zoom level of the map.
        :paramtype zoom_level: float
        """
        super().__init__(capabilities=capabilities, group=group, devices=devices, zoom_level=zoom_level, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.zoom_level = zoom_level
        self.type = "mapProperty"  # type: str


class MapTelemetryConfiguration(TileConfiguration, MapTileConfiguration):
    """Configuration specifying options for a map telemetry tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar zoom_level: The zoom level of the map.
    :vartype zoom_level: float
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "zoom_level": {"maximum": 24, "minimum": 0},
        "type": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "zoom_level": {"key": "zoomLevel", "type": "float"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        capabilities: Optional[List["_models.TileCapability"]] = None,
        zoom_level: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword zoom_level: The zoom level of the map.
        :paramtype zoom_level: float
        """
        super().__init__(capabilities=capabilities, group=group, devices=devices, zoom_level=zoom_level, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.zoom_level = zoom_level
        self.type = "mapTelemetry"  # type: str


class MarkdownTileConfiguration(TileConfiguration):
    """Configuration specifying options for a markdown tile.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar href: Link to visit when tile is clicked.
    :vartype href: str
    :ivar description: Markdown string to render inside the tile. Required.
    :vartype description: str
    :ivar image: Base64 encoded.
    :vartype image: str
    """

    _validation = {
        "type": {"required": True},
        "description": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "href": {"key": "href", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "image": {"key": "image", "type": "str"},
    }

    def __init__(self, *, description: str, href: Optional[str] = None, image: Optional[str] = None, **kwargs):
        """
        :keyword href: Link to visit when tile is clicked.
        :paramtype href: str
        :keyword description: Markdown string to render inside the tile. Required.
        :paramtype description: str
        :keyword image: Base64 encoded.
        :paramtype image: str
        """
        super().__init__(**kwargs)
        self.type = "markdown"  # type: str
        self.href = href
        self.description = description
        self.image = image


class OccurrencesJobScheduleEnd(JobScheduleEnd):
    """The occurences based end definition of job schedule.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the job schedule end. Required.
    :vartype type: str
    :ivar occurrences: The number of occurrences after which to end the scheduled job. Required.
    :vartype occurrences: int
    """

    _validation = {
        "type": {"required": True},
        "occurrences": {"required": True, "maximum": 999, "minimum": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "occurrences": {"key": "occurrences", "type": "int"},
    }

    def __init__(self, *, occurrences: int, **kwargs):
        """
        :keyword occurrences: The number of occurrences after which to end the scheduled job. Required.
        :paramtype occurrences: int
        """
        super().__init__(**kwargs)
        self.type = "occurrences"  # type: str
        self.occurrences = occurrences


class Organization(_serialization.Model):
    """The organization definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique ID of the organization.
    :vartype id: str
    :ivar display_name: Display name of the organization.
    :vartype display_name: str
    :ivar parent: ID of the parent of the organization.
    :vartype parent: str
    """

    _validation = {
        "id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "parent": {"key": "parent", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, parent: Optional[str] = None, **kwargs):
        """
        :keyword display_name: Display name of the organization.
        :paramtype display_name: str
        :keyword parent: ID of the parent of the organization.
        :paramtype parent: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.parent = parent


class OrganizationCollection(_serialization.Model):
    """The paged results of organizations.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of organizations. Required.
    :vartype value: list[~azureiotcentral.models.Organization]
    :ivar next_link: URL to get the next page of organizations.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Organization]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Organization"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of organizations. Required.
        :paramtype value: list[~azureiotcentral.models.Organization]
        :keyword next_link: URL to get the next page of organizations.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PieChartConfiguration(TileConfiguration, GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for a pie chart tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar query_range: The query range configuration of the pie chart. Required.
    :vartype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
    :ivar format: The format configuration of the pie chart.
    :vartype format: ~azureiotcentral.models.ChartFormatConfiguration
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "type": {"required": True},
        "query_range": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "query_range": {"key": "queryRange", "type": "TimeQueryRangeConfiguration"},
        "format": {"key": "format", "type": "ChartFormatConfiguration"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        query_range: "_models.TimeQueryRangeConfiguration",
        capabilities: Optional[List["_models.TileCapability"]] = None,
        format: Optional["_models.ChartFormatConfiguration"] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword query_range: The query range configuration of the pie chart. Required.
        :paramtype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
        :keyword format: The format configuration of the pie chart.
        :paramtype format: ~azureiotcentral.models.ChartFormatConfiguration
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.type = "pieChart"  # type: str
        self.query_range = query_range
        self.format = format


class PropertyJobData(JobData, CapabilityJobData):
    """The property job data definition.

    All required parameters must be populated in order to send to Azure.

    :ivar target: The device template which defines the target capability for the job. Required.
    :vartype target: str
    :ivar path: The path to the target capability within the device template. Required.
    :vartype path: str
    :ivar value: The value used to update the target capability, if any.
    :vartype value: any
    :ivar type: Type of the job data. Required.
    :vartype type: str
    """

    _validation = {
        "target": {"required": True, "min_length": 1},
        "path": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "target": {"key": "target", "type": "str"},
        "path": {"key": "path", "type": "str"},
        "value": {"key": "value", "type": "object"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, target: str, path: str, value: Optional[Any] = None, **kwargs):
        """
        :keyword target: The device template which defines the target capability for the job. Required.
        :paramtype target: str
        :keyword path: The path to the target capability within the device template. Required.
        :paramtype path: str
        :keyword value: The value used to update the target capability, if any.
        :paramtype value: any
        """
        super().__init__(target=target, path=path, value=value, **kwargs)
        self.target = target
        self.path = path
        self.value = value
        self.type = "property"  # type: str


class PropertyTileConfiguration(TileConfiguration, GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for a property tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar format: The format configuration of the property tile.
    :vartype format: ~azureiotcentral.models.TextFormatConfiguration
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "type": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "format": {"key": "format", "type": "TextFormatConfiguration"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        capabilities: Optional[List["_models.TileCapability"]] = None,
        format: Optional["_models.TextFormatConfiguration"] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword format: The format configuration of the property tile.
        :paramtype format: ~azureiotcentral.models.TextFormatConfiguration
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.type = "property"  # type: str
        self.format = format


class QueryRequest(_serialization.Model):
    """The query request payload definition.

    All required parameters must be populated in order to send to Azure.

    :ivar query: Query to be executed. Required.
    :vartype query: str
    """

    _validation = {
        "query": {"required": True},
    }

    _attribute_map = {
        "query": {"key": "query", "type": "str"},
    }

    def __init__(self, *, query: str, **kwargs):
        """
        :keyword query: Query to be executed. Required.
        :paramtype query: str
        """
        super().__init__(**kwargs)
        self.query = query


class QueryResponse(_serialization.Model):
    """The query response payload definition.

    All required parameters must be populated in order to send to Azure.

    :ivar results: Required.
    :vartype results: list[JSON]
    """

    _validation = {
        "results": {"required": True},
    }

    _attribute_map = {
        "results": {"key": "results", "type": "[object]"},
    }

    def __init__(self, *, results: List[JSON], **kwargs):
        """
        :keyword results: Required.
        :paramtype results: list[JSON]
        """
        super().__init__(**kwargs)
        self.results = results


class Role(_serialization.Model):
    """The role definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique ID of the role.
    :vartype id: str
    :ivar display_name: Display name of the role.
    :vartype display_name: str
    """

    _validation = {
        "id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, **kwargs):
        """
        :keyword display_name: Display name of the role.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name


class RoleAssignment(_serialization.Model):
    """The role assignment definition.

    All required parameters must be populated in order to send to Azure.

    :ivar role: ID of the role for this role assignment. Required.
    :vartype role: str
    :ivar organization: ID of the organization for this role assignment.
    :vartype organization: str
    """

    _validation = {
        "role": {"required": True},
    }

    _attribute_map = {
        "role": {"key": "role", "type": "str"},
        "organization": {"key": "organization", "type": "str"},
    }

    def __init__(self, *, role: str, organization: Optional[str] = None, **kwargs):
        """
        :keyword role: ID of the role for this role assignment. Required.
        :paramtype role: str
        :keyword organization: ID of the organization for this role assignment.
        :paramtype organization: str
        """
        super().__init__(**kwargs)
        self.role = role
        self.organization = organization


class RoleCollection(_serialization.Model):
    """The paged results of roles.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of roles. Required.
    :vartype value: list[~azureiotcentral.models.Role]
    :ivar next_link: URL to get the next page of roles.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Role]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Role"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of roles. Required.
        :paramtype value: list[~azureiotcentral.models.Role]
        :keyword next_link: URL to get the next page of roles.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ScheduledJob(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The scheduled job definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar etag: ETag used to prevent conflict in scheduled job updates.
    :vartype etag: str
    :ivar id: Unique ID of the scheduled job.
    :vartype id: str
    :ivar display_name: Display name of the scheduled job.
    :vartype display_name: str
    :ivar description: Detailed description of the scheduled job.
    :vartype description: str
    :ivar group: The ID of the device group on which to execute the scheduled job. Required.
    :vartype group: str
    :ivar batch: The batching configuration for the scheduled job.
    :vartype batch: ~azureiotcentral.models.JobBatch
    :ivar cancellation_threshold: The cancellation threshold for the scheduled job.
    :vartype cancellation_threshold: ~azureiotcentral.models.JobCancellationThreshold
    :ivar data: Data related to the operation being performed by this job. All entries must be of
     the same type. Required.
    :vartype data: list[~azureiotcentral.models.JobData]
    :ivar organizations: List of organizations of the job, only one organization is supported
     today, multiple organizations will be supported soon.
    :vartype organizations: list[str]
    :ivar schedule: The schedule at which to execute the job. Required.
    :vartype schedule: ~azureiotcentral.models.JobSchedule
    :ivar enabled: Whether the scheduled job is enabled.
    :vartype enabled: bool
    :ivar completed: Whether the scheduled job has completed.
    :vartype completed: bool
    """

    _validation = {
        "id": {"readonly": True},
        "group": {"required": True},
        "data": {"required": True, "min_items": 1},
        "schedule": {"required": True},
        "completed": {"readonly": True},
    }

    _attribute_map = {
        "etag": {"key": "etag", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "group": {"key": "group", "type": "str"},
        "batch": {"key": "batch", "type": "JobBatch"},
        "cancellation_threshold": {"key": "cancellationThreshold", "type": "JobCancellationThreshold"},
        "data": {"key": "data", "type": "[JobData]"},
        "organizations": {"key": "organizations", "type": "[str]"},
        "schedule": {"key": "schedule", "type": "JobSchedule"},
        "enabled": {"key": "enabled", "type": "bool"},
        "completed": {"key": "completed", "type": "bool"},
    }

    def __init__(
        self,
        *,
        group: str,
        data: List["_models.JobData"],
        schedule: "_models.JobSchedule",
        etag: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        batch: Optional["_models.JobBatch"] = None,
        cancellation_threshold: Optional["_models.JobCancellationThreshold"] = None,
        organizations: Optional[List[str]] = None,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword etag: ETag used to prevent conflict in scheduled job updates.
        :paramtype etag: str
        :keyword display_name: Display name of the scheduled job.
        :paramtype display_name: str
        :keyword description: Detailed description of the scheduled job.
        :paramtype description: str
        :keyword group: The ID of the device group on which to execute the scheduled job. Required.
        :paramtype group: str
        :keyword batch: The batching configuration for the scheduled job.
        :paramtype batch: ~azureiotcentral.models.JobBatch
        :keyword cancellation_threshold: The cancellation threshold for the scheduled job.
        :paramtype cancellation_threshold: ~azureiotcentral.models.JobCancellationThreshold
        :keyword data: Data related to the operation being performed by this job. All entries must be
         of the same type. Required.
        :paramtype data: list[~azureiotcentral.models.JobData]
        :keyword organizations: List of organizations of the job, only one organization is supported
         today, multiple organizations will be supported soon.
        :paramtype organizations: list[str]
        :keyword schedule: The schedule at which to execute the job. Required.
        :paramtype schedule: ~azureiotcentral.models.JobSchedule
        :keyword enabled: Whether the scheduled job is enabled.
        :paramtype enabled: bool
        """
        super().__init__(**kwargs)
        self.etag = etag
        self.id = None
        self.display_name = display_name
        self.description = description
        self.group = group
        self.batch = batch
        self.cancellation_threshold = cancellation_threshold
        self.data = data
        self.organizations = organizations
        self.schedule = schedule
        self.enabled = enabled
        self.completed = None


class ScheduledJobCollection(_serialization.Model):
    """The paged results of scheduled job definitions.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of scheduled jobs. Required.
    :vartype value: list[~azureiotcentral.models.ScheduledJob]
    :ivar next_link: URL to get the next page of scheduled jobs.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ScheduledJob]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.ScheduledJob"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of scheduled jobs. Required.
        :paramtype value: list[~azureiotcentral.models.ScheduledJob]
        :keyword next_link: URL to get the next page of scheduled jobs.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ServiceBusQueueV1Destination(Destination):
    """The service bus queue destination definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Indication of the current health and operation of the export or destination.
    :vartype status: str
    :ivar errors: Errors encountered by the export or destination.
    :vartype errors: list[~azureiotcentral.models.DataExportError]
    :ivar last_export_time: The timestamp of the last message that was sent to the export or
     destination.
    :vartype last_export_time: ~datetime.datetime
    :ivar id: Unique ID of the destination.
    :vartype id: str
    :ivar display_name: Display name of the destination. Required.
    :vartype display_name: str
    :ivar type: The type of destination configuration. Required.
    :vartype type: str
    :ivar authorization: The authentication definition for service bus queue definition. Required.
    :vartype authorization: ~azureiotcentral.models.ServiceBusQueueV1DestinationAuth
    """

    _validation = {
        "status": {"readonly": True},
        "errors": {"readonly": True},
        "last_export_time": {"readonly": True},
        "id": {"readonly": True},
        "display_name": {"required": True},
        "type": {"required": True},
        "authorization": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "errors": {"key": "errors", "type": "[DataExportError]"},
        "last_export_time": {"key": "lastExportTime", "type": "iso-8601"},
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "authorization": {"key": "authorization", "type": "ServiceBusQueueV1DestinationAuth"},
    }

    def __init__(self, *, display_name: str, authorization: "_models.ServiceBusQueueV1DestinationAuth", **kwargs):
        """
        :keyword display_name: Display name of the destination. Required.
        :paramtype display_name: str
        :keyword authorization: The authentication definition for service bus queue definition.
         Required.
        :paramtype authorization: ~azureiotcentral.models.ServiceBusQueueV1DestinationAuth
        """
        super().__init__(display_name=display_name, **kwargs)
        self.type = "servicebusqueue@v1"  # type: str
        self.authorization = authorization


class ServiceBusQueueV1DestinationAuth(_serialization.Model):
    """The authentication definition for service bus queue definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ServiceBusQueueV1DestinationConnectionStringAuth,
    ServiceBusQueueV1DestinationSystemAssignedManagedIdentityAuth

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "connectionString": "ServiceBusQueueV1DestinationConnectionStringAuth",
            "systemAssignedManagedIdentity": "ServiceBusQueueV1DestinationSystemAssignedManagedIdentityAuth",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class ServiceBusQueueV1DestinationConnectionStringAuth(ServiceBusQueueV1DestinationAuth):
    """The authentication definition with connection string for service bus queue definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    :ivar connection_string: The connection string for accessing the Service Bus namespace,
     including the ``EntityPath`` of the queue. Required.
    :vartype connection_string: str
    """

    _validation = {
        "type": {"required": True},
        "connection_string": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "connection_string": {"key": "connectionString", "type": "str"},
    }

    def __init__(self, *, connection_string: str, **kwargs):
        """
        :keyword connection_string: The connection string for accessing the Service Bus namespace,
         including the ``EntityPath`` of the queue. Required.
        :paramtype connection_string: str
        """
        super().__init__(**kwargs)
        self.type = "connectionString"  # type: str
        self.connection_string = connection_string


class ServiceBusQueueV1DestinationSystemAssignedManagedIdentityAuth(ServiceBusQueueV1DestinationAuth):
    """The authentication definition with system assigned managed identity for service bus queue definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    :ivar host_name: The host name of the Service Bus namespace. Required.
    :vartype host_name: str
    :ivar queue_name: The Service Bus queue name. Required.
    :vartype queue_name: str
    """

    _validation = {
        "type": {"required": True},
        "host_name": {"required": True},
        "queue_name": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "host_name": {"key": "hostName", "type": "str"},
        "queue_name": {"key": "queueName", "type": "str"},
    }

    def __init__(self, *, host_name: str, queue_name: str, **kwargs):
        """
        :keyword host_name: The host name of the Service Bus namespace. Required.
        :paramtype host_name: str
        :keyword queue_name: The Service Bus queue name. Required.
        :paramtype queue_name: str
        """
        super().__init__(**kwargs)
        self.type = "systemAssignedManagedIdentity"  # type: str
        self.host_name = host_name
        self.queue_name = queue_name


class ServiceBusTopicV1Destination(Destination):
    """The service bus topic destination definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Indication of the current health and operation of the export or destination.
    :vartype status: str
    :ivar errors: Errors encountered by the export or destination.
    :vartype errors: list[~azureiotcentral.models.DataExportError]
    :ivar last_export_time: The timestamp of the last message that was sent to the export or
     destination.
    :vartype last_export_time: ~datetime.datetime
    :ivar id: Unique ID of the destination.
    :vartype id: str
    :ivar display_name: Display name of the destination. Required.
    :vartype display_name: str
    :ivar type: The type of destination configuration. Required.
    :vartype type: str
    :ivar authorization: The authentication definition for service bus topic destination. Required.
    :vartype authorization: ~azureiotcentral.models.ServiceBusTopicV1DestinationAuth
    """

    _validation = {
        "status": {"readonly": True},
        "errors": {"readonly": True},
        "last_export_time": {"readonly": True},
        "id": {"readonly": True},
        "display_name": {"required": True},
        "type": {"required": True},
        "authorization": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "errors": {"key": "errors", "type": "[DataExportError]"},
        "last_export_time": {"key": "lastExportTime", "type": "iso-8601"},
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "authorization": {"key": "authorization", "type": "ServiceBusTopicV1DestinationAuth"},
    }

    def __init__(self, *, display_name: str, authorization: "_models.ServiceBusTopicV1DestinationAuth", **kwargs):
        """
        :keyword display_name: Display name of the destination. Required.
        :paramtype display_name: str
        :keyword authorization: The authentication definition for service bus topic destination.
         Required.
        :paramtype authorization: ~azureiotcentral.models.ServiceBusTopicV1DestinationAuth
        """
        super().__init__(display_name=display_name, **kwargs)
        self.type = "servicebustopic@v1"  # type: str
        self.authorization = authorization


class ServiceBusTopicV1DestinationAuth(_serialization.Model):
    """The authentication definition for service bus topic destination.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ServiceBusTopicV1DestinationConnectionStringAuth,
    ServiceBusTopicV1DestinationSystemAssignedManagedIdentityAuth

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "connectionString": "ServiceBusTopicV1DestinationConnectionStringAuth",
            "systemAssignedManagedIdentity": "ServiceBusTopicV1DestinationSystemAssignedManagedIdentityAuth",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class ServiceBusTopicV1DestinationConnectionStringAuth(ServiceBusTopicV1DestinationAuth):
    """The authentication definition with connection string for service bus topic destination.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    :ivar connection_string: The connection string for accessing the Service Bus namespace,
     including the ``EntityPath`` of the topic. Required.
    :vartype connection_string: str
    """

    _validation = {
        "type": {"required": True},
        "connection_string": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "connection_string": {"key": "connectionString", "type": "str"},
    }

    def __init__(self, *, connection_string: str, **kwargs):
        """
        :keyword connection_string: The connection string for accessing the Service Bus namespace,
         including the ``EntityPath`` of the topic. Required.
        :paramtype connection_string: str
        """
        super().__init__(**kwargs)
        self.type = "connectionString"  # type: str
        self.connection_string = connection_string


class ServiceBusTopicV1DestinationSystemAssignedManagedIdentityAuth(ServiceBusTopicV1DestinationAuth):
    """The authentication definition with system assigned managed identity for service bus topic destination.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    :ivar host_name: The host name of the Service Bus namespace. Required.
    :vartype host_name: str
    :ivar topic_name: The Service Bus topic name. Required.
    :vartype topic_name: str
    """

    _validation = {
        "type": {"required": True},
        "host_name": {"required": True},
        "topic_name": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "host_name": {"key": "hostName", "type": "str"},
        "topic_name": {"key": "topicName", "type": "str"},
    }

    def __init__(self, *, host_name: str, topic_name: str, **kwargs):
        """
        :keyword host_name: The host name of the Service Bus namespace. Required.
        :paramtype host_name: str
        :keyword topic_name: The Service Bus topic name. Required.
        :paramtype topic_name: str
        """
        super().__init__(**kwargs)
        self.type = "systemAssignedManagedIdentity"  # type: str
        self.host_name = host_name
        self.topic_name = topic_name


class ServicePrincipalUser(User):
    """The service principal user definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar roles: List of role assignments that specify the permissions to access the application.
     Required.
    :vartype roles: list[~azureiotcentral.models.RoleAssignment]
    :ivar id: Unique ID of the user.
    :vartype id: str
    :ivar type: Type of the user. Required.
    :vartype type: str
    :ivar tenant_id: The AAD tenant ID of the service principal. Required.
    :vartype tenant_id: str
    :ivar object_id: The AAD object ID of the service principal. Required.
    :vartype object_id: str
    """

    _validation = {
        "roles": {"required": True, "min_items": 1},
        "id": {"readonly": True},
        "type": {"required": True},
        "tenant_id": {"required": True},
        "object_id": {"required": True},
    }

    _attribute_map = {
        "roles": {"key": "roles", "type": "[RoleAssignment]"},
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "object_id": {"key": "objectId", "type": "str"},
    }

    def __init__(self, *, roles: List["_models.RoleAssignment"], tenant_id: str, object_id: str, **kwargs):
        """
        :keyword roles: List of role assignments that specify the permissions to access the
         application. Required.
        :paramtype roles: list[~azureiotcentral.models.RoleAssignment]
        :keyword tenant_id: The AAD tenant ID of the service principal. Required.
        :paramtype tenant_id: str
        :keyword object_id: The AAD object ID of the service principal. Required.
        :paramtype object_id: str
        """
        super().__init__(roles=roles, **kwargs)
        self.type = "servicePrincipal"  # type: str
        self.tenant_id = tenant_id
        self.object_id = object_id


class SigningX509(_serialization.Model):
    """The X509 definition.

    :ivar signing_certificates: The X.509 signing certificates for this credential.
    :vartype signing_certificates: ~azureiotcentral.models.SigningX509Certificates
    """

    _attribute_map = {
        "signing_certificates": {"key": "signingCertificates", "type": "SigningX509Certificates"},
    }

    def __init__(self, *, signing_certificates: Optional["_models.SigningX509Certificates"] = None, **kwargs):
        """
        :keyword signing_certificates: The X.509 signing certificates for this credential.
        :paramtype signing_certificates: ~azureiotcentral.models.SigningX509Certificates
        """
        super().__init__(**kwargs)
        self.signing_certificates = signing_certificates


class SigningX509Certificate(_serialization.Model):
    """The X509 certificate definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar verified: Whether the certificate has been verified.
    :vartype verified: bool
    :ivar certificate: The string representation of this certificate.
    :vartype certificate: str
    :ivar info: Information about this certificate.
    :vartype info: ~azureiotcentral.models.X509CertificateInfo
    :ivar etag: ETag used to prevent conflict across multiple updates.
    :vartype etag: str
    """

    _validation = {
        "info": {"readonly": True},
    }

    _attribute_map = {
        "verified": {"key": "verified", "type": "bool"},
        "certificate": {"key": "certificate", "type": "str"},
        "info": {"key": "info", "type": "X509CertificateInfo"},
        "etag": {"key": "etag", "type": "str"},
    }

    def __init__(
        self, *, verified: bool = False, certificate: Optional[str] = None, etag: Optional[str] = None, **kwargs
    ):
        """
        :keyword verified: Whether the certificate has been verified.
        :paramtype verified: bool
        :keyword certificate: The string representation of this certificate.
        :paramtype certificate: str
        :keyword etag: ETag used to prevent conflict across multiple updates.
        :paramtype etag: str
        """
        super().__init__(**kwargs)
        self.verified = verified
        self.certificate = certificate
        self.info = None
        self.etag = etag


class SigningX509Certificates(_serialization.Model):
    """The X509 certificates definition.

    :ivar primary: The primary X.509 certificate for this credential.
    :vartype primary: ~azureiotcentral.models.SigningX509Certificate
    :ivar secondary: The secondary X.509 certificate for this credential.
    :vartype secondary: ~azureiotcentral.models.SigningX509Certificate
    """

    _attribute_map = {
        "primary": {"key": "primary", "type": "SigningX509Certificate"},
        "secondary": {"key": "secondary", "type": "SigningX509Certificate"},
    }

    def __init__(
        self,
        *,
        primary: Optional["_models.SigningX509Certificate"] = None,
        secondary: Optional["_models.SigningX509Certificate"] = None,
        **kwargs
    ):
        """
        :keyword primary: The primary X.509 certificate for this credential.
        :paramtype primary: ~azureiotcentral.models.SigningX509Certificate
        :keyword secondary: The secondary X.509 certificate for this credential.
        :paramtype secondary: ~azureiotcentral.models.SigningX509Certificate
        """
        super().__init__(**kwargs)
        self.primary = primary
        self.secondary = secondary


class StateChartConfiguration(TileConfiguration, GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for a state chart tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar query_range: The query range configuration of the state chart. Required.
    :vartype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "type": {"required": True},
        "query_range": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "query_range": {"key": "queryRange", "type": "TimeQueryRangeConfiguration"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        query_range: "_models.TimeQueryRangeConfiguration",
        capabilities: Optional[List["_models.TileCapability"]] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword query_range: The query range configuration of the state chart. Required.
        :paramtype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.type = "stateChart"  # type: str
        self.query_range = query_range


class StateHistoryChartConfiguration(TileConfiguration, GroupTileConfiguration, TileCapabilityConfiguration):
    """Configuration specifying options for a state history chart tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capabilities:
    :vartype capabilities: list[~azureiotcentral.models.TileCapability]
    :ivar group: The ID of the device group to display. Required.
    :vartype group: str
    :ivar devices: The list of associated devices to display. Required.
    :vartype devices: list[str]
    :ivar type: The type of widget the tile renders. Required.
    :vartype type: str
    :ivar query_range: The query range configuration of the state chart. Required.
    :vartype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
    :ivar format: The format configuration of the state history chart.
    :vartype format: ~azureiotcentral.models.TextFormatConfiguration
    """

    _validation = {
        "group": {"required": True},
        "devices": {"required": True, "max_items": 100, "min_items": 0},
        "type": {"required": True},
        "query_range": {"required": True},
    }

    _attribute_map = {
        "capabilities": {"key": "capabilities", "type": "[TileCapability]"},
        "group": {"key": "group", "type": "str"},
        "devices": {"key": "devices", "type": "[str]"},
        "type": {"key": "type", "type": "str"},
        "query_range": {"key": "queryRange", "type": "TimeQueryRangeConfiguration"},
        "format": {"key": "format", "type": "TextFormatConfiguration"},
    }

    def __init__(
        self,
        *,
        group: str,
        devices: List[str],
        query_range: "_models.TimeQueryRangeConfiguration",
        capabilities: Optional[List["_models.TileCapability"]] = None,
        format: Optional["_models.TextFormatConfiguration"] = None,
        **kwargs
    ):
        """
        :keyword capabilities:
        :paramtype capabilities: list[~azureiotcentral.models.TileCapability]
        :keyword group: The ID of the device group to display. Required.
        :paramtype group: str
        :keyword devices: The list of associated devices to display. Required.
        :paramtype devices: list[str]
        :keyword query_range: The query range configuration of the state chart. Required.
        :paramtype query_range: ~azureiotcentral.models.TimeQueryRangeConfiguration
        :keyword format: The format configuration of the state history chart.
        :paramtype format: ~azureiotcentral.models.TextFormatConfiguration
        """
        super().__init__(group=group, devices=devices, capabilities=capabilities, **kwargs)
        self.capabilities = capabilities
        self.group = group
        self.devices = devices
        self.type = "stateHistoryChart"  # type: str
        self.query_range = query_range
        self.format = format


class SymmetricKey(_serialization.Model):
    """The symmetric key definition.

    All required parameters must be populated in order to send to Azure.

    :ivar primary_key: The primary key for this credential. Required.
    :vartype primary_key: str
    :ivar secondary_key: The secondary key for this credential. Required.
    :vartype secondary_key: str
    """

    _validation = {
        "primary_key": {"required": True},
        "secondary_key": {"required": True},
    }

    _attribute_map = {
        "primary_key": {"key": "primaryKey", "type": "str"},
        "secondary_key": {"key": "secondaryKey", "type": "str"},
    }

    def __init__(self, *, primary_key: str, secondary_key: str, **kwargs):
        """
        :keyword primary_key: The primary key for this credential. Required.
        :paramtype primary_key: str
        :keyword secondary_key: The secondary key for this credential. Required.
        :paramtype secondary_key: str
        """
        super().__init__(**kwargs)
        self.primary_key = primary_key
        self.secondary_key = secondary_key


class SymmetricKeyAttestation(Attestation):
    """The symmetric key attestation definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the attestation. Required.
    :vartype type: str
    :ivar symmetric_key: The symmetric key credentials for this attestation. Required.
    :vartype symmetric_key: ~azureiotcentral.models.SymmetricKey
    """

    _validation = {
        "type": {"required": True},
        "symmetric_key": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "symmetric_key": {"key": "symmetricKey", "type": "SymmetricKey"},
    }

    def __init__(self, *, symmetric_key: "_models.SymmetricKey", **kwargs):
        """
        :keyword symmetric_key: The symmetric key credentials for this attestation. Required.
        :paramtype symmetric_key: ~azureiotcentral.models.SymmetricKey
        """
        super().__init__(**kwargs)
        self.type = "symmetricKey"  # type: str
        self.symmetric_key = symmetric_key


class TextFormatConfiguration(_serialization.Model):
    """Configuration specifying formatting options for a text based tile.

    :ivar abbreviate_value: Whether to abbreviate the value.
    :vartype abbreviate_value: bool
    :ivar decimal_places: The number of decimal places being displayed.
    :vartype decimal_places: int
    :ivar text_size: The font size of the text being displayed.
    :vartype text_size: float
    :ivar unit: The unit of size for the text in the tile. Default value is "pt".
    :vartype unit: str
    :ivar word_wrap: Whether to wrap the text being displayed.
    :vartype word_wrap: bool
    """

    _attribute_map = {
        "abbreviate_value": {"key": "abbreviateValue", "type": "bool"},
        "decimal_places": {"key": "decimalPlaces", "type": "int"},
        "text_size": {"key": "textSize", "type": "float"},
        "unit": {"key": "unit", "type": "str"},
        "word_wrap": {"key": "wordWrap", "type": "bool"},
    }

    def __init__(
        self,
        *,
        abbreviate_value: bool = True,
        decimal_places: Optional[int] = None,
        text_size: Optional[float] = None,
        unit: str = "pt",
        word_wrap: bool = True,
        **kwargs
    ):
        """
        :keyword abbreviate_value: Whether to abbreviate the value.
        :paramtype abbreviate_value: bool
        :keyword decimal_places: The number of decimal places being displayed.
        :paramtype decimal_places: int
        :keyword text_size: The font size of the text being displayed.
        :paramtype text_size: float
        :keyword unit: The unit of size for the text in the tile. Default value is "pt".
        :paramtype unit: str
        :keyword word_wrap: Whether to wrap the text being displayed.
        :paramtype word_wrap: bool
        """
        super().__init__(**kwargs)
        self.abbreviate_value = abbreviate_value
        self.decimal_places = decimal_places
        self.text_size = text_size
        self.unit = unit
        self.word_wrap = word_wrap


class Tile(_serialization.Model):
    """Configuration specifying tile object, including the layout, display name and configuration.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: Display name of the tile. Required.
    :vartype display_name: str
    :ivar configuration: The configuration for the tile. Required.
    :vartype configuration: ~azureiotcentral.models.TileConfiguration
    :ivar height: Height of the tile. Required.
    :vartype height: float
    :ivar width: Width of the tile. Required.
    :vartype width: float
    :ivar x: Horizontal position of the tile. Required.
    :vartype x: float
    :ivar y: Vertical position of the tile. Required.
    :vartype y: float
    """

    _validation = {
        "display_name": {"required": True},
        "configuration": {"required": True},
        "height": {"required": True, "maximum": 10, "minimum": 1},
        "width": {"required": True, "maximum": 10, "minimum": 1},
        "x": {"required": True, "maximum": 100, "minimum": 0},
        "y": {"required": True, "maximum": 100, "minimum": 0},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "configuration": {"key": "configuration", "type": "TileConfiguration"},
        "height": {"key": "height", "type": "float"},
        "width": {"key": "width", "type": "float"},
        "x": {"key": "x", "type": "float"},
        "y": {"key": "y", "type": "float"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        configuration: "_models.TileConfiguration",
        height: float,
        width: float,
        x: float,
        y: float,
        **kwargs
    ):
        """
        :keyword display_name: Display name of the tile. Required.
        :paramtype display_name: str
        :keyword configuration: The configuration for the tile. Required.
        :paramtype configuration: ~azureiotcentral.models.TileConfiguration
        :keyword height: Height of the tile. Required.
        :paramtype height: float
        :keyword width: Width of the tile. Required.
        :paramtype width: float
        :keyword x: Horizontal position of the tile. Required.
        :paramtype x: float
        :keyword y: Vertical position of the tile. Required.
        :paramtype y: float
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.configuration = configuration
        self.height = height
        self.width = width
        self.x = x
        self.y = y


class TileCapability(_serialization.Model):
    """Specifies the capability to be displayed in the tile.

    All required parameters must be populated in order to send to Azure.

    :ivar capability: The path of the capability associated with data to be rendered in the tile.
     Required.
    :vartype capability: str
    :ivar aggregate_function: The aggregate function to apply to the data. Known values are: "sum",
     "count", "max", "min", and "avg".
    :vartype aggregate_function: str or ~azureiotcentral.models.CapabilityAggregateType
    """

    _validation = {
        "capability": {"required": True},
        "aggregate_function": {"required": True},
    }

    _attribute_map = {
        "capability": {"key": "capability", "type": "str"},
        "aggregate_function": {"key": "aggregateFunction", "type": "str"},
    }

    def __init__(
        self, *, capability: str, aggregate_function: Union[str, "_models.CapabilityAggregateType"] = "count", **kwargs
    ):
        """
        :keyword capability: The path of the capability associated with data to be rendered in the
         tile. Required.
        :paramtype capability: str
        :keyword aggregate_function: The aggregate function to apply to the data. Known values are:
         "sum", "count", "max", "min", and "avg".
        :paramtype aggregate_function: str or ~azureiotcentral.models.CapabilityAggregateType
        """
        super().__init__(**kwargs)
        self.capability = capability
        self.aggregate_function = aggregate_function


class TimeQueryRangeConfiguration(QueryRangeConfiguration):
    """Configuration specifying the time range and resolution of data to return for a tile.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of time range - 'count' or 'time'. Required.
    :vartype type: str
    :ivar duration: The time range to use when querying data. Required. Known values are: "PT30M",
     "PT1H", "PT12H", "P1D", "P1W", and "P30D".
    :vartype duration: str or ~azureiotcentral.models.TileTimeRangeDuration
    :ivar resolution: The resolution to aggregate data over. Known values are: "PT1M", "PT5M",
     "PT10M", "PT30M", "PT1H", "PT12H", "P1D", and "P1W".
    :vartype resolution: str or ~azureiotcentral.models.TileTimeRangeResolution
    """

    _validation = {
        "type": {"required": True},
        "duration": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "duration": {"key": "duration", "type": "str"},
        "resolution": {"key": "resolution", "type": "str"},
    }

    def __init__(
        self,
        *,
        duration: Union[str, "_models.TileTimeRangeDuration"],
        resolution: Union[str, "_models.TileTimeRangeResolution"] = "PT5M",
        **kwargs
    ):
        """
        :keyword duration: The time range to use when querying data. Required. Known values are:
         "PT30M", "PT1H", "PT12H", "P1D", "P1W", and "P30D".
        :paramtype duration: str or ~azureiotcentral.models.TileTimeRangeDuration
        :keyword resolution: The resolution to aggregate data over. Known values are: "PT1M", "PT5M",
         "PT10M", "PT30M", "PT1H", "PT12H", "P1D", and "P1W".
        :paramtype resolution: str or ~azureiotcentral.models.TileTimeRangeResolution
        """
        super().__init__(**kwargs)
        self.type = "time"  # type: str
        self.duration = duration
        self.resolution = resolution


class Tpm(_serialization.Model):
    """The trusted platform module definition.

    All required parameters must be populated in order to send to Azure.

    :ivar endorsement_key: The TPM endorsement key for this credential. Required.
    :vartype endorsement_key: str
    """

    _validation = {
        "endorsement_key": {"required": True},
    }

    _attribute_map = {
        "endorsement_key": {"key": "endorsementKey", "type": "str"},
    }

    def __init__(self, *, endorsement_key: str, **kwargs):
        """
        :keyword endorsement_key: The TPM endorsement key for this credential. Required.
        :paramtype endorsement_key: str
        """
        super().__init__(**kwargs)
        self.endorsement_key = endorsement_key


class TpmAttestation(Attestation):
    """The TPM attestation definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the attestation. Required.
    :vartype type: str
    :ivar tpm: The TPM credentials for this attestation. Required.
    :vartype tpm: ~azureiotcentral.models.Tpm
    """

    _validation = {
        "type": {"required": True},
        "tpm": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "tpm": {"key": "tpm", "type": "Tpm"},
    }

    def __init__(self, *, tpm: "_models.Tpm", **kwargs):
        """
        :keyword tpm: The TPM credentials for this attestation. Required.
        :paramtype tpm: ~azureiotcentral.models.Tpm
        """
        super().__init__(**kwargs)
        self.type = "tpm"  # type: str
        self.tpm = tpm


class UserCollection(_serialization.Model):
    """The paged results of users.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The collection of users. Required.
    :vartype value: list[~azureiotcentral.models.User]
    :ivar next_link: URL to get the next page of users.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[User]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.User"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: The collection of users. Required.
        :paramtype value: list[~azureiotcentral.models.User]
        :keyword next_link: URL to get the next page of users.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class WebhookV1Destination(Destination):
    """The webhook destination definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Indication of the current health and operation of the export or destination.
    :vartype status: str
    :ivar errors: Errors encountered by the export or destination.
    :vartype errors: list[~azureiotcentral.models.DataExportError]
    :ivar last_export_time: The timestamp of the last message that was sent to the export or
     destination.
    :vartype last_export_time: ~datetime.datetime
    :ivar id: Unique ID of the destination.
    :vartype id: str
    :ivar display_name: Display name of the destination. Required.
    :vartype display_name: str
    :ivar type: The type of destination configuration. Required.
    :vartype type: str
    :ivar url: The URL to invoke when exporting data. Required.
    :vartype url: str
    :ivar query_customizations: Additional query parameters that should be added to each request.
    :vartype query_customizations: dict[str,
     ~azureiotcentral.models.WebhookV1DestinationCustomization]
    :ivar header_customizations: Additional headers that should be added to each request.
    :vartype header_customizations: dict[str,
     ~azureiotcentral.models.WebhookV1DestinationCustomization]
    :ivar authorization: The authentication definition for webhook destination.
    :vartype authorization: ~azureiotcentral.models.WebhookV1DestinationAuth
    """

    _validation = {
        "status": {"readonly": True},
        "errors": {"readonly": True},
        "last_export_time": {"readonly": True},
        "id": {"readonly": True},
        "display_name": {"required": True},
        "type": {"required": True},
        "url": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "errors": {"key": "errors", "type": "[DataExportError]"},
        "last_export_time": {"key": "lastExportTime", "type": "iso-8601"},
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "url": {"key": "url", "type": "str"},
        "query_customizations": {"key": "queryCustomizations", "type": "{WebhookV1DestinationCustomization}"},
        "header_customizations": {"key": "headerCustomizations", "type": "{WebhookV1DestinationCustomization}"},
        "authorization": {"key": "authorization", "type": "WebhookV1DestinationAuth"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        url: str,
        query_customizations: Optional[Dict[str, "_models.WebhookV1DestinationCustomization"]] = None,
        header_customizations: Optional[Dict[str, "_models.WebhookV1DestinationCustomization"]] = None,
        authorization: Optional["_models.WebhookV1DestinationAuth"] = None,
        **kwargs
    ):
        """
        :keyword display_name: Display name of the destination. Required.
        :paramtype display_name: str
        :keyword url: The URL to invoke when exporting data. Required.
        :paramtype url: str
        :keyword query_customizations: Additional query parameters that should be added to each
         request.
        :paramtype query_customizations: dict[str,
         ~azureiotcentral.models.WebhookV1DestinationCustomization]
        :keyword header_customizations: Additional headers that should be added to each request.
        :paramtype header_customizations: dict[str,
         ~azureiotcentral.models.WebhookV1DestinationCustomization]
        :keyword authorization: The authentication definition for webhook destination.
        :paramtype authorization: ~azureiotcentral.models.WebhookV1DestinationAuth
        """
        super().__init__(display_name=display_name, **kwargs)
        self.type = "webhook@v1"  # type: str
        self.url = url
        self.query_customizations = query_customizations
        self.header_customizations = header_customizations
        self.authorization = authorization


class WebhookV1DestinationAuth(_serialization.Model):
    """The authentication definition for webhook destination.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    WebhookV1DestinationHeaderAuth, WebhookV1DestinationOAuth

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {"type": {"header": "WebhookV1DestinationHeaderAuth", "oauth": "WebhookV1DestinationOAuth"}}

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None  # type: Optional[str]


class WebhookV1DestinationCustomization(_serialization.Model):
    """The customization definition for webhook destination.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The value to use for this webhook customization. Required.
    :vartype value: str
    :ivar secret: Whether to consider the value to be a secret and hide it when retrieving the
     destination configuration.
    :vartype secret: bool
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "str"},
        "secret": {"key": "secret", "type": "bool"},
    }

    def __init__(self, *, value: str, secret: Optional[bool] = None, **kwargs):
        """
        :keyword value: The value to use for this webhook customization. Required.
        :paramtype value: str
        :keyword secret: Whether to consider the value to be a secret and hide it when retrieving the
         destination configuration.
        :paramtype secret: bool
        """
        super().__init__(**kwargs)
        self.value = value
        self.secret = secret


class WebhookV1DestinationHeaderAuth(WebhookV1DestinationAuth):
    """The authentication definition with header for webhook destination.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    :ivar value: Value to use for the Authorization header when making requests. Required.
    :vartype value: str
    """

    _validation = {
        "type": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, value: str, **kwargs):
        """
        :keyword value: Value to use for the Authorization header when making requests. Required.
        :paramtype value: str
        """
        super().__init__(**kwargs)
        self.type = "header"  # type: str
        self.value = value


class WebhookV1DestinationOAuth(WebhookV1DestinationAuth):
    """The authentication definition with OAuth for webhook destination.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The kind of authentication to use. Required.
    :vartype type: str
    :ivar token_url: URL where an access token can be retrieved. Required.
    :vartype token_url: str
    :ivar client_id: OAuth2 client ID used when retrieving the token. Required.
    :vartype client_id: str
    :ivar client_secret: OAuth2 client secret used to retrieve the token. Required.
    :vartype client_secret: str
    :ivar audience: OAuth2 audience.
    :vartype audience: str
    :ivar scope: OAuth2 scope.
    :vartype scope: str
    :ivar request_type: Content-Type for the token request. Known values are: "auto", "json", and
     "urlencoded".
    :vartype request_type: str or ~azureiotcentral.models.OAuthRequestType
    """

    _validation = {
        "type": {"required": True},
        "token_url": {"required": True},
        "client_id": {"required": True},
        "client_secret": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "token_url": {"key": "tokenUrl", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
        "client_secret": {"key": "clientSecret", "type": "str"},
        "audience": {"key": "audience", "type": "str"},
        "scope": {"key": "scope", "type": "str"},
        "request_type": {"key": "requestType", "type": "str"},
    }

    def __init__(
        self,
        *,
        token_url: str,
        client_id: str,
        client_secret: str,
        audience: Optional[str] = None,
        scope: Optional[str] = None,
        request_type: Optional[Union[str, "_models.OAuthRequestType"]] = None,
        **kwargs
    ):
        """
        :keyword token_url: URL where an access token can be retrieved. Required.
        :paramtype token_url: str
        :keyword client_id: OAuth2 client ID used when retrieving the token. Required.
        :paramtype client_id: str
        :keyword client_secret: OAuth2 client secret used to retrieve the token. Required.
        :paramtype client_secret: str
        :keyword audience: OAuth2 audience.
        :paramtype audience: str
        :keyword scope: OAuth2 scope.
        :paramtype scope: str
        :keyword request_type: Content-Type for the token request. Known values are: "auto", "json",
         and "urlencoded".
        :paramtype request_type: str or ~azureiotcentral.models.OAuthRequestType
        """
        super().__init__(**kwargs)
        self.type = "oauth"  # type: str
        self.token_url = token_url
        self.client_id = client_id
        self.client_secret = client_secret
        self.audience = audience
        self.scope = scope
        self.request_type = request_type


class X509(_serialization.Model):
    """The X509 definition.

    :ivar client_certificates: The X.509 client certificates for this credential.
    :vartype client_certificates: ~azureiotcentral.models.X509Certificates
    """

    _attribute_map = {
        "client_certificates": {"key": "clientCertificates", "type": "X509Certificates"},
    }

    def __init__(self, *, client_certificates: Optional["_models.X509Certificates"] = None, **kwargs):
        """
        :keyword client_certificates: The X.509 client certificates for this credential.
        :paramtype client_certificates: ~azureiotcentral.models.X509Certificates
        """
        super().__init__(**kwargs)
        self.client_certificates = client_certificates


class X509Attestation(Attestation):
    """The X509 attestation definition.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the attestation. Required.
    :vartype type: str
    :ivar x509: The X.509 credentials for this attestation. Required.
    :vartype x509: ~azureiotcentral.models.X509
    """

    _validation = {
        "type": {"required": True},
        "x509": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "x509": {"key": "x509", "type": "X509"},
    }

    def __init__(self, *, x509: "_models.X509", **kwargs):
        """
        :keyword x509: The X.509 credentials for this attestation. Required.
        :paramtype x509: ~azureiotcentral.models.X509
        """
        super().__init__(**kwargs)
        self.type = "x509"  # type: str
        self.x509 = x509


class X509Certificate(_serialization.Model):
    """The X509 certificate definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar certificate: The string representation of this certificate.
    :vartype certificate: str
    :ivar info: Information about this certificate.
    :vartype info: ~azureiotcentral.models.X509CertificateInfo
    """

    _validation = {
        "info": {"readonly": True},
    }

    _attribute_map = {
        "certificate": {"key": "certificate", "type": "str"},
        "info": {"key": "info", "type": "X509CertificateInfo"},
    }

    def __init__(self, *, certificate: Optional[str] = None, **kwargs):
        """
        :keyword certificate: The string representation of this certificate.
        :paramtype certificate: str
        """
        super().__init__(**kwargs)
        self.certificate = certificate
        self.info = None


class X509CertificateInfo(_serialization.Model):
    """The X509 certificate info.

    All required parameters must be populated in order to send to Azure.

    :ivar sha1_thumbprint: The SHA-1 hash value of the certificate. Required.
    :vartype sha1_thumbprint: str
    """

    _validation = {
        "sha1_thumbprint": {"required": True},
    }

    _attribute_map = {
        "sha1_thumbprint": {"key": "sha1Thumbprint", "type": "str"},
    }

    def __init__(self, *, sha1_thumbprint: str, **kwargs):
        """
        :keyword sha1_thumbprint: The SHA-1 hash value of the certificate. Required.
        :paramtype sha1_thumbprint: str
        """
        super().__init__(**kwargs)
        self.sha1_thumbprint = sha1_thumbprint


class X509Certificates(_serialization.Model):
    """The X509 certificates definition.

    All required parameters must be populated in order to send to Azure.

    :ivar primary: The primary X.509 certificate for this credential. Required.
    :vartype primary: ~azureiotcentral.models.X509Certificate
    :ivar secondary: The secondary X.509 certificate for this credential.
    :vartype secondary: ~azureiotcentral.models.X509Certificate
    """

    _validation = {
        "primary": {"required": True},
    }

    _attribute_map = {
        "primary": {"key": "primary", "type": "X509Certificate"},
        "secondary": {"key": "secondary", "type": "X509Certificate"},
    }

    def __init__(
        self, *, primary: "_models.X509Certificate", secondary: Optional["_models.X509Certificate"] = None, **kwargs
    ):
        """
        :keyword primary: The primary X.509 certificate for this credential. Required.
        :paramtype primary: ~azureiotcentral.models.X509Certificate
        :keyword secondary: The secondary X.509 certificate for this credential.
        :paramtype secondary: ~azureiotcentral.models.X509Certificate
        """
        super().__init__(**kwargs)
        self.primary = primary
        self.secondary = secondary


class X509VerificationCertificate(_serialization.Model):
    """The X509 verification certificate definition.

    All required parameters must be populated in order to send to Azure.

    :ivar certificate: The string representation of this certificate. Required.
    :vartype certificate: str
    """

    _validation = {
        "certificate": {"required": True},
    }

    _attribute_map = {
        "certificate": {"key": "certificate", "type": "str"},
    }

    def __init__(self, *, certificate: str, **kwargs):
        """
        :keyword certificate: The string representation of this certificate. Required.
        :paramtype certificate: str
        """
        super().__init__(**kwargs)
        self.certificate = certificate


class X509VerificationCode(_serialization.Model):
    """The X509 certificate verification code.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar verification_code: The X509 certificate verification code.
    :vartype verification_code: str
    """

    _validation = {
        "verification_code": {"readonly": True},
    }

    _attribute_map = {
        "verification_code": {"key": "verificationCode", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.verification_code = None
