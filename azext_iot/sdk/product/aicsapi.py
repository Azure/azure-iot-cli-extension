# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError
import uuid
from . import models


class AICSAPIConfiguration(AzureConfiguration):
    """Configuration for AICSAPI
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = 'http://localhost'

        super(AICSAPIConfiguration, self).__init__(base_url)

        self.credentials = credentials


class AICSAPI(SDKClient):
    """AICSAPI

    :ivar config: Configuration for client.
    :vartype config: AICSAPIConfiguration

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        self.config = AICSAPIConfiguration(credentials, base_url)
        super(AICSAPI, self).__init__(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '2020-05-01-preview'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def get_device_certification_requirements(
            self, badge_type=None, custom_headers=None, raw=False, **operation_config):
        """Get certification requirements.

        :param badge_type: Possible values include: 'IotDevice', 'Pnp',
         'IotEdgeCompatible'
        :type badge_type: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.get_device_certification_requirements.metadata['url']

        # Construct parameters
        query_parameters = {}
        if badge_type is not None:
            query_parameters['badgeType'] = self._serialize.query("badge_type", badge_type, 'str')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[DeviceCertificationRequirement]', response)
        if response.status_code == 400:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_device_certification_requirements.metadata = {'url': '/certificationRequirements'}

    def create_device_test(
            self, generate_provisioning_configuration=None, body=None, custom_headers=None, raw=False, **operation_config):
        """Create a new Microsoft.Azure.IoT.TestKit.Models.DeviceTest.

        :param generate_provisioning_configuration: Whether to generate
         ProvisioningConfiguration info from the server,
         it only applies to
         Microsoft.Azure.IoT.TestKit.Shared.Models.Provisioning.ProvisioningType.SymmetricKey
         and
         Microsoft.Azure.IoT.TestKit.Shared.Models.Provisioning.ProvisioningType.ConnectionString
         provisioning type.
        :type generate_provisioning_configuration: bool
        :param body:
        :type body: ~product.models.DeviceTest
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.create_device_test.metadata['url']

        # Construct parameters
        query_parameters = {}
        if generate_provisioning_configuration is not None:
            query_parameters['GenerateProvisioningConfiguration'] = self._serialize.query("generate_provisioning_configuration", generate_provisioning_configuration, 'bool')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'DeviceTest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DeviceTest', response)
        if response.status_code == 400:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_device_test.metadata = {'url': '/deviceTests'}

    def get_device_test(
            self, device_test_id, custom_headers=None, raw=False, **operation_config):
        """Get a DeviceTest by Id.

        :param device_test_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTest to retrieve.
        :type device_test_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.get_device_test.metadata['url']
        path_format_arguments = {
            'deviceTestId': self._serialize.url("device_test_id", device_test_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DeviceTest', response)
        if response.status_code == 400:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_device_test.metadata = {'url': '/deviceTests/{deviceTestId}'}

    def update_device_test(
            self, device_test_id, generate_provisioning_configuration=None, body=None, custom_headers=None, raw=False, **operation_config):
        """Update the DeviceTest with certain Id.

        :param device_test_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTest to retrieve.
        :type device_test_id: str
        :param generate_provisioning_configuration: Whether to generate
         ProvisioningConfiguration info from the server,
         it only applies to
         Microsoft.Azure.IoT.TestKit.Shared.Models.Provisioning.ProvisioningType.SymmetricKey
         and
         Microsoft.Azure.IoT.TestKit.Shared.Models.Provisioning.ProvisioningType.ConnectionString
         provisioning type.
        :type generate_provisioning_configuration: bool
        :param body:
        :type body: ~product.models.DeviceTest
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.update_device_test.metadata['url']
        path_format_arguments = {
            'deviceTestId': self._serialize.url("device_test_id", device_test_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if generate_provisioning_configuration is not None:
            query_parameters['GenerateProvisioningConfiguration'] = self._serialize.query("generate_provisioning_configuration", generate_provisioning_configuration, 'bool')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'DeviceTest')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DeviceTest', response)
        if response.status_code == 400:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    update_device_test.metadata = {'url': '/deviceTests/{deviceTestId}'}

    def search_device_test(
            self, body=None, custom_headers=None, raw=False, **operation_config):
        """Search DeviceTest.

        :param body:
        :type body: ~product.models.DeviceTestSearchOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.search_device_test.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'DeviceTestSearchOptions')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[DeviceTestSearchResult]', response)
        if response.status_code == 400:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    search_device_test.metadata = {'url': '/deviceTests/search'}

    def create_device_test_task(
            self, device_test_id, task_type=None, custom_headers=None, raw=False, **operation_config):
        """Queue a new async
        Microsoft.Azure.IoT.TestKit.Shared.Models.DeviceTestTaskType for a
        DeviceTest.
        The user can only have one running task for a DeviceTest.

        :param device_test_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTest to retrieve.
        :type device_test_id: str
        :param task_type: Possible values include: 'QueueTestRun',
         'GenerateTestCases'
        :type task_type: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        body = None
        if task_type is not None:
            body = models.NewTaskPayload(task_type=task_type)

        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.create_device_test_task.metadata['url']
        path_format_arguments = {
            'deviceTestId': self._serialize.url("device_test_id", device_test_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'NewTaskPayload')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202, 400, 404, 409]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('DeviceTestTask', response)
        if response.status_code == 400:
            deserialized = self._deserialize('object', response)
        if response.status_code == 404:
            deserialized = self._deserialize('object', response)
        if response.status_code == 409:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_device_test_task.metadata = {'url': '/deviceTests/{deviceTestId}/tasks'}

    def cancel_device_test_task(
            self, task_id, device_test_id, custom_headers=None, raw=False, **operation_config):
        """Cancel the running tasks of a DeviceTest.

        :param task_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTestTask to retrieve.
        :type task_id: str
        :param device_test_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTest to retrieve.
        :type device_test_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.cancel_device_test_task.metadata['url']
        path_format_arguments = {
            'taskId': self._serialize.url("task_id", task_id, 'str'),
            'deviceTestId': self._serialize.url("device_test_id", device_test_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202, 400, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 400:
            deserialized = self._deserialize('object', response)
        if response.status_code == 404:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    cancel_device_test_task.metadata = {'url': '/deviceTests/{deviceTestId}/tasks/{taskId}'}

    def get_device_test_task(
            self, task_id, device_test_id, custom_headers=None, raw=False, **operation_config):
        """Get the task status of a DeviceTest.

        :param task_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTestTask to retrieve.
        :type task_id: str
        :param device_test_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTest to retrieve.
        :type device_test_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.get_device_test_task.metadata['url']
        path_format_arguments = {
            'taskId': self._serialize.url("task_id", task_id, 'str'),
            'deviceTestId': self._serialize.url("device_test_id", device_test_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DeviceTestTask', response)
        if response.status_code == 400:
            deserialized = self._deserialize('object', response)
        if response.status_code == 404:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_device_test_task.metadata = {'url': '/deviceTests/{deviceTestId}/tasks/{taskId}'}

    def get_running_device_test_tasks(
            self, device_test_id, custom_headers=None, raw=False, **operation_config):
        """Get the running tasks of a DeviceTest. Current implementation only
        allows one running task.

        :param device_test_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTest to retrieve.
        :type device_test_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.get_running_device_test_tasks.metadata['url']
        path_format_arguments = {
            'deviceTestId': self._serialize.url("device_test_id", device_test_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[DeviceTestTask]', response)
        if response.status_code == 400:
            deserialized = self._deserialize('object', response)
        if response.status_code == 404:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_running_device_test_tasks.metadata = {'url': '/deviceTests/{deviceTestId}/tasks/running'}

    def get_test_cases(
            self, device_test_id, custom_headers=None, raw=False, **operation_config):
        """Get the testcases of a DeviceTest. They are generated through
        Microsoft.Azure.IoT.TestKit.Shared.Models.DeviceTestTaskType.GenerateTestCases
        task.

        :param device_test_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTest to retrieve.
        :type device_test_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.get_test_cases.metadata['url']
        path_format_arguments = {
            'deviceTestId': self._serialize.url("device_test_id", device_test_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TestCases', response)
        if response.status_code == 400:
            deserialized = self._deserialize('object', response)
        if response.status_code == 404:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_test_cases.metadata = {'url': '/deviceTests/{deviceTestId}/TestCases'}

    def update_test_cases(
            self, device_test_id, certification_badge_test_cases=None, custom_headers=None, raw=False, **operation_config):
        """Update the testcases settings of a DeviceTest. The test cases cannot be
        added or removed through this API.

        :param device_test_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTest to retrieve.
        :type device_test_id: str
        :param certification_badge_test_cases:
        :type certification_badge_test_cases: list[object]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        body = None
        if certification_badge_test_cases is not None:
            body = models.TestCases(certification_badge_test_cases=certification_badge_test_cases)

        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.update_test_cases.metadata['url']
        path_format_arguments = {
            'deviceTestId': self._serialize.url("device_test_id", device_test_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'TestCases')
        else:
            body_content = None

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204, 400, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 400:
            deserialized = self._deserialize('object', response)
        if response.status_code == 404:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    update_test_cases.metadata = {'url': '/deviceTests/{deviceTestId}/TestCases'}

    def get_latest_test_run(
            self, device_test_id, custom_headers=None, raw=False, **operation_config):
        """Get the latest test run of the DeviceTest with the deviceTestId.

        :param device_test_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTest to retrieve.
        :type device_test_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.get_latest_test_run.metadata['url']
        path_format_arguments = {
            'deviceTestId': self._serialize.url("device_test_id", device_test_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TestRun', response)
        if response.status_code == 400:
            deserialized = self._deserialize('object', response)
        if response.status_code == 404:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_latest_test_run.metadata = {'url': '/deviceTests/{deviceTestId}/testRuns/latest'}

    def get_test_run(
            self, test_run_id, device_test_id, custom_headers=None, raw=False, **operation_config):
        """Get the test run with testrunId of the DeviceTest with the
        deviceTestId.

        :param test_run_id: The Id of a
         Microsoft.Azure.IoT.TestKit.Models.TestRun.
        :type test_run_id: str
        :param device_test_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTest to retrieve.
        :type device_test_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.get_test_run.metadata['url']
        path_format_arguments = {
            'testRunId': self._serialize.url("test_run_id", test_run_id, 'str'),
            'deviceTestId': self._serialize.url("device_test_id", device_test_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 404]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TestRun', response)
        if response.status_code == 400:
            deserialized = self._deserialize('object', response)
        if response.status_code == 404:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_test_run.metadata = {'url': '/deviceTests/{deviceTestId}/testRuns/{testRunId}'}

    def submit_test_run(
            self, test_run_id, device_test_id, custom_headers=None, raw=False, **operation_config):
        """Submit TestRun to Partner/Product service.

        :param test_run_id: The Id of a
         Microsoft.Azure.IoT.TestKit.Models.TestRun.
        :type test_run_id: str
        :param device_test_id: The Id of the
         Microsoft.Azure.IoT.TestKit.Models.DeviceTest to retrieve.
        :type device_test_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        api_version = "2020-05-01-preview"

        # Construct URL
        url = self.submit_test_run.metadata['url']
        path_format_arguments = {
            'testRunId': self._serialize.url("test_run_id", test_run_id, 'str'),
            'deviceTestId': self._serialize.url("device_test_id", device_test_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204, 400, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 400:
            deserialized = self._deserialize('object', response)
        if response.status_code == 404:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    submit_test_run.metadata = {'url': '/deviceTests/{deviceTestId}/testRuns/{testRunId}/submit'}
