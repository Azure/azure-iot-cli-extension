# coding=utf-8
# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

from knack.util import CLIError
from knack.log import get_logger
from azext_iot.common.utility import find_between
from azext_iot._factory import SdkResolver, CloudError
from azext_iot.common.shared import SdkType
from azext_iot.common.utility import unpack_msrest_error
from azext_iot.common.sas_token_auth import BasicSasTokenAuthentication


logger = get_logger(__name__)


class CentralDeviceTwinProvider:
    def __init__(self, cmd, app_id: str, token: str, device_id: str):
        """
        Provider for devicetwin APIs

        Args:
            cmd: command passed into az
            app_id: name of app (used for forming request URL)
            token: (OPTIONAL) authorization token to fetch device details from IoTC.
                MUST INCLUDE type (e.g. 'SharedAccessToken ...', 'Bearer ...')
                Useful in scenarios where user doesn't own the app
                therefore AAD token won't work, but a SAS token generated by owner will
        """
        self._cmd = cmd
        self._app_id = app_id
        self._token = token
        self._device_id = device_id

    def get_device_twin(self, central_dns_suffix):
        from azext_iot.common._azure import get_iot_central_tokens

        tokens = get_iot_central_tokens(
            self._cmd, self._app_id, self._token, central_dns_suffix
        )

        exception = None

        # The device could be in any hub associated with the given app.
        # We must search through each IoT Hub until device is found.
        for token_group in tokens.values():
            sas_token = token_group["iothubTenantSasToken"]["sasToken"]
            endpoint = find_between(sas_token, "SharedAccessSignature sr=", "&sig=")
            target = {"entity": endpoint}
            auth = BasicSasTokenAuthentication(sas_token=sas_token)
            service_sdk = SdkResolver(target=target, auth_override=auth).get_sdk(SdkType.service_sdk)
            try:
                return service_sdk.devices.get_twin(id=self._device_id, raw=True).response.json()
            except CloudError as e:
                if exception is None:
                    exception = CLIError(unpack_msrest_error(e))

        raise CLIError("Could not get device twin")
