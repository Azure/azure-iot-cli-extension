# coding=utf-8
# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

from knack.log import get_logger

from azext_iot.central.models.v1_1_preview import QueryReponseV1_1_preview
from azext_iot.constants import CENTRAL_ENDPOINT
from azext_iot.central import services as central_services

logger = get_logger(__name__)


class CentralQueryProvider:
    def __init__(self, cmd, app_id: str, query: str, api_version: str, token=None):
        """
        Provider for Query API

        Args:
            cmd: command passed into az
            app_id: name of app (used for forming request URL)
            query: query clause based on IoT Central Query Language
            api_version: API version (appendend to request URL)
            token: (OPTIONAL) authorization token to fetch device details from IoTC.
                MUST INCLUDE type (e.g. 'SharedAccessToken ...', 'Bearer ...')
                Useful in scenarios where user doesn't own the app
                therefore AAD token won't work, but a SAS token generated by owner will
        """
        self._cmd = cmd
        self._app_id = app_id
        self._query = query
        self._token = token
        self._api_version = api_version

    def query_run(
        self, central_dns_suffix=CENTRAL_ENDPOINT
    ) -> QueryReponseV1_1_preview:
        response = central_services.query.query_run(
            cmd=self._cmd,
            app_id=self._app_id,
            query=self._query,
            token=self._token,
            central_dns_suffix=central_dns_suffix,
            api_version=self._api_version,
        )

        return response
