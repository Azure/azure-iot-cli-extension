# coding=utf-8
# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

from knack.util import CLIError
from azext_iot.central import services as central_services
from .device_template_provider import CentralDeviceTemplateProvider


class CentralDeviceProvider:
    def __init__(self, cmd, app_id: str, token=None):
        """
        Provider for device APIs

        Args:
            cmd: command passed into az
            app_id: name of app (used for forming request URL)
            token: (OPTIONAL) authorization token to fetch device details from IoTC.
                MUST INCLUDE type (e.g. 'SharedAccessToken ...', 'Bearer ...')
                Useful in scenarios where user doesn't own the app
                therefore AAD token won't work, but a SAS token generated by owner will
        """
        self._cmd = cmd
        self._app_id = app_id
        self._token = token
        self._devices = {}
        self._device_templates = {}

    def get_device(
        self, device_id, central_dns_suffix="azureiotcentral.com",
    ):
        if not device_id:
            raise CLIError("Device id must be specified.")

        # get or add to cache
        device = self._devices.get(device_id)
        if not device:
            device = central_services.device.get_device(
                cmd=self._cmd,
                app_id=self._app_id,
                device_id=device_id,
                token=self._token,
                central_dns_suffix=central_dns_suffix,
            )
            self._devices[device_id] = device

        if not device:
            raise CLIError("No device found with id: '{}'.".format(device_id))

        return device

    def get_device_template_by_device_id(
        self, device_id, central_dns_suffix="azureiotcentral.com",
    ):
        if not device_id:
            raise CLIError("Device id must be specified.")

        device = self.get_device(device_id, central_dns_suffix)
        instance_of = device.get("instanceOf")
        if not instance_of:
            raise CLIError(
                "Device '{}' does not have a corresponding device template.".format(
                    device_id
                )
            )

        template = CentralDeviceTemplateProvider.get_device_template(
            self=self,
            device_template_id=instance_of,
            central_dns_suffix=central_dns_suffix,
        )
        return template

    def list_devices(
        self, central_dns_suffix="azureiotcentral.com",
    ):
        devices = central_services.device.list_devices(
            cmd=self._cmd, app_id=self._app_id, token=self._token
        )

        # add to cache
        self._devices.update({device["id"]: device for device in devices})

        return self._devices

    def create_device(
        self,
        device_id,
        device_name=None,
        instance_of=None,
        simulated=False,
        central_dns_suffix="azureiotcentral.com",
    ):
        if not device_id:
            raise CLIError("Device id must be specified.")

        if device_id in self._devices:
            raise CLIError("Device already exists")

        device = central_services.device.create_device(
            cmd=self._cmd,
            app_id=self._app_id,
            device_id=device_id,
            device_name=device_name,
            instance_of=instance_of,
            simulated=simulated,
            token=self._token,
            central_dns_suffix=central_dns_suffix,
        )

        if not device:
            raise CLIError("No device found with id: '{}'.".format(device_id))

        # add to cache
        self._devices[device["id"]] = device

        return device

    def delete_device(
        self, device_id, central_dns_suffix="azureiotcentral.com",
    ):
        if not device_id:
            raise CLIError("Device id must be specified.")

        # get or add to cache
        result = central_services.device.delete_device(
            cmd=self._cmd,
            app_id=self._app_id,
            device_id=device_id,
            token=self._token,
            central_dns_suffix=central_dns_suffix,
        )

        # remove from cache
        # pop "miss" raises a KeyError if None is not provided
        self._devices.pop(device_id, None)

        return result
