# coding=utf-8
# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

from knack.util import CLIError
from azext_iot.constants import CENTRAL_ENDPOINT
from azext_iot.central import services as central_services
from azext_iot.central.iot_central_api_preview import IotCentralApiPreview
from azext_iot.central.services import _utility

class CentralDeviceTemplateProviderPreview:
    def __init__(self, cmd, app_id, token=None):
        """
        Provider for device_template APIs

        Args:
            cmd: command passed into az
            app_id: name of app (used for forming request URL)
            token: (OPTIONAL) authorization token to fetch device details from IoTC.
                MUST INCLUDE type (e.g. 'SharedAccessToken ...', 'Bearer ...')
                Useful in scenarios where user doesn't own the app
                therefore AAD token won't work, but a SAS token generated by owner will
        """
        self._cmd = cmd
        self._app_id = app_id
        self._token = token
        self._device_templates = {}

    def get_device_template(
        self, device_template_id, central_dns_suffix=CENTRAL_ENDPOINT,
    ):
        token = _utility.get_token_credential(self._cmd)
        apiClient = IotCentralApiPreview(token, self._app_id, central_dns_suffix)

        device_template = apiClient.device_templates.get(device_template_id)

        if not device_template:
            raise CLIError(
                "No device template for device template with id: '{}'.".format(
                    device_template_id
                )
            )

        return device_template

    def create_device_template(
        self,
        device_template_id: str,
        payload: str,
        central_dns_suffix=CENTRAL_ENDPOINT,
    ):
        token = _utility.get_token_credential(self._cmd)
        apiClient = IotCentralApiPreview(token, self._app_id, central_dns_suffix)

        return apiClient.device_templates.set(device_template_id, payload);


    def delete_device_template(
        self, device_template_id, central_dns_suffix=CENTRAL_ENDPOINT,
    ):
        if not device_template_id:
            raise CLIError("Device template id must be specified.")

        token = _utility.get_token_credential(self._cmd)
        apiClient = IotCentralApiPreview(token, self._app_id, central_dns_suffix)

        return apiClient.device_templates.remove(device_template_id)