{
    "tool": "Credential Scanner",
    "suppressions": [
        {
            "file": "azext_iot\\operations\\_mqtt.py",
            "placeholder": "password=sas",
            "_justification": "Client device simulation requires a SAS key extracted from IoT Hub to be passed in MQTT lib."
        },
        {
            "file": "azext_iot\\tests\\iothub\\test_iothub_discovery_unit.py",
            "placeholder": "SharedAccessKey=AB+c/+5nm2XpDXcffhnGhnxz/TVF4m5ag7AuVIGwchj=",
            "_justification": "Completely made up IoT Hub policy key for unit test."
        },
        {
            "file": "azext_iot\\tests\\iothub\\configurations\\test_edge_deployment.json",
            "_justification": "Completely made up deployment with fake container registry creds."
        },
        {
            "file": "azext_iot\\tests\\conftest.py",
            "_justification": "Completely made up keys for unit tests."
        },
        {
            "file": "azext_iot\\tests\\test_iot_dps_int.py",
            "placeholder": "cT/EXZvsplPEpT//p98Pc6sKh8mY3kYgSxavHwMkl7w=",
            "_justification": "Ensure made up endorsement key evaluates to the expected device key."
        },
        {
            "file": "azext_iot\\tests\\test_iot_dps_unit.py",
            "_justification": "Completely made up keys for unit tests."
        },
        {
            "file": "azext_iot\\tests\\test_iot_ext_unit.py",
            "placeholder": "+XLy+MVZ+aTeOnVzN2kLeB16O+kSxmz6g3rS6fAf6rw=",
            "_justification": "Ensure made up policy key generates the proper SAS token."
        }
    ]
}