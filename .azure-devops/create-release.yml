# Copyright (c) Microsoft Corporation. All rights reserved.

pr: none
trigger: none

parameters:
- name: variableGroup
  type: string
  default: 'aziotcli_test_primary'
- name: buildAgentPoolVar
  type: string
  default: 'BuildAgentPool'
- name: buildAgentVmImageVar
  type: string
  default: 'BuildAgentVmImage'
- name: testAgentVmImage
  type: string
  default: 'ubuntu-18.04'
  values:
  - 'ubuntu-18.04'
  - 'ubuntu-latest'
- name: pythonVersion
  displayName: 'Python version for building wheel, KPIs'
  type: string
  default: '3.8.x'
  values:
  - '3.6.x'
  - '3.8.x'
  - '3.9.x'
- name: pythonVersionsTestingMatrix
  type: object
  default: >
    {
      Python36:
      {
        python: '3.6.x'
      },
      Python38:
      {
        python: '3.8.x'
      },
      Python39:
      {
        python: '3.9.x'
      },
      Python310:
      {
        python: '3.10.x'
      }
    }
- name: stageForPublish
  type: boolean
  default: false
- name: architecture
  type: string
  default: 'x64'
- name: 'testCentral'
  type: boolean
  default: true
- name: 'testADT'
  type: boolean
  default: true
- name: 'testDPS'
  type: boolean
  default: true
- name: 'testHub'
  type: boolean
  default: true

variables:
  - group: ${{ parameters.variableGroup }}
  - name: vmImage
    value: $[variables.${{ parameters.buildAgentVmImageVar }}]
  - name: buildPool
    value: $[variables.${{ parameters.buildAgentPoolVar }}]

stages:
  - stage: 'build'
    displayName: 'Build and Publish Artifacts'
    jobs:

    - job: 'Build_Publish_Azure_IoT_CLI_Extension'
      pool:
        name: $(buildPool)
        vmImage: $(vmImage)
        demands:
        - ImageOverride -equals $(vmImage)
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/setup-ci-machine.yml

      - template: templates/build-publish-azure-iot-cli-extension.yml

    - job: 'Build_Publish_Azure_CLI_Test_SDK'
      pool:
        vmImage: ${{ parameters.testAgentVmImage }}

      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/setup-ci-machine.yml

      - template: templates/build-publish-azure-cli-test-sdk.yml

    - job: 'recordVersion'
      displayName: 'Install and verify version'
      dependsOn: [Build_Publish_Azure_IoT_CLI_Extension, Build_Publish_Azure_CLI_Test_SDK]
      steps:
      - template: templates/setup-dev-test-env.yml
        parameters:
          pythonVersion: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/install-and-record-version.yml

  - stage: 'test'
    displayName: 'Run tests'
    dependsOn: build
    variables:
      pythonVersions: ${{ parameters.pythonVersionsTestingMatrix }}
    condition: succeeded()
    pool:
      vmImage: ${{ parameters.testAgentVmImage }}
    jobs:
    - template: templates/trigger-tests.yml
      parameters:
        testADT: ${{ parameters.testADT }}
        testCentral: ${{ parameters.testCentral }}
        testDPS: ${{ parameters.testDPS }}
        testHub: ${{ parameters.testHub }}
        maxParallelADT: 2
        maxParallelDPS: 2
        maxParallelHub: 2
    - job: 'evaluateCmdTable'
      displayName: 'Evaluate Command Table'
      steps:
      - template: templates/evaluate-command-table.yml

  - stage: 'smokeTest'
    displayName: 'Run smoke tests'
    dependsOn: test
    variables:
      pythonVersions: ${{ parameters.pythonVersionsTestingMatrix }}
    condition: succeeded()
    pool:
      vmImage: ${{ parameters.testAgentVmImage }}
    jobs:
    - template: templates/smoke-tests.yml
      parameters:
        azureCLIVersion: released

  - stage: 'kpi'
    displayName: 'Build KPIs'
    dependsOn: [build, test]
    jobs:
    - job: 'calculateCodeCoverage'
      displayName: 'Calculate distributed code coverage'
      steps:
      - template: templates/calculate-code-coverage.yml
        parameters:
          pythonVersion: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

  - stage: 'release'
    displayName: 'Stage GitHub release'
    dependsOn: build
    condition: and(succeeded(), eq(${{ parameters.stageForPublish }}, 'true'))
    jobs:
    - deployment: 'StageGitHub'
      displayName: 'Stage CLI extension on GitHub'
      environment: 'production'

    - job: 'Calculate_Sha_And_Create_Release'
      displayName: 'Calculate package hash and publish'
      pool:
        name: $(buildPool)
        vmImage: $(vmImage)
        demands:
        - ImageOverride -equals $(vmImage)
      variables:
        CLIVersion: $[ stageDependencies.build.recordVersion.outputs['setupVersion.CLIVersion'] ]
        ReleaseTitle: $[ stageDependencies.build.recordVersion.outputs['setupVersion.ReleaseTitle'] ]

      steps:
      - task: DownloadBuildArtifacts@0
        displayName : 'Download Extension wheel from Build Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'azure-iot'
          downloadPath: '$(System.ArtifactsDirectory)/extension'

      - task: PowerShell@2
        displayName: 'Calculate sha for downloaded extension'
        inputs:
          targetType: 'inline'
          script: |
            $extensions = Get-ChildItem -Filter "*.whl" -Recurse | Select-Object FullName
            Foreach ($extension in $extensions)
            {
                Write-Host "calculating sha256 for " $extension.FullName
                (Get-Filehash -Path $extension.Fullname -Algorithm SHA256).Hash.ToLower()
            }
            Write-Host "done"
          workingDirectory: '$(System.ArtifactsDirectory)/extension'

      - task: GitHubRelease@1
        inputs:
          gitHubConnection: $(GithubReleaseConnection)
          repositoryName: $(Build.Repository.Name)
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: userSpecifiedTag
          tag: 'v$(CLIVersion)'
          title: $(ReleaseTitle)
          assets: '$(System.ArtifactsDirectory)/extension/**/*.whl'
          assetUploadMode: 'replace'
          isDraft: true
          isPreRelease: false
          addChangeLog: false