# Copyright (c) Microsoft Corporation. All rights reserved.

pr: none
trigger: none

parameters:
- name: variableGroup
  type: string
  default: 'aziotcli_test_primary'
- name: vmImage
  type: string
  default: 'ubuntu-18.04'
  values:
  - 'ubuntu-18.04'
  - 'ubuntu-latest'
- name: pythonVersion
  displayName: 'Python version for building wheel, KPIs'
  type: string
  default: '3.8.x'
  values:
  - '3.6.x'
  - '3.8.x'
  - '3.9.x'
- name: pythonVersionsForTesting
  type: object
  default:
  - '3.6.x'
  - '3.8.x'
  - '3.9.x'
  - '3.10.x'
- name: architecture
  type: string
  default: 'x64'
- name: 'testCentral'
  type: boolean
  default: true
- name: 'testADT'
  type: boolean
  default: true
- name: 'testDPS'
  type: boolean
  default: true
- name: 'testHub'
  type: boolean
  default: true

variables:
  - group: ${{ parameters.variableGroup }}

stages:
  - stage: 'build'
    displayName: 'Build and Publish Artifacts'
    jobs:

    - job: 'Build_Publish_Azure_IoT_CLI_Extension'
      pool:
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/setup-ci-machine.yml

      - template: templates/build-publish-azure-iot-cli-extension.yml

    - job: 'Build_Publish_Azure_CLI_Test_SDK'
      pool:
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/setup-ci-machine.yml

      - template: templates/build-publish-azure-cli-test-sdk.yml

    - job: 'recordVersion'
      displayName: 'Install and verify version'
      dependsOn: [Build_Publish_Azure_IoT_CLI_Extension, Build_Publish_Azure_CLI_Test_SDK]
      steps:
      - template: templates/setup-dev-test-env.yml
        parameters:
          pythonVersion: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/install-and-record-version.yml

  - ${{ each python_version in parameters.pythonVersionsForTesting }}:
    - stage: 'test_python_version_${{replace(python_version,.,_)}}'
      displayName: 'Run tests on python ${{python_version}}'
      pool:
        vmImage: ${{ parameters.vmImage }}
      dependsOn: build
      jobs:
      - job: 'testCentral_${{python_version}}'
        displayName: 'Test IoT Central'
        condition: and(succeeded(), eq('${{ parameters.testCentral }}', true))
        steps:
        - template: templates/run-tests-parallel.yml
          parameters:
            path: 'azext_iot/tests/central'
            name: 'iot-central'
            pythonVersion: ${{ python_version }}
      
      - job: 'testADT_${{python_version}}'
        displayName: 'Test Azure DigitalTwins'
        condition: and(succeeded(), eq('${{ parameters.testADT }}', true))
        steps:
        - template: templates/run-tests-parallel.yml
          parameters:
            path: 'azext_iot/tests/digitaltwins'
            name: 'azure-digitaltwins'
            pythonVersion: ${{ python_version }}

      - job: 'testDPS_${{python_version}}'
        displayName: 'Test DPS'
        condition: and(succeeded(), eq('${{ parameters.testDPS }}', true))
        steps:
        - template: templates/run-tests-parallel.yml
          parameters:
            path: 'azext_iot/tests/dps'
            name: 'device-provisioning-service'
            pythonVersion: ${{ python_version }}
      
      - job: 'testHub_job_1_${{python_version}}'
        displayName: 'Test IoT Hub - config, core and jobs'
        condition: and(succeeded(), eq('${{ parameters.testHub }}', true))
        steps:
        - template: templates/run-tests-parallel.yml
          parameters:
            path: 'azext_iot/tests/iothub/configurations azext_iot/tests/iothub/core azext_iot/tests/iothub/jobs'
            name: 'iot-hub-1'
            pythonVersion: ${{ python_version }}
      
      - job: 'testHub_job_2_${{python_version}}'
        displayName: 'Test IoT Hub - devices, messaging and modules'
        condition: and(succeeded(), eq('${{ parameters.testHub }}', true))
        steps:
        - template: templates/run-tests-parallel.yml
          parameters:
            path: 'azext_iot/tests/iothub/devices azext_iot/tests/iothub/messaging azext_iot/tests/iothub/modules'
            name: 'iot-hub-2'
            pythonVersion: ${{ python_version }}

      - job: 'unitTests_${{python_version}}'
        displayName: 'Unit tests and code coverage'
        steps:
        - template: templates/run-tests-parallel.yml
          parameters:
            runIntTests: 'false'
            runUnitTests: 'true'
            pythonVersion: ${{ python_version }}

  - stage: 'kpi'
    displayName: 'Build KPIs'
    dependsOn: [build, test]
    jobs:
    - job: 'calculateCodeCoverage'
      displayName: 'Calculate distributed code coverage'
      steps:
      - template: templates/calculate-code-coverage.yml
        parameters:
          pythonVersion: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

  - stage: 'release'
    displayName: 'Stage GitHub release'
    dependsOn: [build, test]
    condition: and(succeeded(), eq(variables.OfficialBuild, 'true'))
    jobs:
    - deployment: 'StageGitHub'
      displayName: 'Stage CLI extension on GitHub'
      environment: 'production'

    - job: 'Calculate_Sha_And_Create_Release'
      pool:
        vmImage: 'windows-2019'
      variables:
        CLIVersion: $[ stageDependencies.build.recordVersion.outputs['setupVersion.CLIVersion'] ]
        ReleaseTitle: $[ stageDependencies.build.recordVersion.outputs['setupVersion.ReleaseTitle'] ]

      steps:
      - task: DownloadBuildArtifacts@0
        displayName : 'Download Extension wheel from Build Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'azure-iot'
          downloadPath: '$(System.ArtifactsDirectory)/extension'

      - task: PowerShell@2
        displayName: 'Calculate sha for downloaded extension'
        inputs:
          targetType: 'inline'
          script: |
            $extensions = Get-ChildItem -Filter "*.whl" -Recurse | Select-Object FullName
            Foreach ($extension in $extensions)
            {
                Write-Host "calculating sha256 for " $extension.FullName   
                (Get-Filehash -Path $extension.Fullname -Algorithm SHA256).Hash.ToLower()
            }
            Write-Host "done"
          workingDirectory: '$(System.ArtifactsDirectory)/extension'

      - task: GitHubRelease@1
        inputs:
          gitHubConnection: $(GithubReleaseConnection)
          repositoryName: $(Build.Repository.Name)
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: userSpecifiedTag
          tag: 'v$(CLIVersion)'
          title: $(ReleaseTitle)
          assets: '$(System.ArtifactsDirectory)/extension/**/*.whl' 
          assetUploadMode: 'replace'
          isDraft: true
          isPreRelease: false
          addChangeLog: false
