pr: none

trigger: none

parameters:
- name: pythonVersion
  type: string
  default: '3.6.x'
  values:
  - 3.6.x
  - 3.9.x
- name: architecture
  type: string
  default: 'x64'
- name: 'testCentral'
  type: boolean
  default: true
- name: 'testADT'
  type: boolean
  default: true
- name: 'testDPS'
  type: boolean
  default: true
- name: 'testHub'
  type: boolean
  default: true

stages:
  - stage: 'build'
    displayName: 'Build and Publish Artifacts'
    jobs:

    - job: 'Build_Publish_Azure_IoT_CLI_Extension'
      pool:
        vmImage: 'ubuntu-latest'

      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/setup-ci-machine.yml

      - template: templates/build-publish-azure-iot-cli-extension.yml

    - job: 'Build_Publish_Azure_CLI_Test_SDK'
      pool:
        vmImage: 'ubuntu-latest'

      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/setup-ci-machine.yml

      - template: templates/build-publish-azure-cli-test-sdk.yml

    - job: 'recordVersion'
      displayName: 'Install and verify version'
      dependsOn: [Build_Publish_Azure_IoT_CLI_Extension, Build_Publish_Azure_CLI_Test_SDK]
      steps:
      - template: templates/setup-dev-test-env.yml
        parameters:
          pythonVersion: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/install-and-record-version.yml

  - stage: 'test'
    displayName: 'Run tests'
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: build
    jobs:
    - job: 'testCentral'
      displayName: 'Test IoT Central'
      condition: eq('${{ parameters.testCentral }}', true)
      steps:
      - template: templates/run-tests.yml
        parameters:
          path: 'azext_iot/tests/central'
          name: 'iot-central'
    
    - job: 'testADT'
      displayName: 'Test Azure DigitalTwins'
      condition: eq('${{ parameters.testADT }}', true)
      steps:
      - template: templates/run-tests.yml
        parameters:
          path: 'azext_iot/tests/digitaltwins'
          name: 'azure-digitaltwins'

    - job: 'testDPS'
      displayName: 'Test DPS'
      condition: eq('${{ parameters.testDPS }}', true)
      steps:
      - template: templates/run-tests.yml
        parameters:
          path: 'azext_iot/tests/dps'
          name: 'device-provisioning-service'
    
    - job: 'testHub'
      displayName: 'Test IoT Hub'
      condition: eq('${{ parameters.testHub }}', true)
      steps:
      - template: templates/run-tests.yml
        parameters:
          path: 'azext_iot/tests/iothub'
          name: 'iot-hub'

    - job: 'unitTests'
      displayName: 'Unit tests and code coverage'
      steps:
      - template: templates/run-tests.yml
        parameters:
          runIntTests: 'false'
          runUnitTests: 'true'

  - stage: 'kpi'
    displayName: 'Build KPIs'
    dependsOn: [build, test]
    jobs:
    - job: 'calculateCodeCoverage'
      displayName: 'Calculate distributed code coverage'
      steps:
      - template: templates/calculate-code-coverage.yml
        parameters:
          pythonVersion: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

  - stage: 'release'
    displayName: 'Stage GitHub release'
    dependsOn: [build, test]
    jobs:
    - deployment: 'StageGitHub'
      displayName: 'Stage CLI extension on GitHub'
      environment: 'production'

    - job: 'Calculate_Sha_And_Create_Release'
      pool:
        vmImage: 'vs2017-win2016'
      variables:
        CLIVersion: $[ stageDependencies.build.recordVersion.outputs['setupVersion.CLIVersion'] ]
        ReleaseTitle: $[ stageDependencies.build.recordVersion.outputs['setupVersion.ReleaseTitle'] ]

      steps:
      - task: DownloadBuildArtifacts@0
        displayName : 'Download Extension wheel from Build Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'azure-iot'
          downloadPath: '$(System.ArtifactsDirectory)/extension'

      - task: PowerShell@2
        displayName: 'Calculate sha for downloaded extension'
        inputs:
          targetType: 'inline'
          script: |
            $extensions = Get-ChildItem -Filter "*.whl" -Recurse | Select-Object FullName
            Foreach ($extension in $extensions)
            {
                Write-Host "calculating sha256 for " $extension.FullName   
                (Get-Filehash -Path $extension.Fullname -Algorithm SHA256).Hash.ToLower()
            }
            Write-Host "done"
          workingDirectory: '$(System.ArtifactsDirectory)/extension'

      - task: GitHubRelease@0
        inputs:
          gitHubConnection: $(GithubReleaseConnection)
          repositoryName: $(Build.Repository.Name)
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: manual
          tag: 'v$(CLIVersion)'
          title: $(ReleaseTitle)
          assets: '$(System.ArtifactsDirectory)/extension/**/*.whl' 
          assetUploadMode: 'replace'
          isDraft: true
          isPreRelease: false
          addChangeLog: false
