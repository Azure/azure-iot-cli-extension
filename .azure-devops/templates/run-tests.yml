parameters:
  pythonVersion: '3.6.x'
  architecture: 'x64'
  runUnitTests: 'false'
  runIntTests: 'true'
  runWithAzureCliReleased: 'true'
  path: 'azext_iot/tests'
  name: 'all'

steps:
  - template: setup-dev-test-env.yml
    parameters:
      architecture: ${{ parameters.architecture }}
      pythonVersion: ${{ parameters.pythonVersion }}
      runWithAzureCliReleased: ${{ parameters.runWithAzureCliReleased }}

  - template: set-testenv-sentinel.yml

  - ${{ if eq(parameters.runIntTests, 'true') }}:
    - task: AzureCLI@2
      displayName: '${{ parameters.name }} integration tests'
      inputs:
        azureSubscription: AzIoTCLIService
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          export COVERAGE_FILE=.coverage.${{ parameters.name }}
          pytest -vv ${{ parameters.path }} -k "_int" --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-int-${{ parameters.name }}.xml

  - ${{ if eq(parameters.runUnitTests, 'true') }}:
    - script: |
        pytest -vv ${{ parameters.path }} -k "_unit" --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-unit-${{ parameters.name }}.xml
      displayName: '${{ parameters.name }} unit tests'
      env:
        COVERAGE_FILE: .coverage.${{ parameters.name }}

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: .coverage.${{ parameters.name }}
      publishLocation: 'Container' 
      artifactName: 'coverage'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish ${{ parameters.name }} test results for Python ${{ parameters.pythonVersion }} on OS $(Agent.OS)'
      searchFolder: '$(System.DefaultWorkingDirectory)'
