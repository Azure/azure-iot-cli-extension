parameters:
  pythonVersion: ''
  runUnitTestsOnly: 'true'
  runWithAzureCliReleased: 'false'

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: ${{ parameters.pythonVersion }}
      architecture: 'x64'

  - ${{ if eq(parameters.runWithAzureCliReleased, 'false') }}:
    - template: install-azure-cli-edge.yml

  - ${{ if eq(parameters.runWithAzureCliReleased, 'true') }}:
    - template: install-azure-cli-released.yml

  - template: download-install-local-azure-test-sdk.yml

  - template: setup-ci-machine.yml

  - template: download-install-local-azure-iot-cli-extension.yml

  - template: set-pythonpath.yml

  - template: set-testenv-sentinel.yml

  - ${{ if eq(parameters.runUnitTestsOnly, 'false') }}:

    - task: AzureCLI@2
      displayName: 'Execute full IoT extension test run'
      inputs:
        azureSubscription: AzIoTCLIService
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: pytest -vv -r azext_iot/tests/ --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-full-results.xml --cov-report=xml

  - ${{ if eq(parameters.runUnitTestsOnly, 'true') }}:

    - script: pytest -vv -r azext_iot/tests/ -k "_unit" --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-unit-results.xml --cov-report=xml
      displayName: 'Execute IoT extension unit tests'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/htmlcov'
      additionalCodeCoverageFiles: '$(System.DefaultWorkingDirectory)/htmlcov/**/*.*'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python ${{ parameters.pythonVersion }} on OS $(Agent.OS)'
      searchFolder: '$(System.DefaultWorkingDirectory)'
