parameters:
- name: pythonVersion
  type: string
  default: '3.8.x'
- name: architecture
  type: string
  default: 'x64'
- name: azureCLIVersion
  type: string
  default: released
  values:
  - min
  - released
  - msi
- name: azureSubscription
  type: string
  default: 'aziotcli-sp-prime'
- name: 'testCentral'
  type: boolean
  default: true
- name: 'testADT'
  type: boolean
  default: true
- name: 'testDPS'
  type: boolean
  default: true
- name: 'testHub'
  type: boolean
  default: true
- name: 'testOnPython3_6'
  type: boolean
  default: true
- name: 'testOnPython3_8'
  type: boolean
  default: true
- name: 'testOnPython3_9'
  type: boolean
  default: true
- name: 'testOnPython3_10'
  type: boolean
  default: true

jobs:

- job: 'createTestStrategy'
  displayName: 'Create Test Strategy'
  steps:
  - task: PythonScript@0
    displayName: 'Create Python Versions Matrix'
    inputs:
      scriptSource: 'inline'
      script: |
        matrix = { Python3_6: { python: '3.6.x' } }
        print("##vso[task.setvariable variable=pythonVersionsMatrix;isOutput=true]"+matrix)

- job: 'testCentral'
  displayName: 'Test IoT Central'
  dependsOn: ['createTestStrategy']
  condition: and(succeeded(), eq('${{ parameters.testCentral }}', true))
  strategy:
    matrix: $[ dependencies.createTestStrategy.outputs['pythonVersionsMatrix'] ]
    maxParallel: 2
  steps:
  - template: run-tests-parallel.yml
    parameters:
      path: 'azext_iot/tests/central'
      name: 'iot-central'
      azureCLIVersion: ${{ parameters.azureCLIVersion }}
      pythonVersion: $(python)

- job: 'testADT'
  displayName: 'Test Azure DigitalTwins'
  condition: and(succeeded(), eq('${{ parameters.testADT }}', true))
  steps:
  - template: run-tests-parallel.yml
    parameters:
      path: 'azext_iot/tests/digitaltwins'
      name: 'azure-digitaltwins'
      azureCLIVersion: ${{ parameters.azureCLIVersion }}
      pythonVersion: ${{ parameters.pythonVersion }}

- job: 'testDPS'
  displayName: 'Test DPS'
  condition: and(succeeded(), eq('${{ parameters.testDPS }}', true))
  steps:
  - template: run-tests-parallel.yml
    parameters:
      path: 'azext_iot/tests/dps'
      name: 'device-provisioning-service'
      azureCLIVersion: ${{ parameters.azureCLIVersion }}
      pythonVersion: ${{ parameters.pythonVersion }}

- job: 'testHub_job_1'
  displayName: 'Test IoT Hub - config, core and jobs'
  condition: and(succeeded(), eq('${{ parameters.testHub }}', true))
  steps:
  - template: run-tests-parallel.yml
    parameters:
      path: 'azext_iot/tests/iothub/configurations azext_iot/tests/iothub/core azext_iot/tests/iothub/jobs'
      name: 'iot-hub-1'
      azureCLIVersion: ${{ parameters.azureCLIVersion }}
      pythonVersion: ${{ parameters.pythonVersion }}

- job: 'testHub_job_2'
  condition: and(succeeded(), eq('${{ parameters.testHub }}', true))
  displayName: 'Test IoT Hub - devices, messaging and modules'
  steps:
  - template: run-tests-parallel.yml
    parameters:
      path: 'azext_iot/tests/iothub/devices azext_iot/tests/iothub/messaging azext_iot/tests/iothub/modules'
      name: 'iot-hub-2'
      azureCLIVersion: ${{ parameters.azureCLIVersion }}
      pythonVersion: ${{ parameters.pythonVersion }}

- job: 'unitTests'
  displayName: 'Unit tests and code coverage'
  steps:
  - template: run-tests-parallel.yml
    parameters:
      azureCLIVersion: ${{ parameters.azureCLIVersion }}
      runIntTests: 'false'
      runUnitTests: 'true'
      pythonVersion: ${{ parameters.pythonVersion }}
