parameters:
- name: pythonVersion
  type: string
  default: '3.6.x'
- name: architecture
  type: string
  default: 'x64'
- name: runUnitTests
  type: boolean
  default: false
- name: runIntTests
  type: boolean
  default: true
- name: azureCLIVersion
  type: string
  default: released
  values:
  - min
  - released
  - edge
- name: path
  type: string
  default: 'azext_iot/tests'
- name: name
  type: string
  default: 'all'
- name: num_threads
  type: number
  default: 6
- name: num_iothub_threads
  type: number
  default: 6
- name: num_reruns
  type: number
  default: 2
- name: reruns_delay
  type: number
  default: 60
- name: parallel_execution_dirs
  type: object
  default:
  - 'azext_iot/tests/central'
  - 'azext_iot/tests/digitaltwins'
- name: serial_execution_dirs
  type: object
  default:
  - 'azext_iot/tests/dps'

steps:
  - template: setup-dev-test-env.yml
    parameters:
      architecture: ${{ parameters.architecture }}
      pythonVersion: ${{ parameters.pythonVersion }}
      azureCLIVersion: ${{ parameters.azureCLIVersion }}

  - template: set-testenv-sentinel.yml

  - ${{ if eq(parameters.runUnitTests, 'true') }}:
    - script: |
        pytest -vv ${{ parameters.path }} -k "_unit.py" --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-unit-${{ parameters.name }}.xml
      displayName: '${{ parameters.name }} unit tests'
      env:
        COVERAGE_FILE: .coverage.${{ parameters.name }}

  - ${{ if eq(parameters.runIntTests, 'true') }}:
    - task: AzureCLI@2
      continueOnError: true
      displayName: '${{ parameters.name }} integration tests'
      inputs:
        azureSubscription: az_cli_nightly_conn
        scriptType: bash
        scriptLocation: inlineScript
        ${{ if containsValue(parameters.serial_execution_dirs, parameters.path) }}:
          inlineScript: |
            export COVERAGE_FILE=.coverage.${{ parameters.name }}
            pytest -vv ${{ parameters.path }} -k "_int.py" --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-int.xml
        ${{ if containsValue(parameters.parallel_execution_dirs, parameters.path) }}:
          inlineScript: |
            export COVERAGE_FILE=.coverage.${{ parameters.name }}
            pytest -vv ${{ parameters.path }} -k "_int.py" --dist=loadfile -n ${{ parameters.num_threads }} --reruns ${{ parameters.num_reruns }} --reruns-delay ${{ parameters.reruns_delay }} --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-int.xml        
        ${{ if contains(parameters.path, 'azext_iot/tests/iothub') }}:
          inlineScript: |
            export COVERAGE_FILE=.coverage.${{ parameters.name }}
            pytest -vv ${{ parameters.path }} -k "_int.py" --dist=loadfile -n ${{ parameters.num_iothub_threads }} --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-int.xml --deselect=azext_iot/tests/iothub/core/test_iothub_discovery_int.py::TestIoTHubDiscovery::test_iothub_targets
            pytest --last-failed --last-failed-no-failures none --dist=loadfile -n ${{ parameters.num_iothub_threads }}

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: .coverage.${{ parameters.name }}
      publishLocation: 'Container' 
      artifactName: 'coverage'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish ${{ parameters.name }} test results for Python ${{ parameters.pythonVersion }} on OS $(Agent.OS)'
      searchFolder: '$(System.DefaultWorkingDirectory)' 