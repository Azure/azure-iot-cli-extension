parameters:
- name: pythonVersion
  type: string
  default: '3.8.x'
- name: architecture
  type: string
  default: 'x64'
- name: runUnitTests
  type: boolean
  default: false
- name: runIntTests
  type: boolean
  default: true
- name: azureCLIVersion
  type: string
  default: released
  values:
  - min
  - released
  - msi
- name: path
  type: string
  default: 'azext_iot/tests'
- name: name
  type: string
  default: 'all'
- name: serviceConnection
  type: string
  default: ''
- name: num_threads
  type: number
  default: 6
- name: num_reruns
  type: number
  default: 2
- name: reruns_delay
  type: number
  default: 60
- name: parallel_execution_dirs
  type: object
  default:
  - 'azext_iot/tests/central'
  - 'azext_iot/tests/digitaltwins'
  - 'azext_iot/tests/deviceupdate'

steps:
  - checkout: self
    displayName: 'Checkout repository and submodules needed for tests'
    submodules: true

  - template: setup-dev-test-env.yml
    parameters:
      architecture: ${{ parameters.architecture }}
      pythonVersion: ${{ parameters.pythonVersion }}
      azureCLIVersion: ${{ parameters.azureCLIVersion }}

  - template: set-testenv-sentinel.yml

  # Fix for DNS resolution issues: https://github.com/actions/virtual-environments/issues/798
  - script: |
      sudo ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
    displayName: Bypass local DNS server to workaround issue resolving ADT hostnames
    condition: and(succeededOrFailed(), eq( variables['Agent.OS'], 'Linux' ))

  - ${{ if eq(parameters.runUnitTests, 'true') }}:
    - script: |
        pytest -vv ${{ parameters.path }} -k "_unit.py" --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-unit-${{ parameters.name }}.xml
      displayName: '${{ parameters.name }} unit tests'
      env:
        COVERAGE_FILE: .coverage.${{ parameters.name }}

  - ${{ if eq(parameters.runIntTests, 'true') }}:
    - task: AzureCLI@2
      continueOnError: true
      displayName: '${{ parameters.name }} integration tests'
      inputs:
        azureSubscription: ${{ parameters.serviceConnection }}
        scriptType: bash
        scriptLocation: inlineScript
        ${{ if containsValue(parameters.parallel_execution_dirs, parameters.path) }}:
          inlineScript: |
            export COVERAGE_FILE=.coverage.${{ parameters.name }}
            pytest -vv ${{ parameters.path }} -k "_int.py" --dist=loadfile -n ${{ parameters.num_threads }} --reruns ${{ parameters.num_reruns }} --reruns-delay ${{ parameters.reruns_delay }} --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-int.xml --durations=0
        ${{ if contains(parameters.path, 'azext_iot/tests/iothub') }}:
          inlineScript: |
            export COVERAGE_FILE=.coverage.${{ parameters.name }}
            pytest -vv ${{ parameters.path }} -k "_int.py" --dist=loadfile -n ${{ parameters.num_threads }} --reruns ${{ parameters.num_reruns }} --reruns-delay ${{ parameters.reruns_delay }} --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-int.xml --deselect=azext_iot/tests/iothub/core/test_iothub_discovery_int.py::TestIoTHubDiscovery::test_iothub_targets --durations=0
        ${{ if contains(parameters.path, 'azext_iot/tests/dps') }}:
          inlineScript: |
            IOTHUB=`echo test-dps-hub-py$RANDOM`
            sudo apt install dos2unix -y -q
            dos2unix pytest.ini
            CREATE_HUB=`grep -c "azext_iot_testdps_hub=$" pytest.ini`
            echo `(${{ parameters.azureCLIVersion }} == "released" || ${{ parameters.azureCLIVersion }} == "min")`
            echo ${{ parameters.azureCLIVersion }}


            if (($CREATE_HUB > 0 && (${{ parameters.azureCLIVersion }} == "released" || ${{ parameters.azureCLIVersion }} == "min")))
            then
              echo $IOTHUB
              az iot hub create -n $IOTHUB -g $(AZEXT_IOT_TESTRG)
              sed -z -i 's/azext_iot_testdps_hub=\n/azext_iot_testdps_hub='"$IOTHUB"'\n/g' pytest.ini
              cat pytest.ini
            fi

            export COVERAGE_FILE=.coverage.${{ parameters.name }}
            pytest -vv ${{ parameters.path }} -k "_int.py" --dist=loadfile -n ${{ parameters.num_threads }} --reruns ${{ parameters.num_reruns }} --reruns-delay ${{ parameters.reruns_delay }} --cov=azext_iot --cov-config .coveragerc --junitxml=junit/test-iotext-int.xml --durations=0
            e=$?

            if (($CREATE_HUB > 0))
            then
              az iot hub delete -n $IOTHUB -g $(AZEXT_IOT_TESTRG)
            fi
            exit $e

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: .coverage.${{ parameters.name }}
      publishLocation: 'Container'
      artifactName: 'coverage'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish ${{ parameters.name }} test results for Python ${{ parameters.pythonVersion }} on OS $(Agent.OS)'
      searchFolder: '$(System.DefaultWorkingDirectory)'
