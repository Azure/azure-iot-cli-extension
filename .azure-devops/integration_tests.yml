# Copyright (c) Microsoft Corporation. All rights reserved.

pr: none
trigger: none

parameters:
- name: variableGroup
  type: string
  default: 'aziotcli_test_primary'
- name: testAgentVmImage
  type: string
  default: 'ubuntu-20.04'
  values:
  - 'ubuntu-20.04'
  - 'ubuntu-22.04'
  - 'ubuntu-latest'
- name: pythonVersion
  displayName: 'Python version for building wheel, KPIs'
  type: string
  default: '3.8'
  values:
  - '3.8'
  - '3.9'
  - '3.10'
- name: pythonVersionsTestingMatrix
  type: object
  default: >
    {
      Python38:
      {
        python: '3.8'
      },
      Python39:
      {
        python: '3.9'
      },
      Python310:
      {
        python: '3.10'
      }
    }
- name: stageForPublish
  type: boolean
  default: false
- name: architecture
  type: string
  default: 'x64'
- name: 'testCentral'
  type: boolean
  default: true
- name: 'testADT'
  type: boolean
  default: true
- name: 'testDPS'
  type: boolean
  default: true
- name: 'testHub'
  type: boolean
  default: true
- name: 'testADU'
  type: boolean
  default: true
- name: 'testADUupdate'
  type: boolean
  default: true

variables:
  - group: ${{ parameters.variableGroup }}

stages:
  - stage: 'build'
    displayName: 'Build and Publish Artifacts'
    jobs:

    - job: 'Build_Publish_Azure_IoT_CLI_Extension'
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/setup-ci-machine.yml

      - template: templates/build-publish-azure-iot-cli-extension.yml

    - job: 'Build_Publish_Azure_CLI_Test_SDK'
      pool:
        vmImage: ${{ parameters.testAgentVmImage }}

      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/setup-ci-machine.yml

      - template: templates/build-publish-azure-cli-test-sdk.yml

    - job: 'recordVersion'
      displayName: 'Install and verify version'
      dependsOn: [Build_Publish_Azure_IoT_CLI_Extension, Build_Publish_Azure_CLI_Test_SDK]
      steps:
      - template: templates/setup-dev-test-env.yml
        parameters:
          pythonVersion: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}

      - template: templates/install-and-record-version.yml

  - stage: 'test'
    displayName: 'Run tests'
    dependsOn: build
    variables:
      pythonVersions: ${{ parameters.pythonVersionsTestingMatrix }}
    condition: succeeded()
    pool:
      vmImage: ${{ parameters.testAgentVmImage }}
    jobs:
    - template: templates/trigger-tests.yml
      parameters:
        testADT: ${{ parameters.testADT }}
        testCentral: ${{ parameters.testCentral }}
        testDPS: ${{ parameters.testDPS }}
        testHub: ${{ parameters.testHub }}
        testADU: ${{ parameters.testADU }}
        testADUupdate: ${{ parameters.testADUupdate }}
        maxParallelADT: 2
        maxParallelDPS: 2
        maxParallelHub: 2
        maxParallelADU: 4
    - job: 'evaluateCmdTable'
      displayName: 'Evaluate Command Table'
      steps:
      - template: templates/evaluate-command-table.yml
    # - job: 'validate_ref_docs'
    #   displayName: 'Validate Reference Document Generation'
    #   steps:
    #   - template: templates/validate-refdoc-generation.yml
  - stage: 'smokeTest'
    displayName: 'Run smoke tests'
    dependsOn: test
    variables:
      pythonVersions: ${{ parameters.pythonVersionsTestingMatrix }}
    condition: succeeded()
    pool:
      vmImage: ${{ parameters.testAgentVmImage }}
    jobs:
    - template: templates/smoke-tests.yml
      parameters:
        azureCLIVersion: released

  - stage: 'kpi'
    displayName: 'Build KPIs'
    dependsOn: [build, test]
    jobs:
    - job: 'calculateCodeCoverage'
      displayName: 'Calculate distributed code coverage'
      steps:
      - template: templates/calculate-code-coverage.yml
        parameters:
          pythonVersion: ${{ parameters.pythonVersion }}
          architecture: ${{ parameters.architecture }}